/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGSHADOW_SHADOWVOLUME
#define OSGSHADOW_SHADOWVOLUME 1

#include <osg/Camera>
#include <osg/Light>
#include <osg/Geode>

#include <osgShadow/ShadowTechnique>
#include <osgShadow/OccluderGeometry>

namespace osgShadow {

/** ShadowedTexture provides an implementation of shadow textures.*/
class OSGSHADOW_EXPORT ShadowVolume : public ShadowTechnique
{
    public :
        ShadowVolume();

        ShadowVolume(const ShadowVolume& es, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
            
        META_Object(osgShadow, ShadowVolume);
        

        void setDrawMode(osgShadow::ShadowVolumeGeometry::DrawMode drawMode);
        osgShadow::ShadowVolumeGeometry::DrawMode getDrawMode() const { return _drawMode; }

        void setDynamicShadowVolumes(bool dynamicShadowVolumes);
        bool getDynamicShadowVolumes() const { return _dynamicShadowVolumes; }

        /** initialize the ShadowedScene and local cached data structures.*/
        virtual void init();
        
        /** run the update traversal of the ShadowedScene and update any loca chached data structures.*/
        virtual void update(osg::NodeVisitor& nv);
        
        /** run the cull traversal of the ShadowedScene and set up the rendering for this ShadowTechnique.*/
        virtual void cull(osgUtil::CullVisitor& cv);
        
        /** Clean scene graph from any shadow technique specific nodes, state and drawables.*/
        virtual void cleanSceneGraph();
        

    protected :

        virtual ~ShadowVolume();
        
        osgShadow::ShadowVolumeGeometry::DrawMode       _drawMode;
        bool                                            _dynamicShadowVolumes;

        osg::ref_ptr<osgShadow::OccluderGeometry> _occluder;
        
        OpenThreads::Mutex                              _shadowVolumeMutex;
        osg::ref_ptr<osgShadow::ShadowVolumeGeometry>   _shadowVolume;
        
        osg::Vec4                   _lightpos;
        
        osg::ref_ptr<osg::Light>    _ambientLight;
        osg::ref_ptr<osg::Light>    _diffuseLight;

        osg::ref_ptr<osg::StateSet> _ss1;
        osg::ref_ptr<osg::StateSet> _mainShadowStateSet;
        osg::ref_ptr<osg::StateSet> _shadowVolumeStateSet;
        osg::ref_ptr<osg::StateSet> _shadowedSceneStateSet;


};

}

#endif
