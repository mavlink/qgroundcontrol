/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGSHADOW_SHADOWEDSCENE
#define OSGSHADOW_SHADOWEDSCENE 1

#include <osg/buffered_value>
#include <osg/Camera>
#include <osg/Texture2D>
#include <osg/TexGenNode>

#include <osgShadow/ShadowTechnique>

namespace osgShadow {

/** ShadowedScene provides a mechansim for decorating a scene that the needs to have shadows cast upon it.*/
class OSGSHADOW_EXPORT ShadowedScene : public osg::Group
{
    public:
    
        ShadowedScene(ShadowTechnique* st=0);

        ShadowedScene(const ShadowedScene& es, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
            
        META_Node(osgShadow, ShadowedScene);
        
        virtual void traverse(osg::NodeVisitor& nv);
        
        void setReceivesShadowTraversalMask(unsigned int mask) { _receivesShadowTraversalMask = mask; }
        unsigned int getReceivesShadowTraversalMask() const { return _receivesShadowTraversalMask; }
        
        void setCastsShadowTraversalMask(unsigned int mask) { _castsShadowTraversalMask = mask; }
        unsigned int getCastsShadowTraversalMask() const { return _castsShadowTraversalMask; }
        
        void setShadowTechnique(ShadowTechnique* technique);
        ShadowTechnique* getShadowTechnique() { return _shadowTechnique.get(); }
        const ShadowTechnique* getShadowTechnique() const { return _shadowTechnique.get(); }

        /** Clean scene graph from any shadow technique specific nodes, state and drawables.*/
        void cleanSceneGraph();

        /** Dirty any cache data structures held in the attached ShadowTechnqiue.*/        
        void dirty();
        
    protected:

        virtual ~ShadowedScene();

        unsigned int _receivesShadowTraversalMask;
        unsigned int _castsShadowTraversalMask;
        
        osg::ref_ptr<ShadowTechnique> _shadowTechnique;
        
};

}

#endif
