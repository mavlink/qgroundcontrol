<tagfile>
  <compound kind="class">
    <name>Q3Accel</name>
    <filename>q3accel.html</filename>
    <member kind="function">
      <name>Q3Accel</name>
      <anchor>Q3Accel</anchor>
      <arglist>( QWidget * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Accel</name>
      <anchor>Q3Accel-2</anchor>
      <arglist>( QWidget * watch, QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>activatedAmbiguously</name>
      <anchor>activatedAmbiguously</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectItem</name>
      <anchor>connectItem</anchor>
      <arglist>( int id, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disconnectItem</name>
      <anchor>disconnectItem</anchor>
      <arglist>( int id, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>findKey</name>
      <anchor>findKey</anchor>
      <arglist>( const QKeySequence &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( const QKeySequence &amp; key, int id = -1 )</arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>isEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isItemEnabled</name>
      <anchor>isItemEnabled</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>setEnabled</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setItemEnabled</name>
      <anchor>setItemEnabled</anchor>
      <arglist>( int id, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setWhatsThis</name>
      <anchor>setWhatsThis</anchor>
      <arglist>( int id, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>shortcutKey</name>
      <anchor>shortcutKey</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>( int id )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3AccessibleTitleBar</name>
    <filename>q3accessibletitlebar.html</filename>
    <member kind="function">
      <name>Q3AccessibleTitleBar</name>
      <anchor>Q3AccessibleTitleBar</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>titleBar</name>
      <anchor>titleBar</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Action</name>
    <filename>q3action.html</filename>
    <member kind="function">
      <name>Q3Action</name>
      <anchor>Q3Action</anchor>
      <arglist>( QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Action</name>
      <anchor>Q3Action-2</anchor>
      <arglist>( const QString &amp; menuText, QKeySequence accel, QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Action</name>
      <anchor>Q3Action-3</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; menuText, QKeySequence accel, QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Action</name>
      <anchor>Q3Action-4</anchor>
      <arglist>( const QString &amp; text, const QIcon &amp; icon, const QString &amp; menuText, QKeySequence accel, QObject * parent, const char * name = 0, bool toggle = false )</arglist>
    </member>
    <member kind="function">
      <name>Q3Action</name>
      <anchor>Q3Action-5</anchor>
      <arglist>( const QString &amp; text, const QString &amp; menuText, QKeySequence accel, QObject * parent, const char * name = 0, bool toggle = false )</arglist>
    </member>
    <member kind="function">
      <name>Q3Action</name>
      <anchor>Q3Action-6</anchor>
      <arglist>( QObject * parent, const char * name, bool toggle )</arglist>
    </member>
    <member kind="function">
      <name>activate</name>
      <anchor>activate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTo</name>
      <anchor>addTo</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>addedTo</name>
      <anchor>addedTo</anchor>
      <arglist>( QWidget * actionWidget, QWidget * container )</arglist>
    </member>
    <member kind="function">
      <name>addedTo</name>
      <anchor>addedTo-2</anchor>
      <arglist>( int index, Q3PopupMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>removeFrom</name>
      <anchor>removeFrom</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setDisabled</name>
      <anchor>setDisabled</anchor>
      <arglist>( bool disable )</arglist>
    </member>
    <member kind="function">
      <name>toggle</name>
      <anchor>toggle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toggled</name>
      <anchor>toggled</anchor>
      <arglist>( bool on )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ActionGroup</name>
    <filename>q3actiongroup.html</filename>
    <member kind="function">
      <name>Q3ActionGroup</name>
      <anchor>Q3ActionGroup</anchor>
      <arglist>( QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ActionGroup</name>
      <anchor>Q3ActionGroup-2</anchor>
      <arglist>( QObject * parent, const char * name, bool exclusive )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( Q3Action * action )</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( Q3Action * action )</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>addSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTo</name>
      <anchor>addTo</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>addedTo</name>
      <anchor>addedTo</anchor>
      <arglist>( QWidget * actionWidget, QWidget * container, Q3Action * a )</arglist>
    </member>
    <member kind="function">
      <name>addedTo</name>
      <anchor>addedTo-2</anchor>
      <arglist>( int index, Q3PopupMenu * menu, Q3Action * a )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( Q3Action * action )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>( Q3Action * action )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3AsciiCache</name>
    <filename>q3asciicache.html</filename>
    <member kind="function">
      <name>Q3AsciiCache</name>
      <anchor>Q3AsciiCache-2</anchor>
      <arglist>( int maxCost = 100, int size = 17, bool caseSensitive = true, bool copyKeys = true )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const char * k, bool ref = true )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const char * k, const type * d, int c = 1, int p = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxCost</name>
      <anchor>maxCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const char * k )</arglist>
    </member>
    <member kind="function">
      <name>setMaxCost</name>
      <anchor>setMaxCost</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const char * k )</arglist>
    </member>
    <member kind="function">
      <name>totalCost</name>
      <anchor>totalCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const char * k )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3AsciiCacheIterator</name>
    <filename>q3asciicacheiterator.html</filename>
    <member kind="function">
      <name>Q3AsciiCacheIterator</name>
      <anchor>Q3AsciiCacheIterator</anchor>
      <arglist>( const Q3AsciiCache&lt;type&gt; &amp; cache )</arglist>
    </member>
    <member kind="function">
      <name>Q3AsciiCacheIterator</name>
      <anchor>Q3AsciiCacheIterator-2</anchor>
      <arglist>( const Q3AsciiCacheIterator&lt;type&gt; &amp; ci )</arglist>
    </member>
    <member kind="function">
      <name>atFirst</name>
      <anchor>atFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atLast</name>
      <anchor>atLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLast</name>
      <anchor>toLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3AsciiCacheIterator&lt;type&gt; &amp; ci )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3AsciiDict</name>
    <filename>q3asciidict.html</filename>
    <member kind="function">
      <name>Q3AsciiDict</name>
      <anchor>Q3AsciiDict</anchor>
      <arglist>( int size = 17, bool caseSensitive = true, bool copyKeys = true )</arglist>
    </member>
    <member kind="function">
      <name>Q3AsciiDict</name>
      <anchor>Q3AsciiDict-2</anchor>
      <arglist>( const Q3AsciiDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const char * key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const char * key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const char * key )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( const char * key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( uint newsize )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const char * key )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3AsciiDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const char * key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3AsciiDictIterator</name>
    <filename>q3asciidictiterator.html</filename>
    <member kind="function">
      <name>Q3AsciiDictIterator</name>
      <anchor>Q3AsciiDictIterator</anchor>
      <arglist>( const Q3AsciiDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Button</name>
    <filename>q3button.html</filename>
    <member kind="function">
      <name>Q3Button</name>
      <anchor>Q3Button</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawButton</name>
      <anchor>drawButton</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>drawButtonLabel</name>
      <anchor>drawButtonLabel</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ButtonGroup</name>
    <filename>q3buttongroup.html</filename>
    <member kind="function">
      <name>Q3ButtonGroup</name>
      <anchor>Q3ButtonGroup</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ButtonGroup</name>
      <anchor>Q3ButtonGroup-2</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ButtonGroup</name>
      <anchor>Q3ButtonGroup-3</anchor>
      <arglist>( int strips, Qt::Orientation orientation, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ButtonGroup</name>
      <anchor>Q3ButtonGroup-4</anchor>
      <arglist>( int strips, Qt::Orientation orientation, const QString &amp; title, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>id</name>
      <anchor>id</anchor>
      <arglist>( QAbstractButton * button )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( QAbstractButton * button, int id = -1 )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>released</name>
      <anchor>released</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QAbstractButton * button )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Cache</name>
    <filename>q3cache.html</filename>
    <member kind="function">
      <name>Q3Cache</name>
      <anchor>Q3Cache-2</anchor>
      <arglist>( int maxCost = 100, int size = 17, bool caseSensitive = true )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; k, bool ref = true )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; k, const type * d, int c = 1, int p = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxCost</name>
      <anchor>maxCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; k )</arglist>
    </member>
    <member kind="function">
      <name>setMaxCost</name>
      <anchor>setMaxCost</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const QString &amp; k )</arglist>
    </member>
    <member kind="function">
      <name>totalCost</name>
      <anchor>totalCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const QString &amp; k )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CacheIterator</name>
    <filename>q3cacheiterator.html</filename>
    <member kind="function">
      <name>Q3CacheIterator</name>
      <anchor>Q3CacheIterator</anchor>
      <arglist>( const Q3Cache&lt;type&gt; &amp; cache )</arglist>
    </member>
    <member kind="function">
      <name>Q3CacheIterator</name>
      <anchor>Q3CacheIterator-2</anchor>
      <arglist>( const Q3CacheIterator&lt;type&gt; &amp; ci )</arglist>
    </member>
    <member kind="function">
      <name>atFirst</name>
      <anchor>atFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atLast</name>
      <anchor>atLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLast</name>
      <anchor>toLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3CacheIterator&lt;type&gt; &amp; ci )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Canvas</name>
    <filename>q3canvas.html</filename>
    <member kind="function">
      <name>Q3Canvas</name>
      <anchor>Q3Canvas</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Canvas</name>
      <anchor>Q3Canvas-2</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>Q3Canvas</name>
      <anchor>Q3Canvas-3</anchor>
      <arglist>( QPixmap p, int h, int v, int tilewidth, int tileheight )</arglist>
    </member>
    <member kind="function">
      <name>advance</name>
      <anchor>advance</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>allItems</name>
      <anchor>allItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backgroundColor</name>
      <anchor>backgroundColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backgroundPixmap</name>
      <anchor>backgroundPixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>chunkSize</name>
      <anchor>chunkSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>collisions</name>
      <anchor>collisions</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>collisions</name>
      <anchor>collisions-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>collisions</name>
      <anchor>collisions-3</anchor>
      <arglist>( const Q3PointArray &amp; chunklist, const Q3CanvasItem * item, bool exact )</arglist>
    </member>
    <member kind="function">
      <name>drawArea</name>
      <anchor>drawArea</anchor>
      <arglist>( const QRect &amp; clip, QPainter * painter, bool dbuf = false )</arglist>
    </member>
    <member kind="function">
      <name>drawBackground</name>
      <anchor>drawBackground</anchor>
      <arglist>( QPainter &amp; painter, const QRect &amp; clip )</arglist>
    </member>
    <member kind="function">
      <name>drawForeground</name>
      <anchor>drawForeground</anchor>
      <arglist>( QPainter &amp; painter, const QRect &amp; clip )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>onCanvas</name>
      <anchor>onCanvas</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>onCanvas</name>
      <anchor>onCanvas-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>resized</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>retune</name>
      <anchor>retune</anchor>
      <arglist>( int chunksze, int mxclusters = 100 )</arglist>
    </member>
    <member kind="function">
      <name>setAdvancePeriod</name>
      <anchor>setAdvancePeriod</anchor>
      <arglist>( int ms )</arglist>
    </member>
    <member kind="function">
      <name>setAllChanged</name>
      <anchor>setAllChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundPixmap</name>
      <anchor>setBackgroundPixmap</anchor>
      <arglist>( const QPixmap &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setChanged</name>
      <anchor>setChanged</anchor>
      <arglist>( const QRect &amp; area )</arglist>
    </member>
    <member kind="function">
      <name>setDoubleBuffering</name>
      <anchor>setDoubleBuffering</anchor>
      <arglist>( bool y )</arglist>
    </member>
    <member kind="function">
      <name>setTile</name>
      <anchor>setTile</anchor>
      <arglist>( int x, int y, int tilenum )</arglist>
    </member>
    <member kind="function">
      <name>setTiles</name>
      <anchor>setTiles</anchor>
      <arglist>( QPixmap p, int h, int v, int tilewidth, int tileheight )</arglist>
    </member>
    <member kind="function">
      <name>setUnchanged</name>
      <anchor>setUnchanged</anchor>
      <arglist>( const QRect &amp; area )</arglist>
    </member>
    <member kind="function">
      <name>setUpdatePeriod</name>
      <anchor>setUpdatePeriod</anchor>
      <arglist>( int ms )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tile</name>
      <anchor>tile</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>tileHeight</name>
      <anchor>tileHeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tileWidth</name>
      <anchor>tileWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tilesHorizontally</name>
      <anchor>tilesHorizontally</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tilesVertically</name>
      <anchor>tilesVertically</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>validChunk</name>
      <anchor>validChunk</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>validChunk</name>
      <anchor>validChunk-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasEllipse</name>
    <filename>q3canvasellipse.html</filename>
    <member kind="function">
      <name>Q3CanvasEllipse</name>
      <anchor>Q3CanvasEllipse</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasEllipse</name>
      <anchor>Q3CanvasEllipse-2</anchor>
      <arglist>( int width, int height, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasEllipse</name>
      <anchor>Q3CanvasEllipse-3</anchor>
      <arglist>( int width, int height, int startangle, int angle, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>angleLength</name>
      <anchor>angleLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>angleStart</name>
      <anchor>angleStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawShape</name>
      <anchor>drawShape</anchor>
      <arglist>( QPainter &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAngles</name>
      <anchor>setAngles</anchor>
      <arglist>( int start, int length )</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>active</name>
      <anchor>active</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enabled</name>
      <anchor>enabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visible</name>
      <anchor>visible</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasItem</name>
    <filename>q3canvasitem.html</filename>
    <member kind="enum">
      <name>RttiValues</name>
      <anchor>RttiValues-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasItem</name>
      <anchor>Q3CanvasItem</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>advance</name>
      <anchor>advance</anchor>
      <arglist>( int phase )</arglist>
    </member>
    <member kind="function">
      <name>animated</name>
      <anchor>animated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingRectAdvanced</name>
      <anchor>boundingRectAdvanced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canvas</name>
      <anchor>canvas</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>collidesWith</name>
      <anchor>collidesWith</anchor>
      <arglist>( const Q3CanvasItem * other )</arglist>
    </member>
    <member kind="function">
      <name>collisions</name>
      <anchor>collisions</anchor>
      <arglist>( bool exact )</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter &amp; painter )</arglist>
    </member>
    <member kind="function">
      <name>hide</name>
      <anchor>hide</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>isEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVisible</name>
      <anchor>isVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move</anchor>
      <arglist>( double x, double y )</arglist>
    </member>
    <member kind="function">
      <name>moveBy</name>
      <anchor>moveBy</anchor>
      <arglist>( double dx, double dy )</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActive</name>
      <anchor>setActive</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>setAnimated</name>
      <anchor>setAnimated</anchor>
      <arglist>( bool y )</arglist>
    </member>
    <member kind="function">
      <name>setCanvas</name>
      <anchor>setCanvas</anchor>
      <arglist>( Q3Canvas * c )</arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>setEnabled</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>setVelocity</name>
      <anchor>setVelocity</anchor>
      <arglist>( double vx, double vy )</arglist>
    </member>
    <member kind="function">
      <name>setVisible</name>
      <anchor>setVisible</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>setX</name>
      <anchor>setX</anchor>
      <arglist>( double x )</arglist>
    </member>
    <member kind="function">
      <name>setXVelocity</name>
      <anchor>setXVelocity</anchor>
      <arglist>( double vx )</arglist>
    </member>
    <member kind="function">
      <name>setY</name>
      <anchor>setY</anchor>
      <arglist>( double y )</arglist>
    </member>
    <member kind="function">
      <name>setYVelocity</name>
      <anchor>setYVelocity</anchor>
      <arglist>( double vy )</arglist>
    </member>
    <member kind="function">
      <name>setZ</name>
      <anchor>setZ</anchor>
      <arglist>( double z )</arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>show</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xVelocity</name>
      <anchor>xVelocity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>yVelocity</name>
      <anchor>yVelocity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>z</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasItemList</name>
    <filename>q3canvasitemlist.html</filename>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const Q3CanvasItemList &amp; l )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasLine</name>
    <filename>q3canvasline.html</filename>
    <member kind="function">
      <name>Q3CanvasLine</name>
      <anchor>Q3CanvasLine</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>endPoint</name>
      <anchor>endPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPoints</name>
      <anchor>setPoints</anchor>
      <arglist>( int xa, int ya, int xb, int yb )</arglist>
    </member>
    <member kind="function">
      <name>startPoint</name>
      <anchor>startPoint</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasPixmap</name>
    <filename>q3canvaspixmap.html</filename>
    <member kind="function">
      <name>Q3CanvasPixmap</name>
      <anchor>Q3CanvasPixmap</anchor>
      <arglist>( const QString &amp; datafilename )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasPixmap</name>
      <anchor>Q3CanvasPixmap-2</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasPixmap</name>
      <anchor>Q3CanvasPixmap-3</anchor>
      <arglist>( const QPixmap &amp; pm, const QPoint &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>offsetX</name>
      <anchor>offsetX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>offsetY</name>
      <anchor>offsetY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOffset</name>
      <anchor>setOffset</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasPixmapArray</name>
      <anchor>Q3CanvasPixmapArray-3</anchor>
      <arglist>( Q3PtrList&lt;QPixmap&gt; list, Q3PtrList&lt;QPoint&gt; hotspots )</arglist>
    </member>
    <member kind="function">
      <name>operator!</name>
      <anchor>operator-not</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasPixmapArray</name>
    <filename>q3canvaspixmaparray.html</filename>
    <member kind="function">
      <name>Q3CanvasPixmapArray</name>
      <anchor>Q3CanvasPixmapArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasPixmapArray</name>
      <anchor>Q3CanvasPixmapArray-2</anchor>
      <arglist>( const QString &amp; datafilenamepattern, int fc = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasPixmapArray</name>
      <anchor>Q3CanvasPixmapArray-4</anchor>
      <arglist>( Q3ValueList&lt;QPixmap&gt; list, Q3PointArray hotspots = Q3PointArray()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>image</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readCollisionMasks</name>
      <anchor>readCollisionMasks</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>readPixmaps</name>
      <anchor>readPixmaps</anchor>
      <arglist>( const QString &amp; filenamepattern, int fc = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setImage</name>
      <anchor>setImage</anchor>
      <arglist>( int i, Q3CanvasPixmap * p )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasPolygon</name>
    <filename>q3canvaspolygon.html</filename>
    <member kind="function">
      <name>Q3CanvasPolygon</name>
      <anchor>Q3CanvasPolygon</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>areaPoints</name>
      <anchor>areaPoints</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawShape</name>
      <anchor>drawShape</anchor>
      <arglist>( QPainter &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>points</name>
      <anchor>points</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPoints</name>
      <anchor>setPoints</anchor>
      <arglist>( Q3PointArray pa )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasPolygonalItem</name>
    <filename>q3canvaspolygonalitem.html</filename>
    <member kind="function">
      <name>Q3CanvasPolygonalItem</name>
      <anchor>Q3CanvasPolygonalItem</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>areaPoints</name>
      <anchor>areaPoints</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>areaPointsAdvanced</name>
      <anchor>areaPointsAdvanced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>brush</name>
      <anchor>brush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>drawShape</name>
      <anchor>drawShape</anchor>
      <arglist>( QPainter &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>invalidate</name>
      <anchor>invalidate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pen</name>
      <anchor>pen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBrush</name>
      <anchor>setBrush</anchor>
      <arglist>( QBrush b )</arglist>
    </member>
    <member kind="function">
      <name>setPen</name>
      <anchor>setPen</anchor>
      <arglist>( QPen p )</arglist>
    </member>
    <member kind="function">
      <name>setWinding</name>
      <anchor>setWinding</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>winding</name>
      <anchor>winding</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasRectangle</name>
    <filename>q3canvasrectangle.html</filename>
    <member kind="function">
      <name>Q3CanvasRectangle</name>
      <anchor>Q3CanvasRectangle</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasRectangle</name>
      <anchor>Q3CanvasRectangle-2</anchor>
      <arglist>( const QRect &amp; r, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasRectangle</name>
      <anchor>Q3CanvasRectangle-3</anchor>
      <arglist>( int x, int y, int width, int height, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>chunks</name>
      <anchor>chunks</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawShape</name>
      <anchor>drawShape</anchor>
      <arglist>( QPainter &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasSpline</name>
    <filename>q3canvasspline.html</filename>
    <member kind="function">
      <name>Q3CanvasSpline</name>
      <anchor>Q3CanvasSpline</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>closed</name>
      <anchor>closed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>controlPoints</name>
      <anchor>controlPoints</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setControlPoints</name>
      <anchor>setControlPoints</anchor>
      <arglist>( Q3PointArray ctrl, bool close = true )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasSprite</name>
    <filename>q3canvassprite.html</filename>
    <member kind="enum">
      <name>FrameAnimationType</name>
      <anchor>FrameAnimationType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasSprite</name>
      <anchor>Q3CanvasSprite</anchor>
      <arglist>( Q3CanvasPixmapArray * a, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>advance</name>
      <anchor>advance</anchor>
      <arglist>( int phase )</arglist>
    </member>
    <member kind="function">
      <name>bottomEdge</name>
      <anchor>bottomEdge</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomEdge</name>
      <anchor>bottomEdge-2</anchor>
      <arglist>( int ny )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter &amp; painter )</arglist>
    </member>
    <member kind="function">
      <name>frame</name>
      <anchor>frame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameCount</name>
      <anchor>frameCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>image</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>image-2</anchor>
      <arglist>( int f )</arglist>
    </member>
    <member kind="function">
      <name>imageAdvanced</name>
      <anchor>imageAdvanced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftEdge</name>
      <anchor>leftEdge</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftEdge</name>
      <anchor>leftEdge-2</anchor>
      <arglist>( int nx )</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move-2</anchor>
      <arglist>( double nx, double ny, int nf )</arglist>
    </member>
    <member kind="function">
      <name>rightEdge</name>
      <anchor>rightEdge</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightEdge</name>
      <anchor>rightEdge-2</anchor>
      <arglist>( int nx )</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFrame</name>
      <anchor>setFrame</anchor>
      <arglist>( int f )</arglist>
    </member>
    <member kind="function">
      <name>setFrameAnimation</name>
      <anchor>setFrameAnimation</anchor>
      <arglist>( FrameAnimationType type = Cycle, int step = 1, int state = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setSequence</name>
      <anchor>setSequence</anchor>
      <arglist>( Q3CanvasPixmapArray * a )</arglist>
    </member>
    <member kind="function">
      <name>topEdge</name>
      <anchor>topEdge</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topEdge</name>
      <anchor>topEdge-2</anchor>
      <arglist>( int ny )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasText</name>
    <filename>q3canvastext.html</filename>
    <member kind="function">
      <name>Q3CanvasText</name>
      <anchor>Q3CanvasText</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasText</name>
      <anchor>Q3CanvasText-2</anchor>
      <arglist>( const QString &amp; t, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasText</name>
      <anchor>Q3CanvasText-3</anchor>
      <arglist>( const QString &amp; t, QFont f, Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter &amp; painter )</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>setTextFlags</name>
      <anchor>setTextFlags</anchor>
      <arglist>( int f )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textFlags</name>
      <anchor>textFlags</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CanvasView</name>
    <filename>q3canvasview.html</filename>
    <member kind="function">
      <name>Q3CanvasView</name>
      <anchor>Q3CanvasView</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3CanvasView</name>
      <anchor>Q3CanvasView-2</anchor>
      <arglist>( Q3Canvas * canvas, QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>canvas</name>
      <anchor>canvas</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawContents</name>
      <anchor>drawContents</anchor>
      <arglist>( QPainter * p, int cx, int cy, int cw, int ch )</arglist>
    </member>
    <member kind="function">
      <name>inverseWorldMatrix</name>
      <anchor>inverseWorldMatrix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCanvas</name>
      <anchor>setCanvas</anchor>
      <arglist>( Q3Canvas * canvas )</arglist>
    </member>
    <member kind="function">
      <name>setWorldMatrix</name>
      <anchor>setWorldMatrix</anchor>
      <arglist>( const QMatrix &amp; wm )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>worldMatrix</name>
      <anchor>worldMatrix</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CheckListItem</name>
    <filename>q3checklistitem.html</filename>
    <member kind="enum">
      <name>ToggleState</name>
      <anchor>ToggleState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem</anchor>
      <arglist>( Q3CheckListItem * parent, const QString &amp; text, Type tt = RadioButtonController )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-2</anchor>
      <arglist>( Q3CheckListItem * parent, Q3ListViewItem * after, const QString &amp; text, Type tt = RadioButtonController )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-3</anchor>
      <arglist>( Q3ListViewItem * parent, const QString &amp; text, Type tt = RadioButtonController )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-4</anchor>
      <arglist>( Q3ListViewItem * parent, Q3ListViewItem * after, const QString &amp; text, Type tt = RadioButtonController )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-5</anchor>
      <arglist>( Q3ListView * parent, const QString &amp; text, Type tt = RadioButtonController )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-6</anchor>
      <arglist>( Q3ListView * parent, Q3ListViewItem * after, const QString &amp; text, Type tt = RadioButtonController )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-7</anchor>
      <arglist>( Q3ListViewItem * parent, const QString &amp; text, const QPixmap &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>Q3CheckListItem</name>
      <anchor>Q3CheckListItem-8</anchor>
      <arglist>( Q3ListView * parent, const QString &amp; text, const QPixmap &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>activate</name>
      <anchor>activate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOn</name>
      <anchor>isOn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTristate</name>
      <anchor>isTristate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintCell</name>
      <anchor>paintCell</anchor>
      <arglist>( QPainter * p, const QPalette &amp; pal, int column, int width, int align )</arglist>
    </member>
    <member kind="function">
      <name>paintFocus</name>
      <anchor>paintFocus</anchor>
      <arglist>( QPainter * p, const QPalette &amp; pal, const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOn</name>
      <anchor>setOn</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setState</name>
      <anchor>setState</anchor>
      <arglist>( ToggleState s )</arglist>
    </member>
    <member kind="function">
      <name>setTristate</name>
      <anchor>setTristate</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChange</name>
      <anchor>stateChange</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>turnOffChild</name>
      <anchor>turnOffChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CheckTableItem</name>
    <filename>q3checktableitem.html</filename>
    <member kind="function">
      <name>Q3CheckTableItem</name>
      <anchor>Q3CheckTableItem</anchor>
      <arglist>( Q3Table * table, const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>isChecked</name>
      <anchor>isChecked</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setChecked</name>
      <anchor>setChecked</anchor>
      <arglist>( bool b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ColorDrag</name>
    <filename>q3colordrag.html</filename>
    <member kind="function">
      <name>Q3ColorDrag</name>
      <anchor>Q3ColorDrag</anchor>
      <arglist>( const QColor &amp; col, QWidget * dragsource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ColorDrag</name>
      <anchor>Q3ColorDrag-2</anchor>
      <arglist>( QWidget * dragsource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>canDecode</name>
      <anchor>canDecode</anchor>
      <arglist>( QMimeSource * source )</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode</anchor>
      <arglist>( QMimeSource * source, QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ComboTableItem</name>
    <filename>q3combotableitem.html</filename>
    <member kind="function">
      <name>Q3ComboTableItem</name>
      <anchor>Q3ComboTableItem</anchor>
      <arglist>( Q3Table * table, const QStringList &amp; list, bool editable = false )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentText</name>
      <anchor>currentText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEditable</name>
      <anchor>isEditable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem-2</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setEditable</name>
      <anchor>setEditable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setStringList</name>
      <anchor>setStringList</anchor>
      <arglist>( const QStringList &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3CString</name>
    <filename>q3cstring.html</filename>
    <member kind="function">
      <name>Q3CString</name>
      <anchor>Q3CString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3CString</name>
      <anchor>Q3CString-2</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>Q3CString</name>
      <anchor>Q3CString-3</anchor>
      <arglist>( const Q3CString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>Q3CString</name>
      <anchor>Q3CString-4</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>Q3CString</name>
      <anchor>Q3CString-5</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>Q3CString</name>
      <anchor>Q3CString-6</anchor>
      <arglist>( const char * str, uint maxsize )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftJustify</name>
      <anchor>leftJustify</anchor>
      <arglist>( uint width, char fill = &apos; &apos;, bool truncate = false )</arglist>
    </member>
    <member kind="function">
      <name>lower</name>
      <anchor>lower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightJustify</name>
      <anchor>rightJustify</anchor>
      <arglist>( uint width, char fill = &apos; &apos;, bool truncate = false )</arglist>
    </member>
    <member kind="function">
      <name>setExpand</name>
      <anchor>setExpand</anchor>
      <arglist>( uint index, char c )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum</anchor>
      <arglist>( double n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-2</anchor>
      <arglist>( long n )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-3</anchor>
      <arglist>( ulong n )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-4</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-5</anchor>
      <arglist>( uint n )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-6</anchor>
      <arglist>( short n )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-7</anchor>
      <arglist>( ushort n )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-8</anchor>
      <arglist>( float n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>setStr</name>
      <anchor>setStr</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>simplifyWhiteSpace</name>
      <anchor>simplifyWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sprintf</name>
      <anchor>sprintf</anchor>
      <arglist>( const char * format, ... )</arglist>
    </member>
    <member kind="function">
      <name>stripWhiteSpace</name>
      <anchor>stripWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDouble</name>
      <anchor>toDouble</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toFloat</name>
      <anchor>toFloat</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toInt</name>
      <anchor>toInt</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toLong</name>
      <anchor>toLong</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toShort</name>
      <anchor>toShort</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toUInt</name>
      <anchor>toUInt</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toULong</name>
      <anchor>toULong</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toUShort</name>
      <anchor>toUShort</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>upper</name>
      <anchor>upper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3CString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-3</anchor>
      <arglist>( const char * str )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DataBrowser</name>
    <filename>q3databrowser.html</filename>
    <member kind="enum">
      <name>Boundary</name>
      <anchor>Boundary-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3DataBrowser</name>
      <anchor>Q3DataBrowser</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags fl = 0 )</arglist>
    </member>
    <member kind="function">
      <name>beforeDelete</name>
      <anchor>beforeDelete</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>beforeInsert</name>
      <anchor>beforeInsert</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>beforeUpdate</name>
      <anchor>beforeUpdate</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>boundary</name>
      <anchor>boundary</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearValues</name>
      <anchor>clearValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Confirm</name>
      <anchor>confirmCancel</anchor>
      <arglist> Q3DataBrowser::confirmCancel( QSql::Op m )</arglist>
    </member>
    <member kind="function">
      <name>Confirm</name>
      <anchor>confirmEdit</anchor>
      <arglist> Q3DataBrowser::confirmEdit( QSql::Op m )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( const QSqlRecord * record )</arglist>
    </member>
    <member kind="function">
      <name>currentEdited</name>
      <anchor>currentEdited</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorChanged</name>
      <anchor>cursorChanged</anchor>
      <arglist>( Q3SqlCursor::Mode mode )</arglist>
    </member>
    <member kind="function">
      <name>del</name>
      <anchor>del</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteCurrent</name>
      <anchor>deleteCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>firstRecordAvailable</name>
      <anchor>firstRecordAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>form</name>
      <anchor>form</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handleError</name>
      <anchor>handleError</anchor>
      <arglist>( const QSqlError &amp; error )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertCurrent</name>
      <anchor>insertCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastRecordAvailable</name>
      <anchor>lastRecordAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextRecordAvailable</name>
      <anchor>nextRecordAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>prev</name>
      <anchor>prev</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prevRecordAvailable</name>
      <anchor>prevRecordAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>primeDelete</name>
      <anchor>primeDelete</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>primeInsert</name>
      <anchor>primeInsert</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>primeUpdate</name>
      <anchor>primeUpdate</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>readFields</name>
      <anchor>readFields</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>seek</name>
      <anchor>seek</anchor>
      <arglist>( int i, bool relative = false )</arglist>
    </member>
    <member kind="function">
      <name>setForm</name>
      <anchor>setForm</anchor>
      <arglist>( Q3SqlForm * form )</arglist>
    </member>
    <member kind="function">
      <name>setSqlCursor</name>
      <anchor>setSqlCursor</anchor>
      <arglist>( Q3SqlCursor * cursor, bool autoDelete = false )</arglist>
    </member>
    <member kind="function">
      <name>sqlCursor</name>
      <anchor>sqlCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateBoundary</name>
      <anchor>updateBoundary</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateCurrent</name>
      <anchor>updateCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>writeFields</name>
      <anchor>writeFields</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DataTable</name>
    <filename>q3datatable.html</filename>
    <member kind="enum">
      <name>Refresh</name>
      <anchor>Refresh-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DateFormat</name>
      <anchor>dateFormat</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3DataTable</name>
      <anchor>Q3DataTable</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3DataTable</name>
      <anchor>Q3DataTable-2</anchor>
      <arglist>( Q3SqlCursor * cursor, bool autoPopulate = false, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addColumn</name>
      <anchor>addColumn</anchor>
      <arglist>( const QString &amp; fieldName, const QString &amp; label = QString()</arglist>
    </member>
    <member kind="function">
      <name>adjustColumn</name>
      <anchor>adjustColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>autoDelete</name>
      <anchor>autoDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beforeDelete</name>
      <anchor>beforeDelete</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>beforeInsert</name>
      <anchor>beforeInsert</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>beforeUpdate</name>
      <anchor>beforeUpdate</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>beginInsert</name>
      <anchor>beginInsert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginUpdate</name>
      <anchor>beginUpdate</anchor>
      <arglist>( int row, int col, bool replace )</arglist>
    </member>
    <member kind="function">
      <name>Confirm</name>
      <anchor>confirmCancel</anchor>
      <arglist> Q3DataTable::confirmCancel( QSql::Op m )</arglist>
    </member>
    <member kind="function">
      <name>Confirm</name>
      <anchor>confirmEdit</anchor>
      <arglist> Q3DataTable::confirmEdit( QSql::Op m )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( QSqlRecord * record )</arglist>
    </member>
    <member kind="function">
      <name>currentRecord</name>
      <anchor>currentRecord</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorChanged</name>
      <anchor>cursorChanged</anchor>
      <arglist>( QSql::Op mode )</arglist>
    </member>
    <member kind="function">
      <name>deleteCurrent</name>
      <anchor>deleteCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fieldAlignment</name>
      <anchor>fieldAlignment</anchor>
      <arglist>( const QSqlField * field )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; str, bool caseSensitive, bool backwards )</arglist>
    </member>
    <member kind="function">
      <name>handleError</name>
      <anchor>handleError</anchor>
      <arglist>( const QSqlError &amp; e )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>insertCurrent</name>
      <anchor>insertCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>installEditorFactory</name>
      <anchor>installEditorFactory</anchor>
      <arglist>( Q3SqlEditorFactory * f )</arglist>
    </member>
    <member kind="function">
      <name>installPropertyMap</name>
      <anchor>installPropertyMap</anchor>
      <arglist>( Q3SqlPropertyMap * m )</arglist>
    </member>
    <member kind="function">
      <name>paintField</name>
      <anchor>paintField</anchor>
      <arglist>( QPainter * p, const QSqlField * field, const QRect &amp; cr, bool selected )</arglist>
    </member>
    <member kind="function">
      <name>primeDelete</name>
      <anchor>primeDelete</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>primeInsert</name>
      <anchor>primeInsert</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>primeUpdate</name>
      <anchor>primeUpdate</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>( Refresh mode )</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeColumn</name>
      <anchor>removeColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>repaintCell</name>
      <anchor>repaintCell</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoDelete</name>
      <anchor>setAutoDelete</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setColumn</name>
      <anchor>setColumn</anchor>
      <arglist>( uint col, const QString &amp; fieldName, const QString &amp; label = QString()</arglist>
    </member>
    <member kind="function">
      <name>setColumnWidth</name>
      <anchor>setColumnWidth</anchor>
      <arglist>( int col, int w )</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( Q3SqlCursor * sql )</arglist>
    </member>
    <member kind="function">
      <name>setSqlCursor</name>
      <anchor>setSqlCursor</anchor>
      <arglist>( Q3SqlCursor * cursor = 0, bool autoPopulate = false, bool autoDelete = false )</arglist>
    </member>
    <member kind="function">
      <name>sortAscending</name>
      <anchor>sortAscending</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>sortColumn</name>
      <anchor>sortColumn</anchor>
      <arglist>( int col, bool ascending = true, bool wholeRows = false )</arglist>
    </member>
    <member kind="function">
      <name>sortDescending</name>
      <anchor>sortDescending</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>sqlCursor</name>
      <anchor>sqlCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>updateCurrent</name>
      <anchor>updateCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DataView</name>
    <filename>q3dataview.html</filename>
    <member kind="function">
      <name>Q3DataView</name>
      <anchor>Q3DataView</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags fl = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clearValues</name>
      <anchor>clearValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>form</name>
      <anchor>form</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readFields</name>
      <anchor>readFields</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>setForm</name>
      <anchor>setForm</anchor>
      <arglist>( Q3SqlForm * form )</arglist>
    </member>
    <member kind="function">
      <name>setRecord</name>
      <anchor>setRecord</anchor>
      <arglist>( QSqlRecord * record )</arglist>
    </member>
    <member kind="function">
      <name>writeFields</name>
      <anchor>writeFields</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DateEdit</name>
    <filename>q3dateedit.html</filename>
    <member kind="enum">
      <name>Order</name>
      <anchor>Order-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3DateEdit</name>
      <anchor>Q3DateEdit</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3DateEdit</name>
      <anchor>Q3DateEdit-2</anchor>
      <arglist>( const QDate &amp; date, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>fix</name>
      <anchor>fix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sectionFormattedText</name>
      <anchor>sectionFormattedText</anchor>
      <arglist>( int sec )</arglist>
    </member>
    <member kind="function">
      <name>separator</name>
      <anchor>separator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDay</name>
      <anchor>setDay</anchor>
      <arglist>( int day )</arglist>
    </member>
    <member kind="function">
      <name>setMonth</name>
      <anchor>setMonth</anchor>
      <arglist>( int month )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( const QDate &amp; min, const QDate &amp; max )</arglist>
    </member>
    <member kind="function">
      <name>setSeparator</name>
      <anchor>setSeparator</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setYear</name>
      <anchor>setYear</anchor>
      <arglist>( int year )</arglist>
    </member>
    <member kind="function">
      <name>updateButtons</name>
      <anchor>updateButtons</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( const QDate &amp; date )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DateTimeEdit</name>
    <filename>q3datetimeedit.html</filename>
    <member kind="function">
      <name>Q3DateTimeEdit</name>
      <anchor>Q3DateTimeEdit</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3DateTimeEdit</name>
      <anchor>Q3DateTimeEdit-2</anchor>
      <arglist>( const QDateTime &amp; datetime, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>autoAdvance</name>
      <anchor>autoAdvance</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dateEdit</name>
      <anchor>dateEdit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoAdvance</name>
      <anchor>setAutoAdvance</anchor>
      <arglist>( bool advance )</arglist>
    </member>
    <member kind="function">
      <name>timeEdit</name>
      <anchor>timeEdit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( const QDateTime &amp; datetime )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DateTimeEditBase</name>
    <filename>q3datetimeeditbase.html</filename>
  </compound>
  <compound kind="class">
    <name>Q3DeepCopy</name>
    <filename>q3deepcopy.html</filename>
    <member kind="function">
      <name>Q3DeepCopy</name>
      <anchor>Q3DeepCopy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3DeepCopy</name>
      <anchor>Q3DeepCopy-2</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-T</anchor>
      <arglist> T()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Dict</name>
    <filename>q3dict.html</filename>
    <member kind="function">
      <name>Q3Dict</name>
      <anchor>Q3Dict</anchor>
      <arglist>( int size = 17, bool caseSensitive = true )</arglist>
    </member>
    <member kind="function">
      <name>Q3Dict</name>
      <anchor>Q3Dict-2</anchor>
      <arglist>( const Q3Dict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( const QString &amp; key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( uint newsize )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3Dict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DictIterator</name>
    <filename>q3dictiterator.html</filename>
    <member kind="function">
      <name>Q3DictIterator</name>
      <anchor>Q3DictIterator</anchor>
      <arglist>( const Q3Dict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Dns</name>
    <filename>q3dns.html</filename>
    <member kind="enum">
      <name>RecordType</name>
      <anchor>RecordType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Dns</name>
      <anchor>Q3Dns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3Dns</name>
      <anchor>Q3Dns-2</anchor>
      <arglist>( const QString &amp; label, RecordType rr = A )</arglist>
    </member>
    <member kind="function">
      <name>Q3Dns</name>
      <anchor>Q3Dns-3</anchor>
      <arglist>( const QHostAddress &amp; address, RecordType rr = Ptr )</arglist>
    </member>
    <member kind="function">
      <name>addresses</name>
      <anchor>addresses</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canonicalName</name>
      <anchor>canonicalName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hostNames</name>
      <anchor>hostNames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isWorking</name>
      <anchor>isWorking</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>label</name>
      <anchor>label</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mailServers</name>
      <anchor>mailServers</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>qualifiedNames</name>
      <anchor>qualifiedNames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>recordType</name>
      <anchor>recordType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resultsReady</name>
      <anchor>resultsReady</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>servers</name>
      <anchor>servers</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel</anchor>
      <arglist>( const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel-2</anchor>
      <arglist>( const QHostAddress &amp; address )</arglist>
    </member>
    <member kind="function">
      <name>setRecordType</name>
      <anchor>setRecordType</anchor>
      <arglist>( RecordType rr = A )</arglist>
    </member>
    <member kind="function">
      <name>texts</name>
      <anchor>texts</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DockArea</name>
    <filename>q3dockarea.html</filename>
    <member kind="enum">
      <name>HandlePosition</name>
      <anchor>HandlePosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3DockArea</name>
      <anchor>Q3DockArea</anchor>
      <arglist>( Qt::Orientation o, HandlePosition h = Normal, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>dockWindowList</name>
      <anchor>dockWindowList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasDockWindow</name>
      <anchor>hasDockWindow</anchor>
      <arglist>( Q3DockWindow * w, int * index = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isDockWindowAccepted</name>
      <anchor>isDockWindowAccepted</anchor>
      <arglist>( Q3DockWindow * dw )</arglist>
    </member>
    <member kind="function">
      <name>lineUp</name>
      <anchor>lineUp</anchor>
      <arglist>( bool keepNewLines )</arglist>
    </member>
    <member kind="function">
      <name>moveDockWindow</name>
      <anchor>moveDockWindow</anchor>
      <arglist>( Q3DockWindow * w, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>moveDockWindow</name>
      <anchor>moveDockWindow-2</anchor>
      <arglist>( Q3DockWindow * w, const QPoint &amp; p, const QRect &amp; r, bool swap )</arglist>
    </member>
    <member kind="function">
      <name>removeDockWindow</name>
      <anchor>removeDockWindow</anchor>
      <arglist>( Q3DockWindow * w, bool makeFloating, bool swap, bool fixNewLines = true )</arglist>
    </member>
    <member kind="function">
      <name>setAcceptDockWindow</name>
      <anchor>setAcceptDockWindow</anchor>
      <arglist>( Q3DockWindow * dw, bool accept )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DockWindow</name>
    <filename>q3dockwindow.html</filename>
    <member kind="enum">
      <name>CloseMode</name>
      <anchor>CloseMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Place</name>
      <anchor>Place-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3DockWindow</name>
      <anchor>Q3DockWindow</anchor>
      <arglist>( Place p = InDock, QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3DockWindow</name>
      <anchor>Q3DockWindow-2</anchor>
      <arglist>( QWidget * parent, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>area</name>
      <anchor>area</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boxLayout</name>
      <anchor>boxLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dock</name>
      <anchor>dock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fixedExtent</name>
      <anchor>fixedExtent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCloseEnabled</name>
      <anchor>isCloseEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isHorizontalStretchable</name>
      <anchor>isHorizontalStretchable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVerticalStretchable</name>
      <anchor>isVerticalStretchable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist> Q3DockWindow::orientation()</arglist>
    </member>
    <member kind="function">
      <name>orientationChanged</name>
      <anchor>orientationChanged</anchor>
      <arglist>( Qt::Orientation o )</arglist>
    </member>
    <member kind="function">
      <name>placeChanged</name>
      <anchor>placeChanged</anchor>
      <arglist>( Q3DockWindow::Place p )</arglist>
    </member>
    <member kind="function">
      <name>setFixedExtentHeight</name>
      <anchor>setFixedExtentHeight</anchor>
      <arglist>( int h )</arglist>
    </member>
    <member kind="function">
      <name>setFixedExtentWidth</name>
      <anchor>setFixedExtentWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalStretchable</name>
      <anchor>setHorizontalStretchable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>setOrientation</anchor>
      <arglist>( Qt::Orientation o )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalStretchable</name>
      <anchor>setVerticalStretchable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setWidget</name>
      <anchor>setWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>undock</name>
      <anchor>undock-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibilityChanged</name>
      <anchor>visibilityChanged</anchor>
      <arglist>( bool visible )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>windowTitle</name>
      <anchor>windowTitle</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DragObject</name>
    <filename>q3dragobject.html</filename>
    <member kind="enum">
      <name>DragMode</name>
      <anchor>DragMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3DragObject</name>
      <anchor>Q3DragObject</anchor>
      <arglist>( QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drag</name>
      <anchor>drag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drag</name>
      <anchor>drag-2</anchor>
      <arglist>( DragMode mode )</arglist>
    </member>
    <member kind="function">
      <name>dragCopy</name>
      <anchor>dragCopy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragLink</name>
      <anchor>dragLink</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragMove</name>
      <anchor>dragMove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmapHotSpot</name>
      <anchor>pixmapHotSpot</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( QPixmap pm, const QPoint &amp; hotspot )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap-2</anchor>
      <arglist>( QPixmap pm )</arglist>
    </member>
    <member kind="function">
      <name>source</name>
      <anchor>source</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>target</name>
      <anchor>target</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3DropSite</name>
    <filename>q3dropsite.html</filename>
    <member kind="function">
      <name>Q3DropSite</name>
      <anchor>Q3DropSite</anchor>
      <arglist>( QWidget * self )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3EditorFactory</name>
    <filename>q3editorfactory.html</filename>
    <member kind="function">
      <name>Q3EditorFactory</name>
      <anchor>Q3EditorFactory</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>( QWidget * parent, const QVariant &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>defaultFactory</name>
      <anchor>defaultFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>installDefaultFactory</name>
      <anchor>installDefaultFactory</anchor>
      <arglist>( Q3EditorFactory * factory )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3FileDialog</name>
    <filename>q3filedialog.html</filename>
    <member kind="enum">
      <name>Mode</name>
      <anchor>Mode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PreviewMode</name>
      <anchor>PreviewMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ViewMode</name>
      <anchor>ViewMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3FileDialog</name>
      <anchor>Q3FileDialog</anchor>
      <arglist>( const QString &amp; dirName, const QString &amp; filter = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3FileDialog</name>
      <anchor>Q3FileDialog-2</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, bool modal = false )</arglist>
    </member>
    <member kind="function">
      <name>addFilter</name>
      <anchor>addFilter</anchor>
      <arglist>( const QString &amp; filter )</arglist>
    </member>
    <member kind="function">
      <name>addLeftWidget</name>
      <anchor>addLeftWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>addRightWidget</name>
      <anchor>addRightWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>addToolButton</name>
      <anchor>addToolButton</anchor>
      <arglist>( QAbstractButton * b, bool separator = false )</arglist>
    </member>
    <member kind="function">
      <name>addWidgets</name>
      <anchor>addWidgets</anchor>
      <arglist>( QLabel * l, QWidget * w, QPushButton * b )</arglist>
    </member>
    <member kind="function">
      <name>dir</name>
      <anchor>dir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dirEntered</name>
      <anchor>dirEntered</anchor>
      <arglist>( const QString &amp; directory )</arglist>
    </member>
    <member kind="function">
      <name>fileHighlighted</name>
      <anchor>fileHighlighted</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>fileSelected</name>
      <anchor>fileSelected</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>filesSelected</name>
      <anchor>filesSelected</anchor>
      <arglist>( const QStringList &amp; files )</arglist>
    </member>
    <member kind="function">
      <name>filterSelected</name>
      <anchor>filterSelected</anchor>
      <arglist>( const QString &amp; filter )</arglist>
    </member>
    <member kind="function">
      <name>getExistingDirectory</name>
      <anchor>getExistingDirectory</anchor>
      <arglist>( const QString &amp; dir = QString()</arglist>
    </member>
    <member kind="function">
      <name>getOpenFileName</name>
      <anchor>getOpenFileName</anchor>
      <arglist>( const QString &amp; startWith = QString()</arglist>
    </member>
    <member kind="function">
      <name>getOpenFileNames</name>
      <anchor>getOpenFileNames</anchor>
      <arglist>( const QString &amp; filter = QString()</arglist>
    </member>
    <member kind="function">
      <name>getSaveFileName</name>
      <anchor>getSaveFileName</anchor>
      <arglist>( const QString &amp; startWith = QString()</arglist>
    </member>
    <member kind="function">
      <name>iconProvider</name>
      <anchor>iconProvider</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rereadDir</name>
      <anchor>rereadDir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resortDir</name>
      <anchor>resortDir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setContentsPreview</name>
      <anchor>setContentsPreview</anchor>
      <arglist>( QWidget * w, Q3FilePreview * preview )</arglist>
    </member>
    <member kind="function">
      <name>setDir</name>
      <anchor>setDir</anchor>
      <arglist>( const QDir &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>setDir</name>
      <anchor>setDir-2</anchor>
      <arglist>( const QString &amp; pathstr )</arglist>
    </member>
    <member kind="function">
      <name>setFilter</name>
      <anchor>setFilter</anchor>
      <arglist>( const QString &amp; newFilter )</arglist>
    </member>
    <member kind="function">
      <name>setFilters</name>
      <anchor>setFilters</anchor>
      <arglist>( const QString &amp; filters )</arglist>
    </member>
    <member kind="function">
      <name>setFilters</name>
      <anchor>setFilters-2</anchor>
      <arglist>( const char ** types )</arglist>
    </member>
    <member kind="function">
      <name>setFilters</name>
      <anchor>setFilters-3</anchor>
      <arglist>( const QStringList &amp; types )</arglist>
    </member>
    <member kind="function">
      <name>setIconProvider</name>
      <anchor>setIconProvider</anchor>
      <arglist>( Q3FileIconProvider * provider )</arglist>
    </member>
    <member kind="function">
      <name>setInfoPreview</name>
      <anchor>setInfoPreview</anchor>
      <arglist>( QWidget * w, Q3FilePreview * preview )</arglist>
    </member>
    <member kind="function">
      <name>setSelectedFilter</name>
      <anchor>setSelectedFilter</anchor>
      <arglist>( const QString &amp; mask )</arglist>
    </member>
    <member kind="function">
      <name>setSelectedFilter</name>
      <anchor>setSelectedFilter-2</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>setSelection</name>
      <anchor>setSelection</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>setUrl</name>
      <anchor>setUrl</anchor>
      <arglist>( const Q3UrlOperator &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>url</name>
      <anchor>url</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3FileIconProvider</name>
    <filename>q3fileiconprovider.html</filename>
    <member kind="function">
      <name>Q3FileIconProvider</name>
      <anchor>Q3FileIconProvider</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( const QFileInfo &amp; info )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3FilePreview</name>
    <filename>q3filepreview.html</filename>
    <member kind="function">
      <name>Q3FilePreview</name>
      <anchor>Q3FilePreview</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previewUrl</name>
      <anchor>previewUrl</anchor>
      <arglist>( const Q3Url &amp; url )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Frame</name>
    <filename>q3frame.html</filename>
    <member kind="function">
      <name>Q3Frame</name>
      <anchor>Q3Frame</anchor>
      <arglist>( QWidget * parent, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawContents</name>
      <anchor>drawContents</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>drawFrame</name>
      <anchor>drawFrame</anchor>
      <arglist>( QPainter * p )</arglist>
    </member>
    <member kind="function">
      <name>frameChanged</name>
      <anchor>frameChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameWidth</name>
      <anchor>frameWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>resizeEvent</name>
      <anchor>resizeEvent</anchor>
      <arglist>( QResizeEvent * event )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Ftp</name>
    <filename>q3ftp.html</filename>
    <member kind="enum">
      <name>Command</name>
      <anchor>Command-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Ftp</name>
      <anchor>Q3Ftp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3Ftp</name>
      <anchor>Q3Ftp-2</anchor>
      <arglist>( QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cd</name>
      <anchor>cd</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>clearPendingCommands</name>
      <anchor>clearPendingCommands</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commandFinished</name>
      <anchor>commandFinished</anchor>
      <arglist>( int id, bool error )</arglist>
    </member>
    <member kind="function">
      <name>commandStarted</name>
      <anchor>commandStarted</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>connectToHost</name>
      <anchor>connectToHost</anchor>
      <arglist>( const QString &amp; host, Q_UINT16 port = 21 )</arglist>
    </member>
    <member kind="function">
      <name>currentCommand</name>
      <anchor>currentCommand</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentDevice</name>
      <anchor>currentDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentId</name>
      <anchor>currentId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dataTransferProgress</name>
      <anchor>dataTransferProgress</anchor>
      <arglist>( int done, int total )</arglist>
    </member>
    <member kind="function">
      <name>done</name>
      <anchor>done</anchor>
      <arglist>( bool error )</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>get</name>
      <anchor>get</anchor>
      <arglist>( const QString &amp; file, QIODevice * dev = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasPendingCommands</name>
      <anchor>hasPendingCommands</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>list</name>
      <anchor>list</anchor>
      <arglist>( const QString &amp; dir = QString()</arglist>
    </member>
    <member kind="function">
      <name>listInfo</name>
      <anchor>listInfo</anchor>
      <arglist>( const QUrlInfo &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>login</name>
      <anchor>login</anchor>
      <arglist>( const QString &amp; user = QString()</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>put</name>
      <anchor>put</anchor>
      <arglist>( QIODevice * dev, const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>put</name>
      <anchor>put-2</anchor>
      <arglist>( const QByteArray &amp; data, const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>rawCommand</name>
      <anchor>rawCommand</anchor>
      <arglist>( const QString &amp; command )</arglist>
    </member>
    <member kind="function">
      <name>rawCommandReply</name>
      <anchor>rawCommandReply</anchor>
      <arglist>( int replyCode, const QString &amp; detail )</arglist>
    </member>
    <member kind="function">
      <name>readAll</name>
      <anchor>readAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBlock</name>
      <anchor>readBlock</anchor>
      <arglist>( char * data, Q_ULONG maxlen )</arglist>
    </member>
    <member kind="function">
      <name>readyRead</name>
      <anchor>readyRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>( const QString &amp; oldname, const QString &amp; newname )</arglist>
    </member>
    <member kind="function">
      <name>rmdir</name>
      <anchor>rmdir</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( int state )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Grid</name>
    <filename>q3grid.html</filename>
    <member kind="function">
      <name>Q3Grid</name>
      <anchor>Q3Grid</anchor>
      <arglist>( int n, QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Grid</name>
      <anchor>Q3Grid-2</anchor>
      <arglist>( int n, Qt::Orientation orient, QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setSpacing</name>
      <anchor>setSpacing</anchor>
      <arglist>( int space )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3GridView</name>
    <filename>q3gridview.html</filename>
    <member kind="function">
      <name>Q3GridView</name>
      <anchor>Q3GridView</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>cellGeometry</name>
      <anchor>cellGeometry</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>cellRect</name>
      <anchor>cellRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnAt</name>
      <anchor>columnAt</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>dimensionChange</name>
      <anchor>dimensionChange</anchor>
      <arglist>( int oldNumRows, int oldNumCols )</arglist>
    </member>
    <member kind="function">
      <name>ensureCellVisible</name>
      <anchor>ensureCellVisible</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>gridSize</name>
      <anchor>gridSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintCell</name>
      <anchor>paintCell</anchor>
      <arglist>( QPainter * p, int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>paintEmptyArea</name>
      <anchor>paintEmptyArea</anchor>
      <arglist>( QPainter * p, int cx, int cy, int cw, int ch )</arglist>
    </member>
    <member kind="function">
      <name>repaintCell</name>
      <anchor>repaintCell</anchor>
      <arglist>( int row, int column, bool erase = true )</arglist>
    </member>
    <member kind="function">
      <name>rowAt</name>
      <anchor>rowAt</anchor>
      <arglist>( int y )</arglist>
    </member>
    <member kind="function">
      <name>updateCell</name>
      <anchor>updateCell</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3GroupBox</name>
    <filename>q3groupbox.html</filename>
    <member kind="enum">
      <name>DummyFrame</name>
      <anchor>DummyFrame-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3GroupBox</name>
      <anchor>Q3GroupBox</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3GroupBox</name>
      <anchor>Q3GroupBox-2</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3GroupBox</name>
      <anchor>Q3GroupBox-3</anchor>
      <arglist>( int strips, Qt::Orientation orientation, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3GroupBox</name>
      <anchor>Q3GroupBox-4</anchor>
      <arglist>( int strips, Qt::Orientation orientation, const QString &amp; title, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addSpace</name>
      <anchor>addSpace</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>insideMargin</name>
      <anchor>insideMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insideSpacing</name>
      <anchor>insideSpacing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColumnLayout</name>
      <anchor>setColumnLayout</anchor>
      <arglist>( int strips, Qt::Orientation direction )</arglist>
    </member>
    <member kind="function">
      <name>setFrameShadow</name>
      <anchor>setFrameShadow</anchor>
      <arglist>( DummyFrame )</arglist>
    </member>
    <member kind="function">
      <name>setFrameShape</name>
      <anchor>setFrameShape</anchor>
      <arglist>( DummyFrame )</arglist>
    </member>
    <member kind="function">
      <name>setInsideMargin</name>
      <anchor>setInsideMargin</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>setInsideSpacing</name>
      <anchor>setInsideSpacing</anchor>
      <arglist>( int s )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3HBox</name>
    <filename>q3hbox.html</filename>
    <member kind="function">
      <name>Q3HBox</name>
      <anchor>Q3HBox</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3HBox</name>
      <anchor>Q3HBox-2</anchor>
      <arglist>( bool horizontal, QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setSpacing</name>
      <anchor>setSpacing</anchor>
      <arglist>( int space )</arglist>
    </member>
    <member kind="function">
      <name>setStretchFactor</name>
      <anchor>setStretchFactor</anchor>
      <arglist>( QWidget * w, int stretch )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3HButtonGroup</name>
    <filename>q3hbuttongroup.html</filename>
    <member kind="function">
      <name>Q3HButtonGroup</name>
      <anchor>Q3HButtonGroup</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3HButtonGroup</name>
      <anchor>Q3HButtonGroup-2</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Header</name>
    <filename>q3header.html</filename>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Header</name>
      <anchor>Q3Header</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Header</name>
      <anchor>Q3Header-2</anchor>
      <arglist>( int n, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addLabel</name>
      <anchor>addLabel</anchor>
      <arglist>( const QString &amp; s, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>addLabel</name>
      <anchor>addLabel-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; s, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>adjustHeaderSize</name>
      <anchor>adjustHeaderSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cellAt</name>
      <anchor>cellAt</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>cellPos</name>
      <anchor>cellPos</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>cellSize</name>
      <anchor>cellSize</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>headerWidth</name>
      <anchor>headerWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>indexChange</name>
      <anchor>indexChange</anchor>
      <arglist>( int section, int fromIndex, int toIndex )</arglist>
    </member>
    <member kind="function">
      <name>isClickEnabled</name>
      <anchor>isClickEnabled</anchor>
      <arglist>( int section = -1 )</arglist>
    </member>
    <member kind="function">
      <name>isResizeEnabled</name>
      <anchor>isResizeEnabled</anchor>
      <arglist>( int section = -1 )</arglist>
    </member>
    <member kind="function">
      <name>label</name>
      <anchor>label</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>mapToActual</name>
      <anchor>mapToActual</anchor>
      <arglist>( int l )</arglist>
    </member>
    <member kind="function">
      <name>mapToIndex</name>
      <anchor>mapToIndex</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>mapToLogical</name>
      <anchor>mapToLogical</anchor>
      <arglist>( int a )</arglist>
    </member>
    <member kind="function">
      <name>mapToSection</name>
      <anchor>mapToSection</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>moveCell</name>
      <anchor>moveCell</anchor>
      <arglist>( int fromIdx, int toIdx )</arglist>
    </member>
    <member kind="function">
      <name>moveSection</name>
      <anchor>moveSection</anchor>
      <arglist>( int section, int toIndex )</arglist>
    </member>
    <member kind="function">
      <name>moved</name>
      <anchor>moved</anchor>
      <arglist>( int fromIndex, int toIndex )</arglist>
    </member>
    <member kind="function">
      <name>paintSection</name>
      <anchor>paintSection</anchor>
      <arglist>( QPainter * p, int index, const QRect &amp; fr )</arglist>
    </member>
    <member kind="function">
      <name>paintSectionLabel</name>
      <anchor>paintSectionLabel</anchor>
      <arglist>( QPainter * p, int index, const QRect &amp; fr )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>released</name>
      <anchor>released</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>removeLabel</name>
      <anchor>removeLabel</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>resizeSection</name>
      <anchor>resizeSection</anchor>
      <arglist>( int section, int s )</arglist>
    </member>
    <member kind="function">
      <name>sRect</name>
      <anchor>sRect</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>sectionAt</name>
      <anchor>sectionAt</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>sectionClicked</name>
      <anchor>sectionClicked</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>sectionHandleDoubleClicked</name>
      <anchor>sectionHandleDoubleClicked</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>sectionPos</name>
      <anchor>sectionPos</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>sectionRect</name>
      <anchor>sectionRect</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>sectionSize</name>
      <anchor>sectionSize</anchor>
      <arglist>( int section )</arglist>
    </member>
    <member kind="function">
      <name>setCellSize</name>
      <anchor>setCellSize</anchor>
      <arglist>( int section, int s )</arglist>
    </member>
    <member kind="function">
      <name>setClickEnabled</name>
      <anchor>setClickEnabled</anchor>
      <arglist>( bool enable, int section = -1 )</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel</anchor>
      <arglist>( int section, const QString &amp; s, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel-2</anchor>
      <arglist>( int section, const QIcon &amp; icon, const QString &amp; s, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>setResizeEnabled</name>
      <anchor>setResizeEnabled</anchor>
      <arglist>( bool enable, int section = -1 )</arglist>
    </member>
    <member kind="function">
      <name>setSortIndicator</name>
      <anchor>setSortIndicator</anchor>
      <arglist>( int section, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>setSortIndicator</name>
      <anchor>setSortIndicator-2</anchor>
      <arglist>( int section, bool ascending = true )</arglist>
    </member>
    <member kind="function">
      <name>sizeChange</name>
      <anchor>sizeChange</anchor>
      <arglist>( int section, int oldSize, int newSize )</arglist>
    </member>
    <member kind="function">
      <name>SortOrder</name>
      <anchor>sortIndicatorOrder</anchor>
      <arglist> Q3Header::sortIndicatorOrder()</arglist>
    </member>
    <member kind="function">
      <name>sortIndicatorSection</name>
      <anchor>sortIndicatorSection</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Http</name>
    <filename>q3http.html</filename>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Http</name>
      <anchor>Q3Http</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3Http</name>
      <anchor>Q3Http-2</anchor>
      <arglist>( QObject * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Http</name>
      <anchor>Q3Http-3</anchor>
      <arglist>( const QString &amp; hostname, Q_UINT16 port = 80, QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearPendingRequests</name>
      <anchor>clearPendingRequests</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeConnection</name>
      <anchor>closeConnection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentDestinationDevice</name>
      <anchor>currentDestinationDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentId</name>
      <anchor>currentId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentRequest</name>
      <anchor>currentRequest</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentSourceDevice</name>
      <anchor>currentSourceDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dataReadProgress</name>
      <anchor>dataReadProgress</anchor>
      <arglist>( int done, int total )</arglist>
    </member>
    <member kind="function">
      <name>dataSendProgress</name>
      <anchor>dataSendProgress</anchor>
      <arglist>( int done, int total )</arglist>
    </member>
    <member kind="function">
      <name>done</name>
      <anchor>done</anchor>
      <arglist>( bool error )</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>get</name>
      <anchor>get</anchor>
      <arglist>( const QString &amp; path, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasPendingRequests</name>
      <anchor>hasPendingRequests</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>head</name>
      <anchor>head</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>post</name>
      <anchor>post</anchor>
      <arglist>( const QString &amp; path, QIODevice * data, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>post</name>
      <anchor>post-2</anchor>
      <arglist>( const QString &amp; path, const QByteArray &amp; data, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>readAll</name>
      <anchor>readAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBlock</name>
      <anchor>readBlock</anchor>
      <arglist>( char * data, Q_ULONG maxlen )</arglist>
    </member>
    <member kind="function">
      <name>readyRead</name>
      <anchor>readyRead</anchor>
      <arglist>( const Q3HttpResponseHeader &amp; resp )</arglist>
    </member>
    <member kind="function">
      <name>request</name>
      <anchor>request</anchor>
      <arglist>( const Q3HttpRequestHeader &amp; header, QIODevice * data = 0, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>request</name>
      <anchor>request-2</anchor>
      <arglist>( const Q3HttpRequestHeader &amp; header, const QByteArray &amp; data, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>requestFinished</name>
      <anchor>requestFinished</anchor>
      <arglist>( int id, bool error )</arglist>
    </member>
    <member kind="function">
      <name>requestStarted</name>
      <anchor>requestStarted</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>responseHeaderReceived</name>
      <anchor>responseHeaderReceived</anchor>
      <arglist>( const Q3HttpResponseHeader &amp; resp )</arglist>
    </member>
    <member kind="function">
      <name>setHost</name>
      <anchor>setHost</anchor>
      <arglist>( const QString &amp; hostname, Q_UINT16 port = 80 )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( int state )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3HttpHeader</name>
    <filename>q3httpheader.html</filename>
    <member kind="function">
      <name>Q3HttpHeader</name>
      <anchor>Q3HttpHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3HttpHeader</name>
      <anchor>Q3HttpHeader-2</anchor>
      <arglist>( const Q3HttpHeader &amp; header )</arglist>
    </member>
    <member kind="function">
      <name>Q3HttpHeader</name>
      <anchor>Q3HttpHeader-3</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>contentLength</name>
      <anchor>contentLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contentType</name>
      <anchor>contentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasContentLength</name>
      <anchor>hasContentLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasContentType</name>
      <anchor>hasContentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasKey</name>
      <anchor>hasKey</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>majorVersion</name>
      <anchor>majorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minorVersion</name>
      <anchor>minorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeValue</name>
      <anchor>removeValue</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setContentLength</name>
      <anchor>setContentLength</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>setContentType</name>
      <anchor>setContentType</anchor>
      <arglist>( const QString &amp; type )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QString &amp; key, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3HttpHeader &amp; h )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3HttpRequestHeader</name>
    <filename>q3httprequestheader.html</filename>
    <member kind="function">
      <name>Q3HttpRequestHeader</name>
      <anchor>Q3HttpRequestHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3HttpRequestHeader</name>
      <anchor>Q3HttpRequestHeader-2</anchor>
      <arglist>( const QString &amp; method, const QString &amp; path, int majorVer = 1, int minorVer = 1 )</arglist>
    </member>
    <member kind="function">
      <name>Q3HttpRequestHeader</name>
      <anchor>Q3HttpRequestHeader-3</anchor>
      <arglist>( const Q3HttpRequestHeader &amp; header )</arglist>
    </member>
    <member kind="function">
      <name>Q3HttpRequestHeader</name>
      <anchor>Q3HttpRequestHeader-4</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>majorVersion</name>
      <anchor>majorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>method</name>
      <anchor>method</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minorVersion</name>
      <anchor>minorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>path</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRequest</name>
      <anchor>setRequest</anchor>
      <arglist>( const QString &amp; method, const QString &amp; path, int majorVer = 1, int minorVer = 1 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3HttpResponseHeader</name>
    <filename>q3httpresponseheader.html</filename>
    <member kind="function">
      <name>Q3HttpResponseHeader</name>
      <anchor>Q3HttpResponseHeader-3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3HttpResponseHeader</name>
      <anchor>Q3HttpResponseHeader-4</anchor>
      <arglist>( const Q3HttpResponseHeader &amp; header )</arglist>
    </member>
    <member kind="function">
      <name>majorVersion</name>
      <anchor>majorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minorVersion</name>
      <anchor>minorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reasonPhrase</name>
      <anchor>reasonPhrase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statusCode</name>
      <anchor>statusCode</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IconDrag</name>
    <filename>q3icondrag.html</filename>
    <member kind="function">
      <name>Q3IconDrag</name>
      <anchor>Q3IconDrag</anchor>
      <arglist>( QWidget * dragSource, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const Q3IconDragItem &amp; i, const QRect &amp; pr, const QRect &amp; tr )</arglist>
    </member>
    <member kind="function">
      <name>canDecode</name>
      <anchor>canDecode</anchor>
      <arglist>( QMimeSource * e )</arglist>
    </member>
    <member kind="function">
      <name>encodedData</name>
      <anchor>encodedData</anchor>
      <arglist>( const char * mime )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IconDragItem</name>
    <filename>q3icondragitem.html</filename>
    <member kind="function">
      <name>Q3IconDragItem</name>
      <anchor>Q3IconDragItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QByteArray &amp; d )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IconView</name>
    <filename>q3iconview.html</filename>
    <member kind="enum">
      <name>Arrangement</name>
      <anchor>Arrangement-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ComparisonFlags</name>
      <anchor>ComparisonFlags-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ItemTextPos</name>
      <anchor>ItemTextPos-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ResizeMode</name>
      <anchor>ResizeMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionMode</name>
      <anchor>SelectionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StringComparisonMode</name>
      <anchor>StringComparisonMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3IconView</name>
      <anchor>Q3IconView</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>adjustItems</name>
      <anchor>adjustItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>arrangeItemsInGrid</name>
      <anchor>arrangeItemsInGrid</anchor>
      <arglist>( const QSize &amp; grid, bool update = true )</arglist>
    </member>
    <member kind="function">
      <name>arrangeItemsInGrid</name>
      <anchor>arrangeItemsInGrid-2</anchor>
      <arglist>( bool update = true )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked-2</anchor>
      <arglist>( Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>contextMenuRequested</name>
      <anchor>contextMenuRequested</anchor>
      <arglist>( Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doAutoScroll</name>
      <anchor>doAutoScroll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>dragObject</name>
      <anchor>dragObject</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawBackground</name>
      <anchor>drawBackground</anchor>
      <arglist>( QPainter * p, const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>drawRubber</name>
      <anchor>drawRubber</anchor>
      <arglist>( QPainter * p )</arglist>
    </member>
    <member kind="function">
      <name>dropped</name>
      <anchor>dropped</anchor>
      <arglist>( QDropEvent * e, const Q3ValueList&lt;Q3IconDragItem&gt; &amp; lst )</arglist>
    </member>
    <member kind="function">
      <name>emitSelectionChanged</name>
      <anchor>emitSelectionChanged</anchor>
      <arglist>( Q3IconViewItem * i = 0 )</arglist>
    </member>
    <member kind="function">
      <name>ensureItemVisible</name>
      <anchor>ensureItemVisible</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>findFirstVisibleItem</name>
      <anchor>findFirstVisibleItem</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem-3</anchor>
      <arglist>( const QString &amp; text, ComparisonFlags compare = BeginsWith | Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>findLastVisibleItem</name>
      <anchor>findLastVisibleItem</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>firstItem</name>
      <anchor>firstItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( const Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertInGrid</name>
      <anchor>insertInGrid</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( Q3IconViewItem * item, Q3IconViewItem * after = 0L )</arglist>
    </member>
    <member kind="function">
      <name>invertSelection</name>
      <anchor>invertSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRenaming</name>
      <anchor>isRenaming</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemRenamed</name>
      <anchor>itemRenamed</anchor>
      <arglist>( Q3IconViewItem * item, const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>itemRenamed</name>
      <anchor>itemRenamed-2</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>lastItem</name>
      <anchor>lastItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeRowLayout</name>
      <anchor>makeRowLayout</anchor>
      <arglist>( Q3IconViewItem * begin, int &amp; y, bool &amp; changed )</arglist>
    </member>
    <member kind="function">
      <name>mouseButtonClicked</name>
      <anchor>mouseButtonClicked</anchor>
      <arglist>( int button, Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mouseButtonPressed</name>
      <anchor>mouseButtonPressed</anchor>
      <arglist>( int button, Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>moved</name>
      <anchor>moved</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>onItem</name>
      <anchor>onItem</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>onViewport</name>
      <anchor>onViewport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed-2</anchor>
      <arglist>( Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>repaintItem</name>
      <anchor>repaintItem</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>repaintSelectedItems</name>
      <anchor>repaintSelectedItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>returnPressed</name>
      <anchor>returnPressed</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>rightButtonClicked</name>
      <anchor>rightButtonClicked</anchor>
      <arglist>( Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>rightButtonPressed</name>
      <anchor>rightButtonPressed</anchor>
      <arglist>( Q3IconViewItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>( bool select )</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged-2</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( Q3IconViewItem * item, bool s, bool cb = false )</arglist>
    </member>
    <member kind="function">
      <name>setSorting</name>
      <anchor>setSorting</anchor>
      <arglist>( bool sort, bool ascending = true )</arglist>
    </member>
    <member kind="function">
      <name>slotUpdate</name>
      <anchor>slotUpdate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>( bool ascending = true )</arglist>
    </member>
    <member kind="function">
      <name>startDrag</name>
      <anchor>startDrag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( Q3IconViewItem * item )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IconViewItem</name>
    <filename>q3iconviewitem.html</filename>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem</anchor>
      <arglist>( Q3IconView * parent )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-2</anchor>
      <arglist>( Q3IconView * parent, Q3IconViewItem * after )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-3</anchor>
      <arglist>( Q3IconView * parent, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-4</anchor>
      <arglist>( Q3IconView * parent, Q3IconViewItem * after, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-5</anchor>
      <arglist>( Q3IconView * parent, const QString &amp; text, const QPixmap &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-6</anchor>
      <arglist>( Q3IconView * parent, Q3IconViewItem * after, const QString &amp; text, const QPixmap &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-7</anchor>
      <arglist>( Q3IconView * parent, const QString &amp; text, const QPicture &amp; picture )</arglist>
    </member>
    <member kind="function">
      <name>Q3IconViewItem</name>
      <anchor>Q3IconViewItem-8</anchor>
      <arglist>( Q3IconView * parent, Q3IconViewItem * after, const QString &amp; text, const QPicture &amp; picture )</arglist>
    </member>
    <member kind="function">
      <name>acceptDrop</name>
      <anchor>acceptDrop</anchor>
      <arglist>( const QMimeSource * mime )</arglist>
    </member>
    <member kind="function">
      <name>calcRect</name>
      <anchor>calcRect</anchor>
      <arglist>( const QString &amp; text_ = QString()</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>compare</anchor>
      <arglist>( Q3IconViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QPoint &amp; pnt )</arglist>
    </member>
    <member kind="function">
      <name>dragEnabled</name>
      <anchor>dragEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragEntered</name>
      <anchor>dragEntered</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragLeft</name>
      <anchor>dragLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dropEnabled</name>
      <anchor>dropEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dropped</name>
      <anchor>dropped</anchor>
      <arglist>( QDropEvent * e, const Q3ValueList&lt;Q3IconDragItem&gt; &amp; lst )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconView</name>
      <anchor>iconView</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>intersects</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>isSelectable</name>
      <anchor>isSelectable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move-2</anchor>
      <arglist>( const QPoint &amp; pnt )</arglist>
    </member>
    <member kind="function">
      <name>moveBy</name>
      <anchor>moveBy</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>moveBy</name>
      <anchor>moveBy-2</anchor>
      <arglist>( const QPoint &amp; pnt )</arglist>
    </member>
    <member kind="function">
      <name>nextItem</name>
      <anchor>nextItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintFocus</name>
      <anchor>paintFocus</anchor>
      <arglist>( QPainter * p, const QPalette &amp; cg )</arglist>
    </member>
    <member kind="function">
      <name>paintItem</name>
      <anchor>paintItem</anchor>
      <arglist>( QPainter * p, const QPalette &amp; cg )</arglist>
    </member>
    <member kind="function">
      <name>picture</name>
      <anchor>picture</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmapRect</name>
      <anchor>pixmapRect</anchor>
      <arglist>( bool relative = true )</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prevItem</name>
      <anchor>prevItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeRenameBox</name>
      <anchor>removeRenameBox</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>renameEnabled</name>
      <anchor>renameEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDragEnabled</name>
      <anchor>setDragEnabled</anchor>
      <arglist>( bool allow )</arglist>
    </member>
    <member kind="function">
      <name>setDropEnabled</name>
      <anchor>setDropEnabled</anchor>
      <arglist>( bool allow )</arglist>
    </member>
    <member kind="function">
      <name>setItemRect</name>
      <anchor>setItemRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setKey</name>
      <anchor>setKey</anchor>
      <arglist>( const QString &amp; k )</arglist>
    </member>
    <member kind="function">
      <name>setPicture</name>
      <anchor>setPicture</anchor>
      <arglist>( const QPicture &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap-2</anchor>
      <arglist>( const QPixmap &amp; icon, bool recalc, bool redraw = true )</arglist>
    </member>
    <member kind="function">
      <name>setPixmapRect</name>
      <anchor>setPixmapRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setRenameEnabled</name>
      <anchor>setRenameEnabled</anchor>
      <arglist>( bool allow )</arglist>
    </member>
    <member kind="function">
      <name>setSelectable</name>
      <anchor>setSelectable</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( bool s, bool cb )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected-2</anchor>
      <arglist>( bool s )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText-2</anchor>
      <arglist>( const QString &amp; text, bool recalc, bool redraw = true )</arglist>
    </member>
    <member kind="function">
      <name>setTextRect</name>
      <anchor>setTextRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textRect</name>
      <anchor>textRect</anchor>
      <arglist>( bool relative = true )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ImageDrag</name>
    <filename>q3imagedrag.html</filename>
    <member kind="function">
      <name>Q3ImageDrag</name>
      <anchor>Q3ImageDrag</anchor>
      <arglist>( QImage image, QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ImageDrag</name>
      <anchor>Q3ImageDrag-2</anchor>
      <arglist>( QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>canDecode</name>
      <anchor>canDecode</anchor>
      <arglist>( const QMimeSource * source )</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode</anchor>
      <arglist>( const QMimeSource * source, QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode-2</anchor>
      <arglist>( const QMimeSource * source, QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>setImage</name>
      <anchor>setImage</anchor>
      <arglist>( QImage image )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IntCache</name>
    <filename>q3intcache.html</filename>
    <member kind="function">
      <name>Q3IntCache</name>
      <anchor>Q3IntCache-2</anchor>
      <arglist>( int maxCost = 100, int size = 17 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( long k, bool ref = true )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( long k, const type * d, int c = 1, int p = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxCost</name>
      <anchor>maxCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( long k )</arglist>
    </member>
    <member kind="function">
      <name>setMaxCost</name>
      <anchor>setMaxCost</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( long k )</arglist>
    </member>
    <member kind="function">
      <name>totalCost</name>
      <anchor>totalCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( long k )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IntCacheIterator</name>
    <filename>q3intcacheiterator.html</filename>
    <member kind="function">
      <name>Q3IntCacheIterator</name>
      <anchor>Q3IntCacheIterator</anchor>
      <arglist>( const Q3IntCache&lt;type&gt; &amp; cache )</arglist>
    </member>
    <member kind="function">
      <name>Q3IntCacheIterator</name>
      <anchor>Q3IntCacheIterator-2</anchor>
      <arglist>( const Q3IntCacheIterator&lt;type&gt; &amp; ci )</arglist>
    </member>
    <member kind="function">
      <name>atFirst</name>
      <anchor>atFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atLast</name>
      <anchor>atLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLast</name>
      <anchor>toLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3IntCacheIterator&lt;type&gt; &amp; ci )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IntDict</name>
    <filename>q3intdict.html</filename>
    <member kind="function">
      <name>Q3IntDict</name>
      <anchor>Q3IntDict</anchor>
      <arglist>( int size = 17 )</arglist>
    </member>
    <member kind="function">
      <name>Q3IntDict</name>
      <anchor>Q3IntDict-2</anchor>
      <arglist>( const Q3IntDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( long key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( long key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( long key )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( long key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( uint newsize )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( long key )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3IntDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( long key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3IntDictIterator</name>
    <filename>q3intdictiterator.html</filename>
    <member kind="function">
      <name>Q3IntDictIterator</name>
      <anchor>Q3IntDictIterator</anchor>
      <arglist>( const Q3IntDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListBox</name>
    <filename>q3listbox.html</filename>
    <member kind="function">
      <name>ComparisonFlags</name>
      <anchor>ComparisonFlags-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>LayoutMode</name>
      <anchor>LayoutMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionMode</name>
      <anchor>SelectionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StringComparisonMode</name>
      <anchor>StringComparisonMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3ListBox</name>
      <anchor>Q3ListBox</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>autoBottomScrollBar</name>
      <anchor>autoBottomScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>autoScroll</name>
      <anchor>autoScroll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>autoScrollBar</name>
      <anchor>autoScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>autoUpdate</name>
      <anchor>autoUpdate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomScrollBar</name>
      <anchor>bottomScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cellHeight</name>
      <anchor>cellHeight</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>cellHeight</name>
      <anchor>cellHeight-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cellWidth</name>
      <anchor>cellWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cellWidth</name>
      <anchor>cellWidth-2</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>centerCurrentItem</name>
      <anchor>centerCurrentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem</anchor>
      <arglist>( const Q3ListBoxItem * lbi, int index )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-2</anchor>
      <arglist>( const QString &amp; text, int index )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-3</anchor>
      <arglist>( const QPixmap &amp; pixmap, int index )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-4</anchor>
      <arglist>( const QPixmap &amp; pixmap, const QString &amp; text, int index )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked-2</anchor>
      <arglist>( Q3ListBoxItem * item, const QPoint &amp; pnt )</arglist>
    </member>
    <member kind="function">
      <name>contextMenuRequested</name>
      <anchor>contextMenuRequested</anchor>
      <arglist>( Q3ListBoxItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>doLayout</name>
      <anchor>doLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>dragSelect</name>
      <anchor>dragSelect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ensureCurrentVisible</name>
      <anchor>ensureCurrentVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem</anchor>
      <arglist>( const QString &amp; text, ComparisonFlags compare = BeginsWith )</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem-2</anchor>
      <arglist>( int yPos )</arglist>
    </member>
    <member kind="function">
      <name>firstItem</name>
      <anchor>firstItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted-2</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted-3</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>inSort</name>
      <anchor>inSort</anchor>
      <arglist>( const Q3ListBoxItem * lbi )</arglist>
    </member>
    <member kind="function">
      <name>inSort</name>
      <anchor>inSort-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( const Q3ListBoxItem * lbi )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( const Q3ListBoxItem * lbi, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-2</anchor>
      <arglist>( const Q3ListBoxItem * lbi, const Q3ListBoxItem * after )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-3</anchor>
      <arglist>( const QString &amp; text, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-4</anchor>
      <arglist>( const QPixmap &amp; pixmap, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-5</anchor>
      <arglist>( const QPixmap &amp; pixmap, const QString &amp; text, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertStrList</name>
      <anchor>insertStrList</anchor>
      <arglist>( const char ** strings, int numStrings = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertStringList</name>
      <anchor>insertStringList</anchor>
      <arglist>( const QStringList &amp; list, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>invertSelection</name>
      <anchor>invertSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRubberSelecting</name>
      <anchor>isRubberSelecting</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected-2</anchor>
      <arglist>( const Q3ListBoxItem * i )</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>itemHeight</name>
      <anchor>itemHeight</anchor>
      <arglist>( int index = 0 )</arglist>
    </member>
    <member kind="function">
      <name>itemRect</name>
      <anchor>itemRect</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemVisible</name>
      <anchor>itemVisible</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemVisible</name>
      <anchor>itemVisible-2</anchor>
      <arglist>( const Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>maxItemWidth</name>
      <anchor>maxItemWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseButtonClicked</name>
      <anchor>mouseButtonClicked</anchor>
      <arglist>( int button, Q3ListBoxItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mouseButtonPressed</name>
      <anchor>mouseButtonPressed</anchor>
      <arglist>( int button, Q3ListBoxItem * item, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>numCols</name>
      <anchor>numCols</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>onItem</name>
      <anchor>onItem</anchor>
      <arglist>( Q3ListBoxItem * i )</arglist>
    </member>
    <member kind="function">
      <name>onViewport</name>
      <anchor>onViewport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintCell</name>
      <anchor>paintCell</anchor>
      <arglist>( QPainter * p, int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed-2</anchor>
      <arglist>( Q3ListBoxItem * item, const QPoint &amp; pnt )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>returnPressed</name>
      <anchor>returnPressed</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>rightButtonClicked</name>
      <anchor>rightButtonClicked</anchor>
      <arglist>( Q3ListBoxItem * item, const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>rightButtonPressed</name>
      <anchor>rightButtonPressed</anchor>
      <arglist>( Q3ListBoxItem * item, const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>scrollBar</name>
      <anchor>scrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>( bool select )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected-2</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected-3</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>selectedItem</name>
      <anchor>selectedItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged-2</anchor>
      <arglist>( Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setAutoBottomScrollBar</name>
      <anchor>setAutoBottomScrollBar</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setAutoScroll</name>
      <anchor>setAutoScroll</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setAutoScrollBar</name>
      <anchor>setAutoScrollBar</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setAutoUpdate</name>
      <anchor>setAutoUpdate</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setBottomItem</name>
      <anchor>setBottomItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setBottomScrollBar</name>
      <anchor>setBottomScrollBar</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setDragSelect</name>
      <anchor>setDragSelect</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setFixedVisibleLines</name>
      <anchor>setFixedVisibleLines</anchor>
      <arglist>( int lines )</arglist>
    </member>
    <member kind="function">
      <name>setScrollBar</name>
      <anchor>setScrollBar</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( Q3ListBoxItem * item, bool select )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected-2</anchor>
      <arglist>( int index, bool select )</arglist>
    </member>
    <member kind="function">
      <name>setSmoothScrolling</name>
      <anchor>setSmoothScrolling</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>smoothScrolling</name>
      <anchor>smoothScrolling</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>( bool ascending = true )</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( const Q3ListBoxItem * item )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>toggleCurrentItem</name>
      <anchor>toggleCurrentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>totalHeight</name>
      <anchor>totalHeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>totalWidth</name>
      <anchor>totalWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>triggerUpdate</name>
      <anchor>triggerUpdate</anchor>
      <arglist>( bool doLayout )</arglist>
    </member>
    <member kind="function">
      <name>updateCellWidth</name>
      <anchor>updateCellWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateItem</name>
      <anchor>updateItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>updateItem</name>
      <anchor>updateItem-2</anchor>
      <arglist>( Q3ListBoxItem * i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListBoxItem</name>
    <filename>q3listboxitem.html</filename>
    <member kind="function">
      <name>Q3ListBoxItem</name>
      <anchor>Q3ListBoxItem</anchor>
      <arglist>( Q3ListBox * listbox = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxItem</name>
      <anchor>Q3ListBoxItem-2</anchor>
      <arglist>( Q3ListBox * listbox, Q3ListBoxItem * after )</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>( const Q3ListBox * lb )</arglist>
    </member>
    <member kind="function">
      <name>isCurrent</name>
      <anchor>isCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelectable</name>
      <anchor>isSelectable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listBox</name>
      <anchor>listBox</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * p )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prev</name>
      <anchor>prev</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCustomHighlighting</name>
      <anchor>setCustomHighlighting</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setSelectable</name>
      <anchor>setSelectable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( const Q3ListBox * lb )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListBoxPixmap</name>
    <filename>q3listboxpixmap.html</filename>
    <member kind="function">
      <name>Q3ListBoxPixmap</name>
      <anchor>Q3ListBoxPixmap</anchor>
      <arglist>( Q3ListBox * listbox, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxPixmap</name>
      <anchor>Q3ListBoxPixmap-2</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxPixmap</name>
      <anchor>Q3ListBoxPixmap-3</anchor>
      <arglist>( Q3ListBox * listbox, const QPixmap &amp; pixmap, Q3ListBoxItem * after )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxPixmap</name>
      <anchor>Q3ListBoxPixmap-4</anchor>
      <arglist>( Q3ListBox * listbox, const QPixmap &amp; pix, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxPixmap</name>
      <anchor>Q3ListBoxPixmap-5</anchor>
      <arglist>( const QPixmap &amp; pix, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxPixmap</name>
      <anchor>Q3ListBoxPixmap-6</anchor>
      <arglist>( Q3ListBox * listbox, const QPixmap &amp; pix, const QString &amp; text, Q3ListBoxItem * after )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>( const Q3ListBox * lb )</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( const Q3ListBox * lb )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListBoxText</name>
    <filename>q3listboxtext.html</filename>
    <member kind="function">
      <name>Q3ListBoxText</name>
      <anchor>Q3ListBoxText</anchor>
      <arglist>( Q3ListBox * listbox, const QString &amp; text = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxText</name>
      <anchor>Q3ListBoxText-2</anchor>
      <arglist>( const QString &amp; text = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3ListBoxText</name>
      <anchor>Q3ListBoxText-3</anchor>
      <arglist>( Q3ListBox * listbox, const QString &amp; text, Q3ListBoxItem * after )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>( const Q3ListBox * lb )</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( const Q3ListBox * lb )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListView</name>
    <filename>q3listview.html</filename>
    <member kind="function">
      <name>ComparisonFlags</name>
      <anchor>ComparisonFlags-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>RenameAction</name>
      <anchor>RenameAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ResizeMode</name>
      <anchor>ResizeMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionMode</name>
      <anchor>SelectionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StringComparisonMode</name>
      <anchor>StringComparisonMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WidthMode</name>
      <anchor>WidthMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3ListView</name>
      <anchor>Q3ListView</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addColumn</name>
      <anchor>addColumn</anchor>
      <arglist>( const QString &amp; label, int width = -1 )</arglist>
    </member>
    <member kind="function">
      <name>addColumn</name>
      <anchor>addColumn-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; label, int width = -1 )</arglist>
    </member>
    <member kind="function">
      <name>adjustColumn</name>
      <anchor>adjustColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked-2</anchor>
      <arglist>( Q3ListViewItem * item, const QPoint &amp; pnt, int c )</arglist>
    </member>
    <member kind="function">
      <name>collapsed</name>
      <anchor>collapsed</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>columnAlignment</name>
      <anchor>columnAlignment</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>columnText</name>
      <anchor>columnText</anchor>
      <arglist>( int c )</arglist>
    </member>
    <member kind="function">
      <name>columnWidth</name>
      <anchor>columnWidth</anchor>
      <arglist>( int c )</arglist>
    </member>
    <member kind="function">
      <name>columnWidthMode</name>
      <anchor>columnWidthMode</anchor>
      <arglist>( int c )</arglist>
    </member>
    <member kind="function">
      <name>contentsMouseDoubleClickEvent</name>
      <anchor>contentsMouseDoubleClickEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMouseMoveEvent</name>
      <anchor>contentsMouseMoveEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMousePressEvent</name>
      <anchor>contentsMousePressEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMouseReleaseEvent</name>
      <anchor>contentsMouseReleaseEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contextMenuRequested</name>
      <anchor>contextMenuRequested</anchor>
      <arglist>( Q3ListViewItem * item, const QPoint &amp; pos, int col )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doAutoScroll</name>
      <anchor>doAutoScroll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked-2</anchor>
      <arglist>( Q3ListViewItem * item, const QPoint &amp; point, int column )</arglist>
    </member>
    <member kind="function">
      <name>dragObject</name>
      <anchor>dragObject</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawContentsOffset</name>
      <anchor>drawContentsOffset</anchor>
      <arglist>( QPainter * p, int ox, int oy, int cx, int cy, int cw, int ch )</arglist>
    </member>
    <member kind="function">
      <name>dropped</name>
      <anchor>dropped</anchor>
      <arglist>( QDropEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>ensureItemVisible</name>
      <anchor>ensureItemVisible</anchor>
      <arglist>( const Q3ListViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>eventFilter</name>
      <anchor>eventFilter</anchor>
      <arglist>( QObject * o, QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>expanded</name>
      <anchor>expanded</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem</anchor>
      <arglist>( const QString &amp; text, int column, ComparisonFlags compare = ExactMatch | Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>firstChild</name>
      <anchor>firstChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>header</name>
      <anchor>header</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideColumn</name>
      <anchor>hideColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( Q3ListViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>invertSelection</name>
      <anchor>invertSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>isOpen</anchor>
      <arglist>( const Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>isRenaming</name>
      <anchor>isRenaming</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>( const Q3ListViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( const QPoint &amp; viewPos )</arglist>
    </member>
    <member kind="function">
      <name>itemPos</name>
      <anchor>itemPos</anchor>
      <arglist>( const Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemRect</name>
      <anchor>itemRect</anchor>
      <arglist>( const Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemRenamed</name>
      <anchor>itemRenamed</anchor>
      <arglist>( Q3ListViewItem * item, int col, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>itemRenamed</name>
      <anchor>itemRenamed-2</anchor>
      <arglist>( Q3ListViewItem * item, int col )</arglist>
    </member>
    <member kind="function">
      <name>lastItem</name>
      <anchor>lastItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseButtonClicked</name>
      <anchor>mouseButtonClicked</anchor>
      <arglist>( int button, Q3ListViewItem * item, const QPoint &amp; pos, int c )</arglist>
    </member>
    <member kind="function">
      <name>mouseButtonPressed</name>
      <anchor>mouseButtonPressed</anchor>
      <arglist>( int button, Q3ListViewItem * item, const QPoint &amp; pos, int c )</arglist>
    </member>
    <member kind="function">
      <name>onItem</name>
      <anchor>onItem</anchor>
      <arglist>( Q3ListViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>onViewport</name>
      <anchor>onViewport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEmptyArea</name>
      <anchor>paintEmptyArea</anchor>
      <arglist>( QPainter * p, const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed-2</anchor>
      <arglist>( Q3ListViewItem * item, const QPoint &amp; pnt, int c )</arglist>
    </member>
    <member kind="function">
      <name>removeColumn</name>
      <anchor>removeColumn</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>repaintItem</name>
      <anchor>repaintItem</anchor>
      <arglist>( const Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>resizeEvent</name>
      <anchor>resizeEvent</anchor>
      <arglist>( QResizeEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>returnPressed</name>
      <anchor>returnPressed</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>rightButtonClicked</name>
      <anchor>rightButtonClicked</anchor>
      <arglist>( Q3ListViewItem * item, const QPoint &amp; point, int column )</arglist>
    </member>
    <member kind="function">
      <name>rightButtonPressed</name>
      <anchor>rightButtonPressed</anchor>
      <arglist>( Q3ListViewItem * item, const QPoint &amp; point, int column )</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>( bool select )</arglist>
    </member>
    <member kind="function">
      <name>selectedItem</name>
      <anchor>selectedItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged-2</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setColumnAlignment</name>
      <anchor>setColumnAlignment</anchor>
      <arglist>( int column, int align )</arglist>
    </member>
    <member kind="function">
      <name>setColumnText</name>
      <anchor>setColumnText</anchor>
      <arglist>( int column, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>setColumnText</name>
      <anchor>setColumnText-2</anchor>
      <arglist>( int column, const QIcon &amp; icon, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>setColumnWidth</name>
      <anchor>setColumnWidth</anchor>
      <arglist>( int column, int w )</arglist>
    </member>
    <member kind="function">
      <name>setColumnWidthMode</name>
      <anchor>setColumnWidthMode</anchor>
      <arglist>( int c, WidthMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( Q3ListViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>setOpen</name>
      <anchor>setOpen</anchor>
      <arglist>( Q3ListViewItem * item, bool open )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( Q3ListViewItem * item, bool selected )</arglist>
    </member>
    <member kind="function">
      <name>setSelectionAnchor</name>
      <anchor>setSelectionAnchor</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setSortColumn</name>
      <anchor>setSortColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>setSortOrder</name>
      <anchor>setSortOrder</anchor>
      <arglist>( Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>setSorting</name>
      <anchor>setSorting</anchor>
      <arglist>( int column, bool ascending = true )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sortColumn</name>
      <anchor>sortColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SortOrder</name>
      <anchor>sortOrder</anchor>
      <arglist> Q3ListView::sortOrder()</arglist>
    </member>
    <member kind="function">
      <name>spacePressed</name>
      <anchor>spacePressed</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>startDrag</name>
      <anchor>startDrag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( Q3ListViewItem * i )</arglist>
    </member>
    <member kind="function">
      <name>triggerUpdate</name>
      <anchor>triggerUpdate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateContents</name>
      <anchor>updateContents</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListViewItem</name>
    <filename>q3listviewitem.html</filename>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem</anchor>
      <arglist>( Q3ListView * parent )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-2</anchor>
      <arglist>( Q3ListViewItem * parent )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-3</anchor>
      <arglist>( Q3ListView * parent, Q3ListViewItem * after )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-4</anchor>
      <arglist>( Q3ListViewItem * parent, Q3ListViewItem * after )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-5</anchor>
      <arglist>( Q3ListView * parent, const QString &amp; label1, const QString &amp; label2 = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-6</anchor>
      <arglist>( Q3ListViewItem * parent, const QString &amp; label1, const QString &amp; label2 = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-7</anchor>
      <arglist>( Q3ListView * parent, Q3ListViewItem * after, const QString &amp; label1, const QString &amp; label2 = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItem</name>
      <anchor>Q3ListViewItem-8</anchor>
      <arglist>( Q3ListViewItem * parent, Q3ListViewItem * after, const QString &amp; label1, const QString &amp; label2 = QString()</arglist>
    </member>
    <member kind="function">
      <name>acceptDrop</name>
      <anchor>acceptDrop</anchor>
      <arglist>( const QMimeSource * mime )</arglist>
    </member>
    <member kind="function">
      <name>activate</name>
      <anchor>activate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activatedPos</name>
      <anchor>activatedPos</anchor>
      <arglist>( QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>cancelRename</name>
      <anchor>cancelRename</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>childCount</name>
      <anchor>childCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>compare</anchor>
      <arglist>( Q3ListViewItem * i, int col, bool ascending )</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragEnabled</name>
      <anchor>dragEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragEntered</name>
      <anchor>dragEntered</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragLeft</name>
      <anchor>dragLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dropEnabled</name>
      <anchor>dropEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dropped</name>
      <anchor>dropped</anchor>
      <arglist>( QDropEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>enforceSortOrder</name>
      <anchor>enforceSortOrder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>firstChild</name>
      <anchor>firstChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( Q3ListViewItem * newChild )</arglist>
    </member>
    <member kind="function">
      <name>invalidateHeight</name>
      <anchor>invalidateHeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>isEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isExpandable</name>
      <anchor>isExpandable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>isOpen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelectable</name>
      <anchor>isSelectable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVisible</name>
      <anchor>isVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemAbove</name>
      <anchor>itemAbove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemBelow</name>
      <anchor>itemBelow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemPos</name>
      <anchor>itemPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>( int column, bool ascending )</arglist>
    </member>
    <member kind="function">
      <name>listView</name>
      <anchor>listView</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveItem</name>
      <anchor>moveItem</anchor>
      <arglist>( Q3ListViewItem * after )</arglist>
    </member>
    <member kind="function">
      <name>multiLinesEnabled</name>
      <anchor>multiLinesEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextSibling</name>
      <anchor>nextSibling</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>okRename</name>
      <anchor>okRename</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>paintBranches</name>
      <anchor>paintBranches</anchor>
      <arglist>( QPainter * p, const QPalette &amp; pal, int w, int y, int h )</arglist>
    </member>
    <member kind="function">
      <name>paintFocus</name>
      <anchor>paintFocus</anchor>
      <arglist>( QPainter * p, const QPalette &amp; pal, const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>renameEnabled</name>
      <anchor>renameEnabled</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDragEnabled</name>
      <anchor>setDragEnabled</anchor>
      <arglist>( bool allow )</arglist>
    </member>
    <member kind="function">
      <name>setDropEnabled</name>
      <anchor>setDropEnabled</anchor>
      <arglist>( bool allow )</arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>setEnabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setExpandable</name>
      <anchor>setExpandable</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( int height )</arglist>
    </member>
    <member kind="function">
      <name>setMultiLinesEnabled</name>
      <anchor>setMultiLinesEnabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setOpen</name>
      <anchor>setOpen</anchor>
      <arglist>( bool o )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( int column, const QPixmap &amp; pm )</arglist>
    </member>
    <member kind="function">
      <name>setRenameEnabled</name>
      <anchor>setRenameEnabled</anchor>
      <arglist>( int col, bool b )</arglist>
    </member>
    <member kind="function">
      <name>setSelectable</name>
      <anchor>setSelectable</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( bool s )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( int column, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setVisible</name>
      <anchor>setVisible</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setup</name>
      <anchor>setup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sortChildItems</name>
      <anchor>sortChildItems</anchor>
      <arglist>( int column, bool ascending )</arglist>
    </member>
    <member kind="function">
      <name>startRename</name>
      <anchor>startRename</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>totalHeight</name>
      <anchor>totalHeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( const QFontMetrics &amp; fm, const Q3ListView * lv, int c )</arglist>
    </member>
    <member kind="function">
      <name>widthChanged</name>
      <anchor>widthChanged</anchor>
      <arglist>( int c = -1 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ListViewItemIterator</name>
    <filename>q3listviewitemiterator.html</filename>
    <member kind="enum">
      <name>IteratorFlag</name>
      <anchor>IteratorFlag-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItemIterator</name>
      <anchor>Q3ListViewItemIterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItemIterator</name>
      <anchor>Q3ListViewItemIterator-2</anchor>
      <arglist>( Q3ListViewItem * item )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItemIterator</name>
      <anchor>Q3ListViewItemIterator-3</anchor>
      <arglist>( Q3ListViewItem * item, int iteratorFlags )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItemIterator</name>
      <anchor>Q3ListViewItemIterator-4</anchor>
      <arglist>( const Q3ListViewItemIterator &amp; it )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItemIterator</name>
      <anchor>Q3ListViewItemIterator-5</anchor>
      <arglist>( Q3ListView * lv )</arglist>
    </member>
    <member kind="function">
      <name>Q3ListViewItemIterator</name>
      <anchor>Q3ListViewItemIterator-6</anchor>
      <arglist>( Q3ListView * lv, int iteratorFlags )</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3ListViewItemIterator &amp; it )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3LocalFs</name>
    <filename>q3localfs.html</filename>
    <member kind="function">
      <name>Q3LocalFs</name>
      <anchor>Q3LocalFs</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3MainWindow</name>
    <filename>q3mainwindow.html</filename>
    <member kind="enum">
      <name>DockWindows</name>
      <anchor>DockWindows-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3MainWindow</name>
      <anchor>Q3MainWindow</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = Qt::WType_TopLevel )</arglist>
    </member>
    <member kind="function">
      <name>addDockWindow</name>
      <anchor>addDockWindow</anchor>
      <arglist>( Q3DockWindow * dockWindow, Qt::Dock edge = Qt::DockTop, bool newLine = false )</arglist>
    </member>
    <member kind="function">
      <name>addDockWindow</name>
      <anchor>addDockWindow-2</anchor>
      <arglist>( Q3DockWindow * dockWindow, const QString &amp; label, Qt::Dock edge = Qt::DockTop, bool newLine = false )</arglist>
    </member>
    <member kind="function">
      <name>addToolBar</name>
      <anchor>addToolBar</anchor>
      <arglist>( Q3DockWindow * dockWindow, Qt::Dock position = Qt::DockTop, bool newLine = false )</arglist>
    </member>
    <member kind="function">
      <name>addToolBar</name>
      <anchor>addToolBar-2</anchor>
      <arglist>( Q3DockWindow * dockWindow, const QString &amp; label, Qt::Dock position = Qt::DockTop, bool newLine = false )</arglist>
    </member>
    <member kind="function">
      <name>appropriate</name>
      <anchor>appropriate</anchor>
      <arglist>( Q3DockWindow * dw )</arglist>
    </member>
    <member kind="function">
      <name>bottomDock</name>
      <anchor>bottomDock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>centralWidget</name>
      <anchor>centralWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childEvent</name>
      <anchor>childEvent</anchor>
      <arglist>( QChildEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>createDockWindowMenu</name>
      <anchor>createDockWindowMenu</anchor>
      <arglist>( DockWindows dockWindows = AllDockWindows )</arglist>
    </member>
    <member kind="function">
      <name>customize</name>
      <anchor>customize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dockWindowPositionChanged</name>
      <anchor>dockWindowPositionChanged</anchor>
      <arglist>( Q3DockWindow * dockWindow )</arglist>
    </member>
    <member kind="function">
      <name>dockWindows</name>
      <anchor>dockWindows</anchor>
      <arglist>( Qt::Dock dock )</arglist>
    </member>
    <member kind="function">
      <name>dockWindows</name>
      <anchor>dockWindows-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLocation</name>
      <anchor>getLocation</anchor>
      <arglist>( Q3DockWindow * dw, Qt::Dock &amp; dock, int &amp; index, bool &amp; nl, int &amp; extraOffset )</arglist>
    </member>
    <member kind="function">
      <name>hasDockWindow</name>
      <anchor>hasDockWindow</anchor>
      <arglist>( Q3DockWindow * dw )</arglist>
    </member>
    <member kind="function">
      <name>isCustomizable</name>
      <anchor>isCustomizable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDockEnabled</name>
      <anchor>isDockEnabled</anchor>
      <arglist>( Qt::Dock dock )</arglist>
    </member>
    <member kind="function">
      <name>isDockEnabled</name>
      <anchor>isDockEnabled-2</anchor>
      <arglist>( Q3DockArea * area )</arglist>
    </member>
    <member kind="function">
      <name>isDockEnabled</name>
      <anchor>isDockEnabled-3</anchor>
      <arglist>( Q3DockWindow * dw, Q3DockArea * area )</arglist>
    </member>
    <member kind="function">
      <name>isDockEnabled</name>
      <anchor>isDockEnabled-4</anchor>
      <arglist>( Q3DockWindow * tb, Qt::Dock dock )</arglist>
    </member>
    <member kind="function">
      <name>isDockMenuEnabled</name>
      <anchor>isDockMenuEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftDock</name>
      <anchor>leftDock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineUpDockWindows</name>
      <anchor>lineUpDockWindows</anchor>
      <arglist>( bool keepNewLines = false )</arglist>
    </member>
    <member kind="function">
      <name>lineUpToolBars</name>
      <anchor>lineUpToolBars</anchor>
      <arglist>( bool keepNewLines = false )</arglist>
    </member>
    <member kind="function">
      <name>menuBar</name>
      <anchor>menuBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveDockWindow</name>
      <anchor>moveDockWindow</anchor>
      <arglist>( Q3DockWindow * dockWindow, Qt::Dock edge = Qt::DockTop )</arglist>
    </member>
    <member kind="function">
      <name>moveDockWindow</name>
      <anchor>moveDockWindow-2</anchor>
      <arglist>( Q3DockWindow * dockWindow, Qt::Dock edge, bool nl, int index, int extraOffset = -1 )</arglist>
    </member>
    <member kind="function">
      <name>moveToolBar</name>
      <anchor>moveToolBar</anchor>
      <arglist>( Q3DockWindow * dockWindow, Qt::Dock position = Qt::DockTop )</arglist>
    </member>
    <member kind="function">
      <name>moveToolBar</name>
      <anchor>moveToolBar-2</anchor>
      <arglist>( Q3DockWindow * dockWindow, Qt::Dock position, bool nl, int index, int extraOffset = -1 )</arglist>
    </member>
    <member kind="function">
      <name>pixmapSizeChanged</name>
      <anchor>pixmapSizeChanged</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>removeDockWindow</name>
      <anchor>removeDockWindow</anchor>
      <arglist>( Q3DockWindow * dockWindow )</arglist>
    </member>
    <member kind="function">
      <name>removeToolBar</name>
      <anchor>removeToolBar</anchor>
      <arglist>( Q3DockWindow * dockWindow )</arglist>
    </member>
    <member kind="function">
      <name>rightDock</name>
      <anchor>rightDock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAppropriate</name>
      <anchor>setAppropriate</anchor>
      <arglist>( Q3DockWindow * dw, bool a )</arglist>
    </member>
    <member kind="function">
      <name>setCentralWidget</name>
      <anchor>setCentralWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setDockEnabled</name>
      <anchor>setDockEnabled</anchor>
      <arglist>( Qt::Dock dock, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setDockEnabled</name>
      <anchor>setDockEnabled-2</anchor>
      <arglist>( Q3DockWindow * dw, Qt::Dock dock, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setDockMenuEnabled</name>
      <anchor>setDockMenuEnabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setToolBarsMovable</name>
      <anchor>setToolBarsMovable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setUpLayout</name>
      <anchor>setUpLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showDockMenu</name>
      <anchor>showDockMenu</anchor>
      <arglist>( const QPoint &amp; globalPos )</arglist>
    </member>
    <member kind="function">
      <name>statusBar</name>
      <anchor>statusBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toolBarPositionChanged</name>
      <anchor>toolBarPositionChanged</anchor>
      <arglist>( Q3ToolBar * toolbar )</arglist>
    </member>
    <member kind="function">
      <name>toolBars</name>
      <anchor>toolBars</anchor>
      <arglist>( Qt::Dock dock )</arglist>
    </member>
    <member kind="function">
      <name>toolBarsMovable</name>
      <anchor>toolBarsMovable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topDock</name>
      <anchor>topDock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>usesTextLabelChanged</name>
      <anchor>usesTextLabelChanged</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3MemArray</name>
    <filename>q3memarray.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3MemArray</name>
      <anchor>Q3MemArray</anchor>
      <arglist>( int arg1, int arg2 )</arglist>
    </member>
    <member kind="function">
      <name>Q3MemArray</name>
      <anchor>Q3MemArray-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3MemArray</name>
      <anchor>Q3MemArray-3</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>Q3MemArray</name>
      <anchor>Q3MemArray-4</anchor>
      <arglist>( const Q3MemArray&lt;type&gt; &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>Q3MemArray</name>
      <anchor>Q3MemArray-5</anchor>
      <arglist>( const QVector&lt;type&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>assign</name>
      <anchor>assign</anchor>
      <arglist>( const Q3MemArray&lt;type&gt; &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>assign</name>
      <anchor>assign-2</anchor>
      <arglist>( const type * data, uint size )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( uint index )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bsearch</name>
      <anchor>bsearch</anchor>
      <arglist>( const type &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const type &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>detach</name>
      <anchor>detach</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>duplicate</name>
      <anchor>duplicate</anchor>
      <arglist>( const Q3MemArray&lt;type&gt; &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>duplicate</name>
      <anchor>duplicate-2</anchor>
      <arglist>( const type * data, uint size )</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( const type &amp; v, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const type &amp; v, uint index = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nrefs</name>
      <anchor>nrefs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resetRawData</name>
      <anchor>resetRawData</anchor>
      <arglist>( const type * data, uint size )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( uint size, Optimization optim )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize-2</anchor>
      <arglist>( uint size )</arglist>
    </member>
    <member kind="function">
      <name>setRawData</name>
      <anchor>setRawData</anchor>
      <arglist>( const type * data, uint size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>truncate</name>
      <anchor>truncate</anchor>
      <arglist>( uint pos )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVector-lttype-gt</anchor>
      <arglist> QVector&lt;type&gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-type--2a</anchor>
      <arglist> const type *()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const Q3MemArray&lt;type&gt; &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3MemArray&lt;type&gt; &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3MemArray&lt;type&gt; &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3MimeSourceFactory</name>
    <filename>q3mimesourcefactory.html</filename>
    <member kind="function">
      <name>Q3MimeSourceFactory</name>
      <anchor>Q3MimeSourceFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addFactory</name>
      <anchor>addFactory</anchor>
      <arglist>( Q3MimeSourceFactory * f )</arglist>
    </member>
    <member kind="function">
      <name>addFilePath</name>
      <anchor>addFilePath</anchor>
      <arglist>( const QString &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QString &amp; abs_name )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data-2</anchor>
      <arglist>( const QString &amp; abs_or_rel_name, const QString &amp; context )</arglist>
    </member>
    <member kind="function">
      <name>defaultFactory</name>
      <anchor>defaultFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filePath</name>
      <anchor>filePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeAbsolute</name>
      <anchor>makeAbsolute</anchor>
      <arglist>( const QString &amp; abs_or_rel_name, const QString &amp; context )</arglist>
    </member>
    <member kind="function">
      <name>removeFactory</name>
      <anchor>removeFactory</anchor>
      <arglist>( Q3MimeSourceFactory * f )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QString &amp; abs_name, QMimeSource * data )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultFactory</name>
      <anchor>setDefaultFactory</anchor>
      <arglist>( Q3MimeSourceFactory * factory )</arglist>
    </member>
    <member kind="function">
      <name>setExtensionType</name>
      <anchor>setExtensionType</anchor>
      <arglist>( const QString &amp; ext, const char * mimetype )</arglist>
    </member>
    <member kind="function">
      <name>setFilePath</name>
      <anchor>setFilePath</anchor>
      <arglist>( const QStringList &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>setFilePath</name>
      <anchor>setFilePath-2</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>setImage</name>
      <anchor>setImage</anchor>
      <arglist>( const QString &amp; abs_name, const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QString &amp; abs_name, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; abs_name, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>takeDefaultFactory</name>
      <anchor>takeDefaultFactory</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3MultiLineEdit</name>
    <filename>q3multilineedit.html</filename>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3MultiLineEdit</name>
      <anchor>Q3MultiLineEdit</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>autoUpdate</name>
      <anchor>autoUpdate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backspace</name>
      <anchor>backspace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorDown</name>
      <anchor>cursorDown</anchor>
      <arglist>( bool mark = false )</arglist>
    </member>
    <member kind="function">
      <name>cursorLeft</name>
      <anchor>cursorLeft</anchor>
      <arglist>( bool mark = false, bool wrap = true )</arglist>
    </member>
    <member kind="function">
      <name>cursorPoint</name>
      <anchor>cursorPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorRight</name>
      <anchor>cursorRight</anchor>
      <arglist>( bool mark = false, bool wrap = true )</arglist>
    </member>
    <member kind="function">
      <name>cursorUp</name>
      <anchor>cursorUp</anchor>
      <arglist>( bool mark = false )</arglist>
    </member>
    <member kind="function">
      <name>cursorWordBackward</name>
      <anchor>cursorWordBackward</anchor>
      <arglist>( bool mark )</arglist>
    </member>
    <member kind="function">
      <name>cursorWordForward</name>
      <anchor>cursorWordForward</anchor>
      <arglist>( bool mark )</arglist>
    </member>
    <member kind="function">
      <name>deselect</name>
      <anchor>deselect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>( bool mark = false )</arglist>
    </member>
    <member kind="function">
      <name>getMarkedRegion</name>
      <anchor>getMarkedRegion</anchor>
      <arglist>( int * line1, int * col1, int * line2, int * col2 )</arglist>
    </member>
    <member kind="function">
      <name>hasMarkedText</name>
      <anchor>hasMarkedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>home</name>
      <anchor>home</anchor>
      <arglist>( bool mark = false )</arglist>
    </member>
    <member kind="function">
      <name>insertAndMark</name>
      <anchor>insertAndMark</anchor>
      <arglist>( const QString &amp; str, bool mark )</arglist>
    </member>
    <member kind="function">
      <name>insertAt</name>
      <anchor>insertAt-2</anchor>
      <arglist>( const QString &amp; s, int line, int col, bool mark )</arglist>
    </member>
    <member kind="function">
      <name>insertLine</name>
      <anchor>insertLine</anchor>
      <arglist>( const QString &amp; txt, int line = -1 )</arglist>
    </member>
    <member kind="function">
      <name>killLine</name>
      <anchor>killLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineLength</name>
      <anchor>lineLength</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>markedText</name>
      <anchor>markedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxLines</name>
      <anchor>maxLines</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newLine</name>
      <anchor>newLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageDown</name>
      <anchor>pageDown</anchor>
      <arglist>( bool mark = false )</arglist>
    </member>
    <member kind="function">
      <name>pageUp</name>
      <anchor>pageUp</anchor>
      <arglist>( bool mark = false )</arglist>
    </member>
    <member kind="function">
      <name>removeLine</name>
      <anchor>removeLine</anchor>
      <arglist>( int paragraph )</arglist>
    </member>
    <member kind="function">
      <name>setCursorPosition</name>
      <anchor>setCursorPosition-2</anchor>
      <arglist>( int line, int col, bool mark )</arglist>
    </member>
    <member kind="function">
      <name>setMaxLines</name>
      <anchor>setMaxLines</anchor>
      <arglist>( int max )</arglist>
    </member>
    <member kind="function">
      <name>textLine</name>
      <anchor>textLine</anchor>
      <arglist>( int line )</arglist>
    </member>
    <member kind="function">
      <name>totalHeight</name>
      <anchor>totalHeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>totalWidth</name>
      <anchor>totalWidth</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3NetworkOperation</name>
    <filename>q3networkoperation.html</filename>
    <member kind="function">
      <name>Q3NetworkOperation</name>
      <anchor>Q3NetworkOperation</anchor>
      <arglist>( Q3NetworkProtocol::Operation operation, const QString &amp; arg0, const QString &amp; arg1, const QString &amp; arg2 )</arglist>
    </member>
    <member kind="function">
      <name>Q3NetworkOperation</name>
      <anchor>Q3NetworkOperation-2</anchor>
      <arglist>( Q3NetworkProtocol::Operation operation, const QByteArray &amp; arg0, const QByteArray &amp; arg1, const QByteArray &amp; arg2 )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg</anchor>
      <arglist>( int num )</arglist>
    </member>
    <member kind="function">
      <name>errorCode</name>
      <anchor>errorCode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>free</name>
      <anchor>free</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Operation</name>
      <anchor>operation</anchor>
      <arglist> Q3NetworkOperation::operation()</arglist>
    </member>
    <member kind="function">
      <name>protocolDetail</name>
      <anchor>protocolDetail</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rawArg</name>
      <anchor>rawArg</anchor>
      <arglist>( int num )</arglist>
    </member>
    <member kind="function">
      <name>setArg</name>
      <anchor>setArg</anchor>
      <arglist>( int num, const QString &amp; arg )</arglist>
    </member>
    <member kind="function">
      <name>setErrorCode</name>
      <anchor>setErrorCode</anchor>
      <arglist>( int ec )</arglist>
    </member>
    <member kind="function">
      <name>setProtocolDetail</name>
      <anchor>setProtocolDetail</anchor>
      <arglist>( const QString &amp; detail )</arglist>
    </member>
    <member kind="function">
      <name>setRawArg</name>
      <anchor>setRawArg</anchor>
      <arglist>( int num, const QByteArray &amp; arg )</arglist>
    </member>
    <member kind="function">
      <name>setState</name>
      <anchor>setState</anchor>
      <arglist>( Q3NetworkProtocol::State state )</arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>state</anchor>
      <arglist> Q3NetworkOperation::state()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3NetworkProtocol</name>
    <filename>q3networkprotocol.html</filename>
    <member kind="enum">
      <name>ConnectionState</name>
      <anchor>ConnectionState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Operation</name>
      <anchor>Operation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3NetworkProtocol</name>
      <anchor>Q3NetworkProtocol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addOperation</name>
      <anchor>addOperation</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>autoDelete</name>
      <anchor>autoDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>checkConnection</name>
      <anchor>checkConnection</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>clearOperationQueue</name>
      <anchor>clearOperationQueue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectionStateChanged</name>
      <anchor>connectionStateChanged</anchor>
      <arglist>( int state, const QString &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>createdDirectory</name>
      <anchor>createdDirectory</anchor>
      <arglist>( const QUrlInfo &amp; i, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QByteArray &amp; data, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>dataTransferProgress</name>
      <anchor>dataTransferProgress</anchor>
      <arglist>( int bytesDone, int bytesTotal, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>getNetworkProtocol</name>
      <anchor>getNetworkProtocol</anchor>
      <arglist>( const QString &amp; protocol )</arglist>
    </member>
    <member kind="function">
      <name>hasOnlyLocalFileSystem</name>
      <anchor>hasOnlyLocalFileSystem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemChanged</name>
      <anchor>itemChanged</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>newChild</name>
      <anchor>newChild</anchor>
      <arglist>( const QUrlInfo &amp; i, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>newChildren</name>
      <anchor>newChildren</anchor>
      <arglist>( const Q3ValueList&lt;QUrlInfo&gt; &amp; i, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>operationGet</name>
      <anchor>operationGet</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>operationInProgress</name>
      <anchor>operationInProgress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operationListChildren</name>
      <anchor>operationListChildren</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>operationMkDir</name>
      <anchor>operationMkDir</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>operationPut</name>
      <anchor>operationPut</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>operationRemove</name>
      <anchor>operationRemove</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>operationRename</name>
      <anchor>operationRename</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>registerNetworkProtocol</name>
      <anchor>registerNetworkProtocol</anchor>
      <arglist>( const QString &amp; protocol, Q3NetworkProtocolFactoryBase * protocolFactory )</arglist>
    </member>
    <member kind="function">
      <name>removed</name>
      <anchor>removed</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>setAutoDelete</name>
      <anchor>setAutoDelete</anchor>
      <arglist>( bool b, int i = 10000 )</arglist>
    </member>
    <member kind="function">
      <name>setUrl</name>
      <anchor>setUrl</anchor>
      <arglist>( Q3UrlOperator * u )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>stop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>supportedOperations</name>
      <anchor>supportedOperations</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>url</name>
      <anchor>url</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PaintDeviceMetrics</name>
    <filename>q3paintdevicemetrics.html</filename>
    <member kind="function">
      <name>Q3PaintDeviceMetrics</name>
      <anchor>Q3PaintDeviceMetrics</anchor>
      <arglist>( const QPaintDevice * pd )</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>heightMM</name>
      <anchor>heightMM</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalDpiX</name>
      <anchor>logicalDpiX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalDpiY</name>
      <anchor>logicalDpiY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numColors</name>
      <anchor>numColors</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widthMM</name>
      <anchor>widthMM</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Painter</name>
    <filename>q3painter.html</filename>
    <member kind="function">
      <name>Q3Painter</name>
      <anchor>Q3Painter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3Painter</name>
      <anchor>Q3Painter-2</anchor>
      <arglist>( QPaintDevice * pdev )</arglist>
    </member>
    <member kind="function">
      <name>drawArc</name>
      <anchor>drawArc</anchor>
      <arglist>( const QRect &amp; r, int a, int alen )</arglist>
    </member>
    <member kind="function">
      <name>drawArc</name>
      <anchor>drawArc-2</anchor>
      <arglist>( int x, int y, int w, int h, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawChord</name>
      <anchor>drawChord</anchor>
      <arglist>( const QRect &amp; r, int a, int alen )</arglist>
    </member>
    <member kind="function">
      <name>drawChord</name>
      <anchor>drawChord-2</anchor>
      <arglist>( int x, int y, int w, int h, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse-2</anchor>
      <arglist>( int x, int y, int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>drawPie</name>
      <anchor>drawPie</anchor>
      <arglist>( const QRect &amp; r, int a, int alen )</arglist>
    </member>
    <member kind="function">
      <name>drawPie</name>
      <anchor>drawPie-2</anchor>
      <arglist>( int x, int y, int w, int h, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>drawRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>drawRect-2</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>drawRoundRect</name>
      <anchor>drawRoundRect</anchor>
      <arglist>( const QRect &amp; r, int xrnd = 25, int yrnd = 25 )</arglist>
    </member>
    <member kind="function">
      <name>drawRoundRect</name>
      <anchor>drawRoundRect-2</anchor>
      <arglist>( int x, int y, int w, int h, int xrnd = 25, int yrnd = 25 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Picture</name>
    <filename>q3picture.html</filename>
    <member kind="function">
      <name>Q3Picture</name>
      <anchor>Q3Picture</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3Picture</name>
      <anchor>Q3Picture-2</anchor>
      <arglist>( const QPicture &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>( QIODevice * device, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load-2</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>( QIODevice * device, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save-2</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PointArray</name>
    <filename>q3pointarray.html</filename>
    <member kind="function">
      <name>Q3PointArray</name>
      <anchor>Q3PointArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3PointArray</name>
      <anchor>Q3PointArray-2</anchor>
      <arglist>( const QRect &amp; r, bool closed = false )</arglist>
    </member>
    <member kind="function">
      <name>Q3PointArray</name>
      <anchor>Q3PointArray-3</anchor>
      <arglist>( const QPolygon &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cubicBezier</name>
      <anchor>cubicBezier</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeArc</name>
      <anchor>makeArc</anchor>
      <arglist>( int x, int y, int w, int h, int a1, int a2 )</arglist>
    </member>
    <member kind="function">
      <name>makeArc</name>
      <anchor>makeArc-2</anchor>
      <arglist>( int x, int y, int w, int h, int a1, int a2, const QMatrix &amp; xf )</arglist>
    </member>
    <member kind="function">
      <name>makeEllipse</name>
      <anchor>makeEllipse</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PopupMenu</name>
    <filename>q3popupmenu.html</filename>
    <member kind="function">
      <name>Q3PopupMenu</name>
      <anchor>Q3PopupMenu</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec-2</anchor>
      <arglist>( const QPoint &amp; pos, int indexAtPoint = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Process</name>
    <filename>q3process.html</filename>
    <member kind="enum">
      <name>Communication</name>
      <anchor>Communication-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Process</name>
      <anchor>Q3Process</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Process</name>
      <anchor>Q3Process-2</anchor>
      <arglist>( const QString &amp; arg0, QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Process</name>
      <anchor>Q3Process-3</anchor>
      <arglist>( const QStringList &amp; args, QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addArgument</name>
      <anchor>addArgument</anchor>
      <arglist>( const QString &amp; arg )</arglist>
    </member>
    <member kind="function">
      <name>arguments</name>
      <anchor>arguments</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canReadLineStderr</name>
      <anchor>canReadLineStderr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canReadLineStdout</name>
      <anchor>canReadLineStdout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearArguments</name>
      <anchor>clearArguments</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeStdin</name>
      <anchor>closeStdin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>communication</name>
      <anchor>communication</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exitStatus</name>
      <anchor>exitStatus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRunning</name>
      <anchor>isRunning</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>kill</name>
      <anchor>kill</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>launch</name>
      <anchor>launch</anchor>
      <arglist>( const QByteArray &amp; buf, QStringList * env = 0 )</arglist>
    </member>
    <member kind="function">
      <name>launch</name>
      <anchor>launch-2</anchor>
      <arglist>( const QString &amp; buf, QStringList * env = 0 )</arglist>
    </member>
    <member kind="function">
      <name>launchFinished</name>
      <anchor>launchFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>normalExit</name>
      <anchor>normalExit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processExited</name>
      <anchor>processExited</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processIdentifier</name>
      <anchor>processIdentifier</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readLineStderr</name>
      <anchor>readLineStderr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readLineStdout</name>
      <anchor>readLineStdout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readStderr</name>
      <anchor>readStderr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readStdout</name>
      <anchor>readStdout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readyReadStderr</name>
      <anchor>readyReadStderr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readyReadStdout</name>
      <anchor>readyReadStdout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setArguments</name>
      <anchor>setArguments</anchor>
      <arglist>( const QStringList &amp; args )</arglist>
    </member>
    <member kind="function">
      <name>setCommunication</name>
      <anchor>setCommunication</anchor>
      <arglist>( int commFlags )</arglist>
    </member>
    <member kind="function">
      <name>setWorkingDirectory</name>
      <anchor>setWorkingDirectory</anchor>
      <arglist>( const QDir &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( QStringList * env = 0 )</arglist>
    </member>
    <member kind="function">
      <name>tryTerminate</name>
      <anchor>tryTerminate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>workingDirectory</name>
      <anchor>workingDirectory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>writeToStdin</name>
      <anchor>writeToStdin</anchor>
      <arglist>( const QByteArray &amp; buf )</arglist>
    </member>
    <member kind="function">
      <name>writeToStdin</name>
      <anchor>writeToStdin-2</anchor>
      <arglist>( const QString &amp; buf )</arglist>
    </member>
    <member kind="function">
      <name>wroteToStdin</name>
      <anchor>wroteToStdin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3ProgressBar</name>
      <anchor>Q3ProgressBar</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ProgressBar</name>
      <anchor>Q3ProgressBar-2</anchor>
      <arglist>( int totalSteps, QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ProgressBar</name>
    <filename>q3progressbar.html</filename>
    <member kind="function">
      <name>Q3ProgressBar</name>
      <anchor>Q3ProgressBar-3</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ProgressBar</name>
      <anchor>Q3ProgressBar-4</anchor>
      <arglist>( int totalSteps, QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setIndicator</name>
      <anchor>setIndicator</anchor>
      <arglist>( QString &amp; indicator, int progress, int totalSteps )</arglist>
    </member>
    <member kind="function">
      <name>Q3ProgressDialog</name>
      <anchor>Q3ProgressDialog</anchor>
      <arglist>( QWidget * creator, const char * name, bool modal = false, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ProgressDialog</name>
      <anchor>Q3ProgressDialog-2</anchor>
      <arglist>( const QString &amp; labelText, const QString &amp; cancelButtonText, int totalSteps, QWidget * creator = 0, const char * name = 0, bool modal = false, Qt::WFlags f = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ProgressDialog</name>
    <filename>q3progressdialog.html</filename>
    <member kind="function">
      <name>Q3ProgressDialog</name>
      <anchor>Q3ProgressDialog-3</anchor>
      <arglist>( QWidget * creator = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ProgressDialog</name>
      <anchor>Q3ProgressDialog-4</anchor>
      <arglist>( const QString &amp; labelText, const QString &amp; cancelButtonText, int totalSteps, QWidget * creator = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>cancel</name>
      <anchor>cancel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canceled</name>
      <anchor>canceled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>forceShow</name>
      <anchor>forceShow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBar</name>
      <anchor>setBar</anchor>
      <arglist>( Q3ProgressBar * bar )</arglist>
    </member>
    <member kind="function">
      <name>setCancelButton</name>
      <anchor>setCancelButton</anchor>
      <arglist>( QPushButton * cancelButton )</arglist>
    </member>
    <member kind="function">
      <name>setCancelButtonText</name>
      <anchor>setCancelButtonText</anchor>
      <arglist>( const QString &amp; cancelButtonText )</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel</anchor>
      <arglist>( QLabel * label )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrCollection</name>
    <filename>q3ptrcollection.html</filename>
    <member kind="function">
      <name>Item</name>
      <anchor>Item-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3PtrCollection</name>
      <anchor>Q3PtrCollection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrCollection</name>
      <anchor>Q3PtrCollection-2</anchor>
      <arglist>( const Q3PtrCollection &amp; source )</arglist>
    </member>
    <member kind="function">
      <name>autoDelete</name>
      <anchor>autoDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteItem</name>
      <anchor>deleteItem</anchor>
      <arglist>( Item d )</arglist>
    </member>
    <member kind="function">
      <name>newItem</name>
      <anchor>newItem</anchor>
      <arglist>( Item d )</arglist>
    </member>
    <member kind="function">
      <name>setAutoDelete</name>
      <anchor>setAutoDelete</anchor>
      <arglist>( bool enable )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrDict</name>
    <filename>q3ptrdict.html</filename>
    <member kind="function">
      <name>Q3PtrDict</name>
      <anchor>Q3PtrDict</anchor>
      <arglist>( int size = 17 )</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrDict</name>
      <anchor>Q3PtrDict-2</anchor>
      <arglist>( const Q3PtrDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( void * key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( void * key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( void * key )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( void * key, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( uint newsize )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statistics</name>
      <anchor>statistics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( void * key )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3PtrDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( void * key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrDictIterator</name>
    <filename>q3ptrdictiterator.html</filename>
    <member kind="function">
      <name>Q3PtrDictIterator</name>
      <anchor>Q3PtrDictIterator</anchor>
      <arglist>( const Q3PtrDict&lt;type&gt; &amp; dict )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentKey</name>
      <anchor>currentKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrList</name>
    <filename>q3ptrlist.html</filename>
    <member kind="function">
      <name>Q3PtrList</name>
      <anchor>Q3PtrList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrList</name>
      <anchor>Q3PtrList-2</anchor>
      <arglist>( const Q3PtrList&lt;type&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( uint index )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compareItems</name>
      <anchor>compareItems</anchor>
      <arglist>( Q3PtrCollection::Item item1, Q3PtrCollection::Item item2 )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>containsRef</name>
      <anchor>containsRef</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentNode</name>
      <anchor>currentNode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>findNextRef</name>
      <anchor>findNextRef</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>findRef</name>
      <anchor>findRef</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getFirst</name>
      <anchor>getFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getLast</name>
      <anchor>getLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inSort</name>
      <anchor>inSort</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( uint index, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>prev</name>
      <anchor>prev</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( uint index )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-3</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>removeFirst</name>
      <anchor>removeFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeLast</name>
      <anchor>removeLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeNode</name>
      <anchor>removeNode</anchor>
      <arglist>( Q3LNode * node )</arglist>
    </member>
    <member kind="function">
      <name>removeRef</name>
      <anchor>removeRef</anchor>
      <arglist>( const type * item )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( uint index, const type * item )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( uint index )</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>takeNode</name>
      <anchor>takeNode</anchor>
      <arglist>( Q3LNode * node )</arglist>
    </member>
    <member kind="function">
      <name>toVector</name>
      <anchor>toVector</anchor>
      <arglist>( Q3GVector * vec )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const Q3PtrList&lt;type&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3PtrList&lt;type&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3PtrList&lt;type&gt; &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrListIterator</name>
    <filename>q3ptrlistiterator.html</filename>
    <member kind="function">
      <name>Q3PtrListIterator</name>
      <anchor>Q3PtrListIterator</anchor>
      <arglist>( const Q3PtrList&lt;type&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>atFirst</name>
      <anchor>atFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atLast</name>
      <anchor>atLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFirst</name>
      <anchor>toFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLast</name>
      <anchor>toLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>operator-28-29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( uint jump )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3PtrListIterator&lt;type&gt; &amp; it )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrQueue</name>
    <filename>q3ptrqueue.html</filename>
    <member kind="function">
      <name>Q3PtrQueue</name>
      <anchor>Q3PtrQueue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrQueue</name>
      <anchor>Q3PtrQueue-2</anchor>
      <arglist>( const Q3PtrQueue&lt;type&gt; &amp; queue )</arglist>
    </member>
    <member kind="function">
      <name>autoDelete</name>
      <anchor>autoDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dequeue</name>
      <anchor>dequeue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enqueue</name>
      <anchor>enqueue</anchor>
      <arglist>( const type * d )</arglist>
    </member>
    <member kind="function">
      <name>head</name>
      <anchor>head</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoDelete</name>
      <anchor>setAutoDelete</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3PtrQueue&lt;type&gt; &amp; queue )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrStack</name>
    <filename>q3ptrstack.html</filename>
    <member kind="function">
      <name>Q3PtrStack</name>
      <anchor>Q3PtrStack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrStack</name>
      <anchor>Q3PtrStack-2</anchor>
      <arglist>( const Q3PtrStack&lt;type&gt; &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>autoDelete</name>
      <anchor>autoDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop</name>
      <anchor>pop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>push</name>
      <anchor>push</anchor>
      <arglist>( const type * d )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoDelete</name>
      <anchor>setAutoDelete</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-type--2a</anchor>
      <arglist> type *()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3PtrStack&lt;type&gt; &amp; s )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3PtrVector</name>
    <filename>q3ptrvector.html</filename>
    <member kind="function">
      <name>Q3PtrVector</name>
      <anchor>Q3PtrVector</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrVector</name>
      <anchor>Q3PtrVector-2</anchor>
      <arglist>( uint size )</arglist>
    </member>
    <member kind="function">
      <name>Q3PtrVector</name>
      <anchor>Q3PtrVector-3</anchor>
      <arglist>( const Q3PtrVector&lt;type&gt; &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>bsearch</name>
      <anchor>bsearch</anchor>
      <arglist>( const type * d )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compareItems</name>
      <anchor>compareItems</anchor>
      <arglist>( Q3PtrCollection::Item d1, Q3PtrCollection::Item d2 )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const type * d )</arglist>
    </member>
    <member kind="function">
      <name>containsRef</name>
      <anchor>containsRef</anchor>
      <arglist>( const type * d )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( const type * d, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const type * d, uint i = 0 )</arglist>
    </member>
    <member kind="function">
      <name>findRef</name>
      <anchor>findRef</anchor>
      <arglist>( const type * d, uint i = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( uint i, const type * d )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( uint size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; s, Q3PtrCollection::Item item )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3PtrVector&lt;type&gt; &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3PtrVector&lt;type&gt; &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3RangeControl</name>
    <filename>q3rangecontrol.html</filename>
    <member kind="function">
      <name>Q3RangeControl</name>
      <anchor>Q3RangeControl</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3RangeControl</name>
      <anchor>Q3RangeControl-2</anchor>
      <arglist>( int minValue, int maxValue, int lineStep, int pageStep, int value )</arglist>
    </member>
    <member kind="function">
      <name>addLine</name>
      <anchor>addLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addPage</name>
      <anchor>addPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bound</name>
      <anchor>bound</anchor>
      <arglist>( int v )</arglist>
    </member>
    <member kind="function">
      <name>directSetValue</name>
      <anchor>directSetValue</anchor>
      <arglist>( int value )</arglist>
    </member>
    <member kind="function">
      <name>lineStep</name>
      <anchor>lineStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxValue</name>
      <anchor>maxValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minValue</name>
      <anchor>minValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageStep</name>
      <anchor>pageStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>positionFromValue</name>
      <anchor>positionFromValue</anchor>
      <arglist>( int logical_val, int span )</arglist>
    </member>
    <member kind="function">
      <name>prevValue</name>
      <anchor>prevValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rangeChange</name>
      <anchor>rangeChange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMaxValue</name>
      <anchor>setMaxValue</anchor>
      <arglist>( int maxVal )</arglist>
    </member>
    <member kind="function">
      <name>setMinValue</name>
      <anchor>setMinValue</anchor>
      <arglist>( int minVal )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( int minValue, int maxValue )</arglist>
    </member>
    <member kind="function">
      <name>setSteps</name>
      <anchor>setSteps</anchor>
      <arglist>( int lineStep, int pageStep )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( int value )</arglist>
    </member>
    <member kind="function">
      <name>stepChange</name>
      <anchor>stepChange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>subtractLine</name>
      <anchor>subtractLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>subtractPage</name>
      <anchor>subtractPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChange</name>
      <anchor>valueChange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueFromPosition</name>
      <anchor>valueFromPosition</anchor>
      <arglist>( int pos, int span )</arglist>
    </member>
    <member kind="function">
      <name>childIsVisible</name>
      <anchor>childIsVisible</anchor>
      <arglist>( QWidget * child )</arglist>
    </member>
    <member kind="function">
      <name>showChild</name>
      <anchor>showChild</anchor>
      <arglist>( QWidget * child, bool y = true )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ScrollView</name>
    <filename>q3scrollview.html</filename>
    <member kind="enum">
      <name>ResizePolicy</name>
      <anchor>ResizePolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ScrollBarMode</name>
      <anchor>ScrollBarMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3ScrollView</name>
      <anchor>Q3ScrollView</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addChild</name>
      <anchor>addChild</anchor>
      <arglist>( QWidget * child, int x = 0, int y = 0 )</arglist>
    </member>
    <member kind="function">
      <name>bottomMargin</name>
      <anchor>bottomMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>center</name>
      <anchor>center</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>center</name>
      <anchor>center-2</anchor>
      <arglist>( int x, int y, float xmargin, float ymargin )</arglist>
    </member>
    <member kind="function">
      <name>childX</name>
      <anchor>childX</anchor>
      <arglist>( QWidget * child )</arglist>
    </member>
    <member kind="function">
      <name>childY</name>
      <anchor>childY</anchor>
      <arglist>( QWidget * child )</arglist>
    </member>
    <member kind="function">
      <name>clipper</name>
      <anchor>clipper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contentsContextMenuEvent</name>
      <anchor>contentsContextMenuEvent</anchor>
      <arglist>( QContextMenuEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsDragEnterEvent</name>
      <anchor>contentsDragEnterEvent</anchor>
      <arglist>( QDragEnterEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>contentsDragLeaveEvent</name>
      <anchor>contentsDragLeaveEvent</anchor>
      <arglist>( QDragLeaveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>contentsDragMoveEvent</name>
      <anchor>contentsDragMoveEvent</anchor>
      <arglist>( QDragMoveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>contentsDropEvent</name>
      <anchor>contentsDropEvent</anchor>
      <arglist>( QDropEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>contentsMouseDoubleClickEvent</name>
      <anchor>contentsMouseDoubleClickEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMouseMoveEvent</name>
      <anchor>contentsMouseMoveEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMousePressEvent</name>
      <anchor>contentsMousePressEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMouseReleaseEvent</name>
      <anchor>contentsMouseReleaseEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsMoving</name>
      <anchor>contentsMoving</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>contentsToViewport</name>
      <anchor>contentsToViewport</anchor>
      <arglist>( int x, int y, int &amp; vx, int &amp; vy )</arglist>
    </member>
    <member kind="function">
      <name>contentsToViewport</name>
      <anchor>contentsToViewport-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>contentsWheelEvent</name>
      <anchor>contentsWheelEvent</anchor>
      <arglist>( QWheelEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>cornerWidget</name>
      <anchor>cornerWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawContents</name>
      <anchor>drawContents</anchor>
      <arglist>( QPainter * p, int clipx, int clipy, int clipw, int cliph )</arglist>
    </member>
    <member kind="function">
      <name>drawContentsOffset</name>
      <anchor>drawContentsOffset</anchor>
      <arglist>( QPainter * p, int offsetx, int offsety, int clipx, int clipy, int clipw, int cliph )</arglist>
    </member>
    <member kind="function">
      <name>enableClipper</name>
      <anchor>enableClipper</anchor>
      <arglist>( bool y )</arglist>
    </member>
    <member kind="function">
      <name>ensureVisible</name>
      <anchor>ensureVisible</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>ensureVisible</name>
      <anchor>ensureVisible-2</anchor>
      <arglist>( int x, int y, int xmargin, int ymargin )</arglist>
    </member>
    <member kind="function">
      <name>eventFilter</name>
      <anchor>eventFilter</anchor>
      <arglist>( QObject * obj, QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>hasStaticBackground</name>
      <anchor>hasStaticBackground</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalScrollBar</name>
      <anchor>horizontalScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalSliderPressed</name>
      <anchor>horizontalSliderPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalSliderReleased</name>
      <anchor>horizontalSliderReleased</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isHorizontalSliderPressed</name>
      <anchor>isHorizontalSliderPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVerticalSliderPressed</name>
      <anchor>isVerticalSliderPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftMargin</name>
      <anchor>leftMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveChild</name>
      <anchor>moveChild</anchor>
      <arglist>( QWidget * child, int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>removeChild</name>
      <anchor>removeChild</anchor>
      <arglist>( QWidget * child )</arglist>
    </member>
    <member kind="function">
      <name>repaintContents</name>
      <anchor>repaintContents</anchor>
      <arglist>( int x, int y, int w, int h, bool erase = true )</arglist>
    </member>
    <member kind="function">
      <name>repaintContents</name>
      <anchor>repaintContents-2</anchor>
      <arglist>( const QRect &amp; r, bool erase = true )</arglist>
    </member>
    <member kind="function">
      <name>repaintContents</name>
      <anchor>repaintContents-3</anchor>
      <arglist>( bool erase = true )</arglist>
    </member>
    <member kind="function">
      <name>resizeContents</name>
      <anchor>resizeContents</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>rightMargin</name>
      <anchor>rightMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollBy</name>
      <anchor>scrollBy</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>setContentsPos</name>
      <anchor>setContentsPos</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>setCornerWidget</name>
      <anchor>setCornerWidget</anchor>
      <arglist>( QWidget * corner )</arglist>
    </member>
    <member kind="function">
      <name>setHBarGeometry</name>
      <anchor>setHBarGeometry</anchor>
      <arglist>( QScrollBar &amp; hbar, int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>setMargins</name>
      <anchor>setMargins</anchor>
      <arglist>( int left, int top, int right, int bottom )</arglist>
    </member>
    <member kind="function">
      <name>setStaticBackground</name>
      <anchor>setStaticBackground</anchor>
      <arglist>( bool y )</arglist>
    </member>
    <member kind="function">
      <name>setVBarGeometry</name>
      <anchor>setVBarGeometry</anchor>
      <arglist>( QScrollBar &amp; vbar, int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>topMargin</name>
      <anchor>topMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateContents</name>
      <anchor>updateContents</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>updateContents</name>
      <anchor>updateContents-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>updateContents</name>
      <anchor>updateContents-3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateScrollBars</name>
      <anchor>updateScrollBars</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalScrollBar</name>
      <anchor>verticalScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalSliderPressed</name>
      <anchor>verticalSliderPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalSliderReleased</name>
      <anchor>verticalSliderReleased</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewport</name>
      <anchor>viewport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewportPaintEvent</name>
      <anchor>viewportPaintEvent</anchor>
      <arglist>( QPaintEvent * pe )</arglist>
    </member>
    <member kind="function">
      <name>viewportResizeEvent</name>
      <anchor>viewportResizeEvent</anchor>
      <arglist>( QResizeEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>viewportSize</name>
      <anchor>viewportSize</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>viewportToContents</name>
      <anchor>viewportToContents</anchor>
      <arglist>( int vx, int vy, int &amp; x, int &amp; y )</arglist>
    </member>
    <member kind="function">
      <name>viewportToContents</name>
      <anchor>viewportToContents-2</anchor>
      <arglist>( const QPoint &amp; vp )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Semaphore</name>
    <filename>q3semaphore.html</filename>
    <member kind="function">
      <name>Q3Semaphore</name>
      <anchor>Q3Semaphore</anchor>
      <arglist>( int maxcount )</arglist>
    </member>
    <member kind="function">
      <name>available</name>
      <anchor>available</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>total</name>
      <anchor>total</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tryAccess</name>
      <anchor>tryAccess</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int n )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ServerSocket</name>
    <filename>q3serversocket.html</filename>
    <member kind="function">
      <name>Q3ServerSocket</name>
      <anchor>Q3ServerSocket</anchor>
      <arglist>( Q_UINT16 port, int backlog = 1, QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ServerSocket</name>
      <anchor>Q3ServerSocket-2</anchor>
      <arglist>( const QHostAddress &amp; address, Q_UINT16 port, int backlog = 1, QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ServerSocket</name>
      <anchor>Q3ServerSocket-3</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>address</name>
      <anchor>address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newConnection</name>
      <anchor>newConnection</anchor>
      <arglist>( int socket )</arglist>
    </member>
    <member kind="function">
      <name>ok</name>
      <anchor>ok</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>port</name>
      <anchor>port</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSocket</name>
      <anchor>setSocket</anchor>
      <arglist>( int socket )</arglist>
    </member>
    <member kind="function">
      <name>socket</name>
      <anchor>socket</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>socketDevice</name>
      <anchor>socketDevice</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Shared</name>
    <filename>q3shared.html</filename>
    <member kind="function">
      <name>Q3Shared</name>
      <anchor>Q3Shared</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deref</name>
      <anchor>deref</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ref</name>
      <anchor>ref</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>block</name>
      <anchor>block</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>isBlocked</name>
      <anchor>isBlocked</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parameter</name>
      <anchor>parameter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setParameter</name>
      <anchor>setParameter</anchor>
      <arglist>( int value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Signal</name>
    <filename>q3signal.html</filename>
    <member kind="function">
      <name>Q3Signal</name>
      <anchor>Q3Signal</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activate</name>
      <anchor>activate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>connect</anchor>
      <arglist>( const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>disconnect</name>
      <anchor>disconnect</anchor>
      <arglist>( const QObject * receiver, const char * member = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SimpleRichText</name>
    <filename>q3simplerichtext.html</filename>
    <member kind="function">
      <name>Q3SimpleRichText</name>
      <anchor>Q3SimpleRichText</anchor>
      <arglist>( const QString &amp; text, const QFont &amp; fnt, const QString &amp; context = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3SimpleRichText</name>
      <anchor>Q3SimpleRichText-2</anchor>
      <arglist>( const QString &amp; text, const QFont &amp; fnt, const QString &amp; context, const Q3StyleSheet * sheet, const Q3MimeSourceFactory * factory, int pageBreak = -1, const QColor &amp; linkColor = Qt::blue, bool linkUnderline = true )</arglist>
    </member>
    <member kind="function">
      <name>adjustSize</name>
      <anchor>adjustSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>anchorAt</name>
      <anchor>anchorAt</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>context</name>
      <anchor>context</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter * p, int x, int y, const QRect &amp; clipRect, const QPalette &amp; pal, const QBrush * paper = 0 )</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw-2</anchor>
      <arglist>( QPainter * p, int x, int y, const QRegion &amp; clipRegion, const QPalette &amp; pal, const QBrush * paper = 0 )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inText</name>
      <anchor>inText</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultFont</name>
      <anchor>setDefaultFont</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( QPainter * p, int w )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth-2</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widthUsed</name>
      <anchor>widthUsed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Socket</name>
    <filename>q3socket.html</filename>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Socket</name>
      <anchor>Q3Socket</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>address</name>
      <anchor>address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at-2</anchor>
      <arglist>( Offset index )</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesToWrite</name>
      <anchor>bytesToWrite</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesWritten</name>
      <anchor>bytesWritten</anchor>
      <arglist>( int nbytes )</arglist>
    </member>
    <member kind="function">
      <name>canReadLine</name>
      <anchor>canReadLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearPendingData</name>
      <anchor>clearPendingData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectToHost</name>
      <anchor>connectToHost</anchor>
      <arglist>( const QString &amp; host, Q_UINT16 port )</arglist>
    </member>
    <member kind="function">
      <name>connected</name>
      <anchor>connected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectionClosed</name>
      <anchor>connectionClosed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>delayedCloseFinished</name>
      <anchor>delayedCloseFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>( int error )</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>flush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getch</name>
      <anchor>getch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hostFound</name>
      <anchor>hostFound</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>peerAddress</name>
      <anchor>peerAddress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peerName</name>
      <anchor>peerName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peerPort</name>
      <anchor>peerPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>port</name>
      <anchor>port</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>putch</name>
      <anchor>putch</anchor>
      <arglist>( int ch )</arglist>
    </member>
    <member kind="function">
      <name>readBufferSize</name>
      <anchor>readBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readData</name>
      <anchor>readData</anchor>
      <arglist>( char * data, qint64 maxlen )</arglist>
    </member>
    <member kind="function">
      <name>readyRead</name>
      <anchor>readyRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setReadBufferSize</name>
      <anchor>setReadBufferSize</anchor>
      <arglist>( Q_ULONG bufSize )</arglist>
    </member>
    <member kind="function">
      <name>setSocket</name>
      <anchor>setSocket</anchor>
      <arglist>( int socket )</arglist>
    </member>
    <member kind="function">
      <name>setSocketDevice</name>
      <anchor>setSocketDevice</anchor>
      <arglist>( Q3SocketDevice * device )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>socket</name>
      <anchor>socket</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>socketDevice</name>
      <anchor>socketDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ungetch</name>
      <anchor>ungetch</anchor>
      <arglist>( int ch )</arglist>
    </member>
    <member kind="function">
      <name>waitForMore</name>
      <anchor>waitForMore</anchor>
      <arglist>( int msecs, bool * timeout )</arglist>
    </member>
    <member kind="function">
      <name>waitForMore</name>
      <anchor>waitForMore-2</anchor>
      <arglist>( int msecs )</arglist>
    </member>
    <member kind="function">
      <name>writeData</name>
      <anchor>writeData</anchor>
      <arglist>( const char * data, qint64 len )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SocketDevice</name>
    <filename>q3socketdevice.html</filename>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Protocol</name>
      <anchor>Protocol-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3SocketDevice</name>
      <anchor>Q3SocketDevice</anchor>
      <arglist>( Type type = Stream )</arglist>
    </member>
    <member kind="function">
      <name>Q3SocketDevice</name>
      <anchor>Q3SocketDevice-2</anchor>
      <arglist>( Type type, Protocol protocol, int dummy )</arglist>
    </member>
    <member kind="function">
      <name>Q3SocketDevice</name>
      <anchor>Q3SocketDevice-3</anchor>
      <arglist>( int socket, Type type )</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>address</name>
      <anchor>address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addressReusable</name>
      <anchor>addressReusable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at-2</anchor>
      <arglist>( Offset offset )</arglist>
    </member>
    <member kind="function">
      <name>bind</name>
      <anchor>bind</anchor>
      <arglist>( const QHostAddress &amp; address, Q_UINT16 port )</arglist>
    </member>
    <member kind="function">
      <name>blocking</name>
      <anchor>blocking</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>connect</anchor>
      <arglist>( const QHostAddress &amp; addr, Q_UINT16 port )</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listen</name>
      <anchor>listen</anchor>
      <arglist>( int backlog )</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>( int mode )</arglist>
    </member>
    <member kind="function">
      <name>peerAddress</name>
      <anchor>peerAddress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peerPort</name>
      <anchor>peerPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>port</name>
      <anchor>port</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>protocol</name>
      <anchor>protocol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBlock</name>
      <anchor>readBlock</anchor>
      <arglist>( char * data, Q_ULONG maxlen )</arglist>
    </member>
    <member kind="function">
      <name>readData</name>
      <anchor>readData</anchor>
      <arglist>( char * data, qint64 maxlen )</arglist>
    </member>
    <member kind="function">
      <name>receiveBufferSize</name>
      <anchor>receiveBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendBufferSize</name>
      <anchor>sendBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAddressReusable</name>
      <anchor>setAddressReusable</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setBlocking</name>
      <anchor>setBlocking</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setError</name>
      <anchor>setError</anchor>
      <arglist>( Error err )</arglist>
    </member>
    <member kind="function">
      <name>setReceiveBufferSize</name>
      <anchor>setReceiveBufferSize</anchor>
      <arglist>( uint size )</arglist>
    </member>
    <member kind="function">
      <name>setSendBufferSize</name>
      <anchor>setSendBufferSize</anchor>
      <arglist>( uint size )</arglist>
    </member>
    <member kind="function">
      <name>setSocket</name>
      <anchor>setSocket</anchor>
      <arglist>( int socket, Type type )</arglist>
    </member>
    <member kind="function">
      <name>socket</name>
      <anchor>socket</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>waitForMore</name>
      <anchor>waitForMore</anchor>
      <arglist>( int msecs, bool * timeout = 0 )</arglist>
    </member>
    <member kind="function">
      <name>writeBlock</name>
      <anchor>writeBlock</anchor>
      <arglist>( const char * data, Q_ULONG len )</arglist>
    </member>
    <member kind="function">
      <name>writeBlock</name>
      <anchor>writeBlock-2</anchor>
      <arglist>( const char * data, Q_ULONG len, const QHostAddress &amp; host, Q_UINT16 port )</arglist>
    </member>
    <member kind="function">
      <name>writeData</name>
      <anchor>writeData</anchor>
      <arglist>( const char * data, qint64 len )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlCursor</name>
    <filename>q3sqlcursor.html</filename>
    <member kind="enum">
      <name>Mode</name>
      <anchor>Mode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3SqlCursor</name>
      <anchor>Q3SqlCursor</anchor>
      <arglist>( const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3SqlCursor</name>
      <anchor>Q3SqlCursor-2</anchor>
      <arglist>( const Q3SqlCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const Q3SqlFieldInfo &amp; fieldInfo )</arglist>
    </member>
    <member kind="function">
      <name>calculateField</name>
      <anchor>calculateField</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>canDelete</name>
      <anchor>canDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canInsert</name>
      <anchor>canInsert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canUpdate</name>
      <anchor>canUpdate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>del</name>
      <anchor>del</anchor>
      <arglist>( bool invalidate = true )</arglist>
    </member>
    <member kind="function">
      <name>del</name>
      <anchor>del-2</anchor>
      <arglist>( const QString &amp; filter, bool invalidate = true )</arglist>
    </member>
    <member kind="function">
      <name>editBuffer</name>
      <anchor>editBuffer</anchor>
      <arglist>( bool copy = false )</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>( const QString &amp; sql )</arglist>
    </member>
    <member kind="function">
      <name>filter</name>
      <anchor>filter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( const QStringList &amp; fieldNames )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index-2</anchor>
      <arglist>( const QString &amp; fieldName )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( int pos, const Q3SqlFieldInfo &amp; fieldInfo )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( bool invalidate = true )</arglist>
    </member>
    <member kind="function">
      <name>isCalculated</name>
      <anchor>isCalculated</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>isReadOnly</name>
      <anchor>isReadOnly</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTrimmed</name>
      <anchor>isTrimmed</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>mode</name>
      <anchor>mode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primaryIndex</name>
      <anchor>primaryIndex</anchor>
      <arglist>( bool setFromCursor = true )</arglist>
    </member>
    <member kind="function">
      <name>primeDelete</name>
      <anchor>primeDelete</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primeInsert</name>
      <anchor>primeInsert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primeUpdate</name>
      <anchor>primeUpdate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select</anchor>
      <arglist>( const QString &amp; filter, const QSqlIndex &amp; sort = QSqlIndex()</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select-3</anchor>
      <arglist>( const QSqlIndex &amp; sort )</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select-4</anchor>
      <arglist>( const QSqlIndex &amp; filter, const QSqlIndex &amp; sort )</arglist>
    </member>
    <member kind="function">
      <name>setCalculated</name>
      <anchor>setCalculated</anchor>
      <arglist>( const QString &amp; name, bool calculated )</arglist>
    </member>
    <member kind="function">
      <name>setFilter</name>
      <anchor>setFilter</anchor>
      <arglist>( const QString &amp; filter )</arglist>
    </member>
    <member kind="function">
      <name>setGenerated</name>
      <anchor>setGenerated</anchor>
      <arglist>( const QString &amp; name, bool generated )</arglist>
    </member>
    <member kind="function">
      <name>setGenerated</name>
      <anchor>setGenerated-2</anchor>
      <arglist>( int i, bool generated )</arglist>
    </member>
    <member kind="function">
      <name>setMode</name>
      <anchor>setMode</anchor>
      <arglist>( int mode )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const QString &amp; name, bool autopopulate = true )</arglist>
    </member>
    <member kind="function">
      <name>setPrimaryIndex</name>
      <anchor>setPrimaryIndex</anchor>
      <arglist>( const QSqlIndex &amp; idx )</arglist>
    </member>
    <member kind="function">
      <name>setSort</name>
      <anchor>setSort</anchor>
      <arglist>( const QSqlIndex &amp; sort )</arglist>
    </member>
    <member kind="function">
      <name>setTrimmed</name>
      <anchor>setTrimmed</anchor>
      <arglist>( const QString &amp; name, bool trim )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue-2</anchor>
      <arglist>( const QString &amp; name, const QVariant &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-2</anchor>
      <arglist>( QSqlRecord * rec, const QString &amp; prefix, const QString &amp; fieldSep, const QString &amp; sep )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-3</anchor>
      <arglist>( const QString &amp; prefix, QSqlField * field, const QString &amp; fieldSep )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-4</anchor>
      <arglist>( const QSqlIndex &amp; i, QSqlRecord * rec, const QString &amp; prefix, const QString &amp; fieldSep, const QString &amp; sep )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>( bool invalidate = true )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update-2</anchor>
      <arglist>( const QString &amp; filter, bool invalidate = true )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3SqlCursor &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlEditorFactory</name>
    <filename>q3sqleditorfactory.html</filename>
    <member kind="function">
      <name>Q3SqlEditorFactory</name>
      <anchor>Q3SqlEditorFactory</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>( QWidget * parent, const QVariant &amp; variant )</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor-2</anchor>
      <arglist>( QWidget * parent, const QSqlField * field )</arglist>
    </member>
    <member kind="function">
      <name>defaultFactory</name>
      <anchor>defaultFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>installDefaultFactory</name>
      <anchor>installDefaultFactory</anchor>
      <arglist>( Q3SqlEditorFactory * factory )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlFieldInfo</name>
    <filename>q3sqlfieldinfo.html</filename>
    <member kind="function">
      <name>Q3SqlFieldInfo</name>
      <anchor>Q3SqlFieldInfo</anchor>
      <arglist>( const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3SqlFieldInfo</name>
      <anchor>Q3SqlFieldInfo-2</anchor>
      <arglist>( const QSqlField &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>defaultValue</name>
      <anchor>defaultValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCalculated</name>
      <anchor>isCalculated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isGenerated</name>
      <anchor>isGenerated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRequired</name>
      <anchor>isRequired</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTrim</name>
      <anchor>isTrim</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>precision</name>
      <anchor>precision</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCalculated</name>
      <anchor>setCalculated</anchor>
      <arglist>( bool calculated )</arglist>
    </member>
    <member kind="function">
      <name>setGenerated</name>
      <anchor>setGenerated</anchor>
      <arglist>( bool generated )</arglist>
    </member>
    <member kind="function">
      <name>setTrim</name>
      <anchor>setTrim</anchor>
      <arglist>( bool trim )</arglist>
    </member>
    <member kind="function">
      <name>toField</name>
      <anchor>toField</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>type</anchor>
      <arglist> Q3SqlFieldInfo::type()</arglist>
    </member>
    <member kind="function">
      <name>typeID</name>
      <anchor>typeID</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3SqlFieldInfo &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlForm</name>
    <filename>q3sqlform.html</filename>
    <member kind="function">
      <name>Q3SqlForm</name>
      <anchor>Q3SqlForm</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearValues</name>
      <anchor>clearValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fieldToWidget</name>
      <anchor>fieldToWidget</anchor>
      <arglist>( QSqlField * field )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( QWidget * widget, const QString &amp; field )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( QWidget * widget, QSqlField * field )</arglist>
    </member>
    <member kind="function">
      <name>installPropertyMap</name>
      <anchor>installPropertyMap</anchor>
      <arglist>( Q3SqlPropertyMap * pmap )</arglist>
    </member>
    <member kind="function">
      <name>readField</name>
      <anchor>readField</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>readFields</name>
      <anchor>readFields</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( const QString &amp; field )</arglist>
    </member>
    <member kind="function">
      <name>setRecord</name>
      <anchor>setRecord</anchor>
      <arglist>( QSqlRecord * buf )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>widgetToField</name>
      <anchor>widgetToField</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>writeField</name>
      <anchor>writeField</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>writeFields</name>
      <anchor>writeFields</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlPropertyMap</name>
    <filename>q3sqlpropertymap.html</filename>
    <member kind="function">
      <name>Q3SqlPropertyMap</name>
      <anchor>Q3SqlPropertyMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultMap</name>
      <anchor>defaultMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; classname, const QString &amp; property )</arglist>
    </member>
    <member kind="function">
      <name>installDefaultMap</name>
      <anchor>installDefaultMap</anchor>
      <arglist>( Q3SqlPropertyMap * map )</arglist>
    </member>
    <member kind="function">
      <name>property</name>
      <anchor>property</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; classname )</arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>setProperty</anchor>
      <arglist>( QWidget * widget, const QVariant &amp; value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlRecordInfo</name>
    <filename>q3sqlrecordinfo.html</filename>
    <member kind="function">
      <name>Q3SqlRecordInfo</name>
      <anchor>Q3SqlRecordInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3SqlRecordInfo</name>
      <anchor>Q3SqlRecordInfo-2</anchor>
      <arglist>( const Q3SqlFieldInfoList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>Q3SqlRecordInfo</name>
      <anchor>Q3SqlRecordInfo-3</anchor>
      <arglist>( const QSqlRecord &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; fieldName )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; fieldName )</arglist>
    </member>
    <member kind="function">
      <name>toRecord</name>
      <anchor>toRecord</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SqlSelectCursor</name>
    <filename>q3sqlselectcursor.html</filename>
    <member kind="function">
      <name>Q3SqlSelectCursor</name>
      <anchor>Q3SqlSelectCursor</anchor>
      <arglist>( const QString &amp; query = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3SqlSelectCursor</name>
      <anchor>Q3SqlSelectCursor-2</anchor>
      <arglist>( const Q3SqlSelectCursor &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3StoredDrag</name>
    <filename>q3storeddrag.html</filename>
    <member kind="function">
      <name>Q3StoredDrag</name>
      <anchor>Q3StoredDrag</anchor>
      <arglist>( const char * mimeType, QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>encodedData</name>
      <anchor>encodedData</anchor>
      <arglist>( const char * format )</arglist>
    </member>
    <member kind="function">
      <name>setEncodedData</name>
      <anchor>setEncodedData</anchor>
      <arglist>( const QByteArray &amp; data )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3StrIList</name>
    <filename>q3strilist.html</filename>
    <member kind="function">
      <name>Q3StrIList</name>
      <anchor>Q3StrIList</anchor>
      <arglist>( bool deepCopies = true )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3StrList</name>
    <filename>q3strlist.html</filename>
    <member kind="function">
      <name>Q3StrList</name>
      <anchor>Q3StrList</anchor>
      <arglist>( bool deepCopies = true )</arglist>
    </member>
    <member kind="function">
      <name>Q3StrList</name>
      <anchor>Q3StrList-2</anchor>
      <arglist>( const Q3StrList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>Q3StrList</name>
      <anchor>Q3StrList-3</anchor>
      <arglist>( const QList&lt;QByteArray&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QList-ltQByteArray-gt</anchor>
      <arglist> QList&lt;QByteArray&gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3StrList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QList&lt;QByteArray&gt; &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3StrListIterator</name>
    <filename>q3strlistiterator.html</filename>
  </compound>
  <compound kind="class">
    <name>Q3StyleSheet</name>
    <filename>q3stylesheet.html</filename>
    <member kind="function">
      <name>Q3StyleSheet</name>
      <anchor>Q3StyleSheet</anchor>
      <arglist>( QObject * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>convertFromPlainText</name>
      <anchor>convertFromPlainText</anchor>
      <arglist>( const QString &amp; plain, Q3StyleSheetItem::WhiteSpaceMode mode = Q3StyleSheetItem::WhiteSpacePre )</arglist>
    </member>
    <member kind="function">
      <name>defaultSheet</name>
      <anchor>defaultSheet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>( const QString &amp; msg )</arglist>
    </member>
    <member kind="function">
      <name>escape</name>
      <anchor>escape</anchor>
      <arglist>( const QString &amp; plain )</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>mightBeRichText</name>
      <anchor>mightBeRichText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>scaleFont</name>
      <anchor>scaleFont</anchor>
      <arglist>( QFont &amp; font, int logicalSize )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultSheet</name>
      <anchor>setDefaultSheet</anchor>
      <arglist>( Q3StyleSheet * sheet )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3StyleSheetItem</name>
    <filename>q3stylesheetitem.html</filename>
    <member kind="enum">
      <name>DisplayMode</name>
      <anchor>DisplayMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ListStyle</name>
      <anchor>ListStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Margin</name>
      <anchor>Margin-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>VerticalAlignment</name>
      <anchor>VerticalAlignment-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WhiteSpaceMode</name>
      <anchor>WhiteSpaceMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3StyleSheetItem</name>
      <anchor>Q3StyleSheetItem</anchor>
      <arglist>( Q3StyleSheet * parent, const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>Q3StyleSheetItem</name>
      <anchor>Q3StyleSheetItem-2</anchor>
      <arglist>( const Q3StyleSheetItem &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>alignment</name>
      <anchor>alignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>allowedInContext</name>
      <anchor>allowedInContext</anchor>
      <arglist>( const Q3StyleSheetItem * s )</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contexts</name>
      <anchor>contexts</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>definesFontItalic</name>
      <anchor>definesFontItalic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>definesFontStrikeOut</name>
      <anchor>definesFontStrikeOut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>definesFontUnderline</name>
      <anchor>definesFontUnderline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>displayMode</name>
      <anchor>displayMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontFamily</name>
      <anchor>fontFamily</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontItalic</name>
      <anchor>fontItalic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontSize</name>
      <anchor>fontSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontStrikeOut</name>
      <anchor>fontStrikeOut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontUnderline</name>
      <anchor>fontUnderline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontWeight</name>
      <anchor>fontWeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAnchor</name>
      <anchor>isAnchor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineSpacing</name>
      <anchor>lineSpacing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listStyle</name>
      <anchor>listStyle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalFontSize</name>
      <anchor>logicalFontSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalFontSizeStep</name>
      <anchor>logicalFontSizeStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>margin</name>
      <anchor>margin</anchor>
      <arglist>( Margin m )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numberOfColumns</name>
      <anchor>numberOfColumns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selfNesting</name>
      <anchor>selfNesting</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( int f )</arglist>
    </member>
    <member kind="function">
      <name>setAnchor</name>
      <anchor>setAnchor</anchor>
      <arglist>( bool anc )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setContexts</name>
      <anchor>setContexts</anchor>
      <arglist>( const QString &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setDisplayMode</name>
      <anchor>setDisplayMode</anchor>
      <arglist>( DisplayMode m )</arglist>
    </member>
    <member kind="function">
      <name>setFontFamily</name>
      <anchor>setFontFamily</anchor>
      <arglist>( const QString &amp; fam )</arglist>
    </member>
    <member kind="function">
      <name>setFontItalic</name>
      <anchor>setFontItalic</anchor>
      <arglist>( bool italic )</arglist>
    </member>
    <member kind="function">
      <name>setFontSize</name>
      <anchor>setFontSize</anchor>
      <arglist>( int s )</arglist>
    </member>
    <member kind="function">
      <name>setFontStrikeOut</name>
      <anchor>setFontStrikeOut</anchor>
      <arglist>( bool strikeOut )</arglist>
    </member>
    <member kind="function">
      <name>setFontUnderline</name>
      <anchor>setFontUnderline</anchor>
      <arglist>( bool underline )</arglist>
    </member>
    <member kind="function">
      <name>setFontWeight</name>
      <anchor>setFontWeight</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>setListStyle</name>
      <anchor>setListStyle</anchor>
      <arglist>( ListStyle s )</arglist>
    </member>
    <member kind="function">
      <name>setLogicalFontSize</name>
      <anchor>setLogicalFontSize</anchor>
      <arglist>( int s )</arglist>
    </member>
    <member kind="function">
      <name>setLogicalFontSizeStep</name>
      <anchor>setLogicalFontSizeStep</anchor>
      <arglist>( int s )</arglist>
    </member>
    <member kind="function">
      <name>setMargin</name>
      <anchor>setMargin</anchor>
      <arglist>( Margin m, int v )</arglist>
    </member>
    <member kind="function">
      <name>setNumberOfColumns</name>
      <anchor>setNumberOfColumns</anchor>
      <arglist>( int ncols )</arglist>
    </member>
    <member kind="function">
      <name>setSelfNesting</name>
      <anchor>setSelfNesting</anchor>
      <arglist>( bool nesting )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalAlignment</name>
      <anchor>setVerticalAlignment</anchor>
      <arglist>( VerticalAlignment valign )</arglist>
    </member>
    <member kind="function">
      <name>setWhiteSpaceMode</name>
      <anchor>setWhiteSpaceMode</anchor>
      <arglist>( WhiteSpaceMode m )</arglist>
    </member>
    <member kind="function">
      <name>styleSheet</name>
      <anchor>styleSheet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>styleSheet</name>
      <anchor>styleSheet-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalAlignment</name>
      <anchor>verticalAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>whiteSpaceMode</name>
      <anchor>whiteSpaceMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3StyleSheetItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3SyntaxHighlighter</name>
    <filename>q3syntaxhighlighter.html</filename>
    <member kind="function">
      <name>Q3SyntaxHighlighter</name>
      <anchor>Q3SyntaxHighlighter</anchor>
      <arglist>( Q3TextEdit * textEdit )</arglist>
    </member>
    <member kind="function">
      <name>currentParagraph</name>
      <anchor>currentParagraph</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlightParagraph</name>
      <anchor>highlightParagraph</anchor>
      <arglist>( const QString &amp; text, int endStateOfLastPara )</arglist>
    </member>
    <member kind="function">
      <name>rehighlight</name>
      <anchor>rehighlight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( int start, int count, const QFont &amp; font, const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat-2</anchor>
      <arglist>( int start, int count, const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat-3</anchor>
      <arglist>( int start, int count, const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>textEdit</name>
      <anchor>textEdit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTabEnabled</name>
      <anchor>isTabEnabled-2</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>setTabEnabled</name>
      <anchor>setTabEnabled-2</anchor>
      <arglist>( const char * name, bool enable )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TabDialog</name>
    <filename>q3tabdialog.html</filename>
    <member kind="function">
      <name>Q3TabDialog</name>
      <anchor>Q3TabDialog</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, bool modal = false, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>aboutToShow</name>
      <anchor>aboutToShow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>addTab</anchor>
      <arglist>( QWidget * child, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>addTab-2</anchor>
      <arglist>( QWidget * child, const QIcon &amp; iconset, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>applyButtonPressed</name>
      <anchor>applyButtonPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cancelButtonPressed</name>
      <anchor>cancelButtonPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeTab</name>
      <anchor>changeTab</anchor>
      <arglist>( QWidget * w, const QIcon &amp; iconset, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>changeTab</name>
      <anchor>changeTab-2</anchor>
      <arglist>( QWidget * w, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>currentPage</name>
      <anchor>currentPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultButtonPressed</name>
      <anchor>defaultButtonPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasApplyButton</name>
      <anchor>hasApplyButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasCancelButton</name>
      <anchor>hasCancelButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasDefaultButton</name>
      <anchor>hasDefaultButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasHelpButton</name>
      <anchor>hasHelpButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasOkButton</name>
      <anchor>hasOkButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>helpButtonPressed</name>
      <anchor>helpButtonPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab</anchor>
      <arglist>( QWidget * child, const QString &amp; label, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab-2</anchor>
      <arglist>( QWidget * child, const QIcon &amp; iconset, const QString &amp; label, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>isTabEnabled</name>
      <anchor>isTabEnabled</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>removePage</name>
      <anchor>removePage</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setApplyButton</name>
      <anchor>setApplyButton</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setApplyButton</name>
      <anchor>setApplyButton-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCancelButton</name>
      <anchor>setCancelButton</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setCancelButton</name>
      <anchor>setCancelButton-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDefaultButton</name>
      <anchor>setDefaultButton</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultButton</name>
      <anchor>setDefaultButton-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setHelpButton</name>
      <anchor>setHelpButton</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setHelpButton</name>
      <anchor>setHelpButton-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOkButton</name>
      <anchor>setOkButton</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setOkButton</name>
      <anchor>setOkButton-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setTabBar</name>
      <anchor>setTabBar</anchor>
      <arglist>( QTabBar * tb )</arglist>
    </member>
    <member kind="function">
      <name>setTabEnabled</name>
      <anchor>setTabEnabled</anchor>
      <arglist>( QWidget * w, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>showPage</name>
      <anchor>showPage</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>tabBar</name>
      <anchor>tabBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tabLabel</name>
      <anchor>tabLabel</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Table</name>
    <filename>q3table.html</filename>
    <member kind="enum">
      <name>EditMode</name>
      <anchor>EditMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FocusStyle</name>
      <anchor>FocusStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionMode</name>
      <anchor>SelectionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3Table</name>
      <anchor>Q3Table</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3Table</name>
      <anchor>Q3Table-2</anchor>
      <arglist>( int numRows, int numCols, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activateNextCell</name>
      <anchor>activateNextCell</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addSelection</name>
      <anchor>addSelection</anchor>
      <arglist>( const Q3TableSelection &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>adjustColumn</name>
      <anchor>adjustColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>adjustRow</name>
      <anchor>adjustRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>beginEdit</name>
      <anchor>beginEdit</anchor>
      <arglist>( int row, int col, bool replace )</arglist>
    </member>
    <member kind="function">
      <name>cellGeometry</name>
      <anchor>cellGeometry</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>cellRect</name>
      <anchor>cellRect</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>cellWidget</name>
      <anchor>cellWidget</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>clearCell</name>
      <anchor>clearCell</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>clearCellWidget</name>
      <anchor>clearCellWidget</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>( bool repaint = true )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( int row, int col, int button, const QPoint &amp; mousePos )</arglist>
    </member>
    <member kind="function">
      <name>columnAt</name>
      <anchor>columnAt</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>columnClicked</name>
      <anchor>columnClicked</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>columnIndexChanged</name>
      <anchor>columnIndexChanged</anchor>
      <arglist>( int section, int fromIndex, int toIndex )</arglist>
    </member>
    <member kind="function">
      <name>columnPos</name>
      <anchor>columnPos</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>columnWidth</name>
      <anchor>columnWidth</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>columnWidthChanged</name>
      <anchor>columnWidthChanged</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>contentsDragEnterEvent</name>
      <anchor>contentsDragEnterEvent</anchor>
      <arglist>( QDragEnterEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsDragLeaveEvent</name>
      <anchor>contentsDragLeaveEvent</anchor>
      <arglist>( QDragLeaveEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsDragMoveEvent</name>
      <anchor>contentsDragMoveEvent</anchor>
      <arglist>( QDragMoveEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsDropEvent</name>
      <anchor>contentsDropEvent</anchor>
      <arglist>( QDropEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contextMenuRequested</name>
      <anchor>contextMenuRequested</anchor>
      <arglist>( int row, int col, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>( int row, int col, bool initFromCell )</arglist>
    </member>
    <member kind="function">
      <name>currEditCol</name>
      <anchor>currEditCol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currEditRow</name>
      <anchor>currEditRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>currentColumn</name>
      <anchor>currentColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentRow</name>
      <anchor>currentRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentSelection</name>
      <anchor>currentSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked</anchor>
      <arglist>( int row, int col, int button, const QPoint &amp; mousePos )</arglist>
    </member>
    <member kind="function">
      <name>dragEnabled</name>
      <anchor>dragEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dragObject</name>
      <anchor>dragObject</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawContents</name>
      <anchor>drawContents</anchor>
      <arglist>( QPainter * p, int cx, int cy, int cw, int ch )</arglist>
    </member>
    <member kind="function">
      <name>dropped</name>
      <anchor>dropped</anchor>
      <arglist>( QDropEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>editCell</name>
      <anchor>editCell</anchor>
      <arglist>( int row, int col, bool replace = false )</arglist>
    </member>
    <member kind="function">
      <name>editMode</name>
      <anchor>editMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endEdit</name>
      <anchor>endEdit</anchor>
      <arglist>( int row, int col, bool accept, bool replace )</arglist>
    </member>
    <member kind="function">
      <name>ensureCellVisible</name>
      <anchor>ensureCellVisible</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>hideColumn</name>
      <anchor>hideColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>hideRow</name>
      <anchor>hideRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>horizontalHeader</name>
      <anchor>horizontalHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>insertColumns</name>
      <anchor>insertColumns</anchor>
      <arglist>( int col, int count = 1 )</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int row, int count = 1 )</arglist>
    </member>
    <member kind="function">
      <name>insertWidget</name>
      <anchor>insertWidget</anchor>
      <arglist>( int row, int col, QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>isColumnHidden</name>
      <anchor>isColumnHidden</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>isColumnReadOnly</name>
      <anchor>isColumnReadOnly</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>isColumnSelected</name>
      <anchor>isColumnSelected</anchor>
      <arglist>( int col, bool full = false )</arglist>
    </member>
    <member kind="function">
      <name>isColumnStretchable</name>
      <anchor>isColumnStretchable</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>isEditing</name>
      <anchor>isEditing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRowHidden</name>
      <anchor>isRowHidden</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>isRowReadOnly</name>
      <anchor>isRowReadOnly</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>isRowSelected</name>
      <anchor>isRowSelected</anchor>
      <arglist>( int row, bool full = false )</arglist>
    </member>
    <member kind="function">
      <name>isRowStretchable</name>
      <anchor>isRowStretchable</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>paintCell</name>
      <anchor>paintCell</anchor>
      <arglist>( QPainter * p, int row, int col, const QRect &amp; cr, bool selected, const QColorGroup &amp; cg )</arglist>
    </member>
    <member kind="function">
      <name>paintCell</name>
      <anchor>paintCell-2</anchor>
      <arglist>( QPainter * p, int row, int col, const QRect &amp; cr, bool selected )</arglist>
    </member>
    <member kind="function">
      <name>paintEmptyArea</name>
      <anchor>paintEmptyArea</anchor>
      <arglist>( QPainter * p, int cx, int cy, int cw, int ch )</arglist>
    </member>
    <member kind="function">
      <name>paintFocus</name>
      <anchor>paintFocus</anchor>
      <arglist>( QPainter * p, const QRect &amp; cr )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( int row, int col, int button, const QPoint &amp; mousePos )</arglist>
    </member>
    <member kind="function">
      <name>removeColumn</name>
      <anchor>removeColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>removeColumns</name>
      <anchor>removeColumns</anchor>
      <arglist>( const Q3MemArray&lt;int&gt; &amp; cols )</arglist>
    </member>
    <member kind="function">
      <name>removeRow</name>
      <anchor>removeRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>removeRows</name>
      <anchor>removeRows</anchor>
      <arglist>( const Q3MemArray&lt;int&gt; &amp; rows )</arglist>
    </member>
    <member kind="function">
      <name>removeSelection</name>
      <anchor>removeSelection</anchor>
      <arglist>( const Q3TableSelection &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>removeSelection</name>
      <anchor>removeSelection-2</anchor>
      <arglist>( int num )</arglist>
    </member>
    <member kind="function">
      <name>repaintSelections</name>
      <anchor>repaintSelections</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resizeData</name>
      <anchor>resizeData</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>rowAt</name>
      <anchor>rowAt</anchor>
      <arglist>( int y )</arglist>
    </member>
    <member kind="function">
      <name>rowHeight</name>
      <anchor>rowHeight</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>rowHeightChanged</name>
      <anchor>rowHeightChanged</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>rowIndexChanged</name>
      <anchor>rowIndexChanged</anchor>
      <arglist>( int section, int fromIndex, int toIndex )</arglist>
    </member>
    <member kind="function">
      <name>rowPos</name>
      <anchor>rowPos</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>selectCells</name>
      <anchor>selectCells</anchor>
      <arglist>( int start_row, int start_col, int end_row, int end_col )</arglist>
    </member>
    <member kind="function">
      <name>selectColumn</name>
      <anchor>selectColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>selectRow</name>
      <anchor>selectRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>selection</name>
      <anchor>selection</anchor>
      <arglist>( int num )</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCellContentFromEditor</name>
      <anchor>setCellContentFromEditor</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>setCellWidget</name>
      <anchor>setCellWidget</anchor>
      <arglist>( int row, int col, QWidget * e )</arglist>
    </member>
    <member kind="function">
      <name>setColumnLabels</name>
      <anchor>setColumnLabels</anchor>
      <arglist>( const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>setColumnReadOnly</name>
      <anchor>setColumnReadOnly</anchor>
      <arglist>( int col, bool ro )</arglist>
    </member>
    <member kind="function">
      <name>setColumnStretchable</name>
      <anchor>setColumnStretchable</anchor>
      <arglist>( int col, bool stretch )</arglist>
    </member>
    <member kind="function">
      <name>setColumnWidth</name>
      <anchor>setColumnWidth</anchor>
      <arglist>( int col, int w )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentCell</name>
      <anchor>setCurrentCell</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>setDragEnabled</name>
      <anchor>setDragEnabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setEditMode</name>
      <anchor>setEditMode</anchor>
      <arglist>( EditMode mode, int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>setItem</name>
      <anchor>setItem</anchor>
      <arglist>( int row, int col, Q3TableItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setLeftMargin</name>
      <anchor>setLeftMargin</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( int row, int col, const QPixmap &amp; pix )</arglist>
    </member>
    <member kind="function">
      <name>setRowHeight</name>
      <anchor>setRowHeight</anchor>
      <arglist>( int row, int h )</arglist>
    </member>
    <member kind="function">
      <name>setRowLabels</name>
      <anchor>setRowLabels</anchor>
      <arglist>( const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>setRowReadOnly</name>
      <anchor>setRowReadOnly</anchor>
      <arglist>( int row, bool ro )</arglist>
    </member>
    <member kind="function">
      <name>setRowStretchable</name>
      <anchor>setRowStretchable</anchor>
      <arglist>( int row, bool stretch )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( int row, int col, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTopMargin</name>
      <anchor>setTopMargin</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>showColumn</name>
      <anchor>showColumn</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>showRow</name>
      <anchor>showRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>sortColumn</name>
      <anchor>sortColumn</anchor>
      <arglist>( int col, bool ascending = true, bool wholeRows = false )</arglist>
    </member>
    <member kind="function">
      <name>startDrag</name>
      <anchor>startDrag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>swapCells</name>
      <anchor>swapCells</anchor>
      <arglist>( int row1, int col1, int row2, int col2 )</arglist>
    </member>
    <member kind="function">
      <name>swapColumns</name>
      <anchor>swapColumns</anchor>
      <arglist>( int col1, int col2, bool swapHeader = false )</arglist>
    </member>
    <member kind="function">
      <name>swapRows</name>
      <anchor>swapRows</anchor>
      <arglist>( int row1, int row2, bool swapHeader = false )</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( Q3TableItem * i )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>updateCell</name>
      <anchor>updateCell</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>updateHeaderStates</name>
      <anchor>updateHeaderStates</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>verticalHeader</name>
      <anchor>verticalHeader</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TableItem</name>
    <filename>q3tableitem.html</filename>
    <member kind="enum">
      <name>EditType</name>
      <anchor>EditType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3TableItem</name>
      <anchor>Q3TableItem</anchor>
      <arglist>( Q3Table * table, EditType et )</arglist>
    </member>
    <member kind="function">
      <name>Q3TableItem</name>
      <anchor>Q3TableItem-2</anchor>
      <arglist>( Q3Table * table, EditType et, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>Q3TableItem</name>
      <anchor>Q3TableItem-3</anchor>
      <arglist>( Q3Table * table, EditType et, const QString &amp; text, const QPixmap &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>alignment</name>
      <anchor>alignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>col</name>
      <anchor>col</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colSpan</name>
      <anchor>colSpan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>editType</name>
      <anchor>editType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>isEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isReplaceable</name>
      <anchor>isReplaceable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * p, const QColorGroup &amp; cg, const QRect &amp; cr, bool selected )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowSpan</name>
      <anchor>rowSpan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rtti</name>
      <anchor>rtti</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCol</name>
      <anchor>setCol</anchor>
      <arglist>( int c )</arglist>
    </member>
    <member kind="function">
      <name>setContentFromEditor</name>
      <anchor>setContentFromEditor</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>setEnabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setReplaceable</name>
      <anchor>setReplaceable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setRow</name>
      <anchor>setRow</anchor>
      <arglist>( int r )</arglist>
    </member>
    <member kind="function">
      <name>setSpan</name>
      <anchor>setSpan</anchor>
      <arglist>( int rs, int cs )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>setWordWrap</name>
      <anchor>setWordWrap</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>table</name>
      <anchor>table</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wordWrap</name>
      <anchor>wordWrap</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TableSelection</name>
    <filename>q3tableselection.html</filename>
    <member kind="function">
      <name>Q3TableSelection</name>
      <anchor>Q3TableSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3TableSelection</name>
      <anchor>Q3TableSelection-2</anchor>
      <arglist>( int start_row, int start_col, int end_row, int end_col )</arglist>
    </member>
    <member kind="function">
      <name>anchorCol</name>
      <anchor>anchorCol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>anchorRow</name>
      <anchor>anchorRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomRow</name>
      <anchor>bottomRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>expandTo</name>
      <anchor>expandTo</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>init</name>
      <anchor>init</anchor>
      <arglist>( int row, int col )</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftCol</name>
      <anchor>leftCol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numCols</name>
      <anchor>numCols</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numRows</name>
      <anchor>numRows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightCol</name>
      <anchor>rightCol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topRow</name>
      <anchor>topRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const Q3TableSelection &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3TableSelection &amp; s )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TextBrowser</name>
    <filename>q3textbrowser.html</filename>
    <member kind="function">
      <name>Q3TextBrowser</name>
      <anchor>Q3TextBrowser</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>anchorClicked</name>
      <anchor>anchorClicked</anchor>
      <arglist>( const QString &amp; name, const QString &amp; link )</arglist>
    </member>
    <member kind="function">
      <name>backward</name>
      <anchor>backward</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backwardAvailable</name>
      <anchor>backwardAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>forward</name>
      <anchor>forward</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>forwardAvailable</name>
      <anchor>forwardAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted</anchor>
      <arglist>( const QString &amp; link )</arglist>
    </member>
    <member kind="function">
      <name>home</name>
      <anchor>home</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>linkClicked</name>
      <anchor>linkClicked</anchor>
      <arglist>( const QString &amp; link )</arglist>
    </member>
    <member kind="function">
      <name>reload</name>
      <anchor>reload</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText-2</anchor>
      <arglist>( const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>sourceChanged</name>
      <anchor>sourceChanged</anchor>
      <arglist>( const QString &amp; src )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TextDrag</name>
    <filename>q3textdrag.html</filename>
    <member kind="function">
      <name>Q3TextDrag</name>
      <anchor>Q3TextDrag</anchor>
      <arglist>( const QString &amp; text, QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3TextDrag</name>
      <anchor>Q3TextDrag-2</anchor>
      <arglist>( QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>canDecode</name>
      <anchor>canDecode</anchor>
      <arglist>( const QMimeSource * source )</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode</anchor>
      <arglist>( const QMimeSource * source, QString &amp; string )</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode-2</anchor>
      <arglist>( const QMimeSource * source, QString &amp; string, QString &amp; subtype )</arglist>
    </member>
    <member kind="function">
      <name>setSubtype</name>
      <anchor>setSubtype</anchor>
      <arglist>( const QString &amp; subtype )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TextEdit</name>
    <filename>q3textedit.html</filename>
    <member kind="enum">
      <name>CursorAction</name>
      <anchor>CursorAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>KeyboardAction</name>
      <anchor>KeyboardAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>VerticalAlignment</name>
      <anchor>VerticalAlignment-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WordWrap</name>
      <anchor>WordWrap-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WrapPolicy</name>
      <anchor>WrapPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextFormat</name>
      <anchor>textFormat</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3TextEdit</name>
      <anchor>Q3TextEdit</anchor>
      <arglist>( const QString &amp; text, const QString &amp; context = QString()</arglist>
    </member>
    <member kind="function">
      <name>Q3TextEdit</name>
      <anchor>Q3TextEdit-2</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>alignment</name>
      <anchor>alignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>anchorAt</name>
      <anchor>anchorAt</anchor>
      <arglist>( const QPoint &amp; pos, Qt::AnchorAttribute attr = Qt::AnchorHref )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>bold</name>
      <anchor>bold</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>charAt</name>
      <anchor>charAt</anchor>
      <arglist>( const QPoint &amp; pos, int * para )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearParagraphBackground</name>
      <anchor>clearParagraphBackground</anchor>
      <arglist>( int para )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( int para, int pos )</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>context</name>
      <anchor>context</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copyAvailable</name>
      <anchor>copyAvailable</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>createPopupMenu</name>
      <anchor>createPopupMenu</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>createPopupMenu</name>
      <anchor>createPopupMenu-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentAlignmentChanged</name>
      <anchor>currentAlignmentChanged</anchor>
      <arglist>( int a )</arglist>
    </member>
    <member kind="function">
      <name>currentColorChanged</name>
      <anchor>currentColorChanged</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>currentFont</name>
      <anchor>currentFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentFontChanged</name>
      <anchor>currentFontChanged</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>currentVerticalAlignmentChanged</name>
      <anchor>currentVerticalAlignmentChanged</anchor>
      <arglist>( VerticalAlignment a )</arglist>
    </member>
    <member kind="function">
      <name>cursorPositionChanged</name>
      <anchor>cursorPositionChanged-2</anchor>
      <arglist>( int para, int pos )</arglist>
    </member>
    <member kind="function">
      <name>cut</name>
      <anchor>cut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>del</name>
      <anchor>del</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doKeyboardAction</name>
      <anchor>doKeyboardAction</anchor>
      <arglist>( KeyboardAction action )</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked</anchor>
      <arglist>( int para, int pos )</arglist>
    </member>
    <member kind="function">
      <name>ensureCursorVisible</name>
      <anchor>ensureCursorVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>family</name>
      <anchor>family</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; expr, bool cs, bool wo, bool forward = true, int * para = 0, int * index = 0 )</arglist>
    </member>
    <member kind="function">
      <name>focusNextPrevChild</name>
      <anchor>focusNextPrevChild</anchor>
      <arglist>( bool n )</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getCursorPosition</name>
      <anchor>getCursorPosition</anchor>
      <arglist>( int * para, int * index )</arglist>
    </member>
    <member kind="function">
      <name>getSelection</name>
      <anchor>getSelection</anchor>
      <arglist>( int * paraFrom, int * indexFrom, int * paraTo, int * indexTo, int selNum = 0 )</arglist>
    </member>
    <member kind="function">
      <name>heightForWidth</name>
      <anchor>heightForWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; text, uint insertionFlags = CheckNewLines | RemoveSelected )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( const QString &amp; text, bool indent, bool checkNewLine = true, bool removeSelected = true )</arglist>
    </member>
    <member kind="function">
      <name>insertAt</name>
      <anchor>insertAt</anchor>
      <arglist>( const QString &amp; text, int para, int index )</arglist>
    </member>
    <member kind="function">
      <name>insertParagraph</name>
      <anchor>insertParagraph</anchor>
      <arglist>( const QString &amp; text, int para )</arglist>
    </member>
    <member kind="function">
      <name>isRedoAvailable</name>
      <anchor>isRedoAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isUndoAvailable</name>
      <anchor>isUndoAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>italic</name>
      <anchor>italic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>lineOfChar</name>
      <anchor>lineOfChar</anchor>
      <arglist>( int para, int index )</arglist>
    </member>
    <member kind="function">
      <name>lines</name>
      <anchor>lines</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>linesOfParagraph</name>
      <anchor>linesOfParagraph</anchor>
      <arglist>( int para )</arglist>
    </member>
    <member kind="function">
      <name>mimeSourceFactory</name>
      <anchor>mimeSourceFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>modificationChanged</name>
      <anchor>modificationChanged</anchor>
      <arglist>( bool m )</arglist>
    </member>
    <member kind="function">
      <name>moveCursor</name>
      <anchor>moveCursor</anchor>
      <arglist>( CursorAction action, bool select )</arglist>
    </member>
    <member kind="function">
      <name>paragraphAt</name>
      <anchor>paragraphAt</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>paragraphBackgroundColor</name>
      <anchor>paragraphBackgroundColor</anchor>
      <arglist>( int para )</arglist>
    </member>
    <member kind="function">
      <name>paragraphLength</name>
      <anchor>paragraphLength</anchor>
      <arglist>( int para )</arglist>
    </member>
    <member kind="function">
      <name>paragraphRect</name>
      <anchor>paragraphRect</anchor>
      <arglist>( int para )</arglist>
    </member>
    <member kind="function">
      <name>paragraphs</name>
      <anchor>paragraphs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paste</name>
      <anchor>paste</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pasteSubType</name>
      <anchor>pasteSubType</anchor>
      <arglist>( const QByteArray &amp; subtype )</arglist>
    </member>
    <member kind="function">
      <name>placeCursor</name>
      <anchor>placeCursor</anchor>
      <arglist>( const QPoint &amp; pos, Q3TextCursor * c = 0 )</arglist>
    </member>
    <member kind="function">
      <name>pointSize</name>
      <anchor>pointSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>redo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redoAvailable</name>
      <anchor>redoAvailable</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>removeParagraph</name>
      <anchor>removeParagraph</anchor>
      <arglist>( int para )</arglist>
    </member>
    <member kind="function">
      <name>removeSelectedText</name>
      <anchor>removeSelectedText</anchor>
      <arglist>( int selNum = 0 )</arglist>
    </member>
    <member kind="function">
      <name>removeSelection</name>
      <anchor>removeSelection</anchor>
      <arglist>( int selNum = 0 )</arglist>
    </member>
    <member kind="function">
      <name>repaintChanged</name>
      <anchor>repaintChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>returnPressed</name>
      <anchor>returnPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollToAnchor</name>
      <anchor>scrollToAnchor</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>scrollToBottom</name>
      <anchor>scrollToBottom</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>( bool select = true )</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( int a )</arglist>
    </member>
    <member kind="function">
      <name>setBold</name>
      <anchor>setBold</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentFont</name>
      <anchor>setCurrentFont</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setCursorPosition</name>
      <anchor>setCursorPosition</anchor>
      <arglist>( int para, int index )</arglist>
    </member>
    <member kind="function">
      <name>setFamily</name>
      <anchor>setFamily</anchor>
      <arglist>( const QString &amp; fontFamily )</arglist>
    </member>
    <member kind="function">
      <name>setItalic</name>
      <anchor>setItalic</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setMimeSourceFactory</name>
      <anchor>setMimeSourceFactory</anchor>
      <arglist>( Q3MimeSourceFactory * factory )</arglist>
    </member>
    <member kind="function">
      <name>setParagraphBackgroundColor</name>
      <anchor>setParagraphBackgroundColor</anchor>
      <arglist>( int para, const QColor &amp; bg )</arglist>
    </member>
    <member kind="function">
      <name>setPointSize</name>
      <anchor>setPointSize</anchor>
      <arglist>( int s )</arglist>
    </member>
    <member kind="function">
      <name>setSelection</name>
      <anchor>setSelection</anchor>
      <arglist>( int paraFrom, int indexFrom, int paraTo, int indexTo, int selNum = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setSelectionAttributes</name>
      <anchor>setSelectionAttributes</anchor>
      <arglist>( int selNum, const QColor &amp; back, bool invertText )</arglist>
    </member>
    <member kind="function">
      <name>setStyleSheet</name>
      <anchor>setStyleSheet</anchor>
      <arglist>( Q3StyleSheet * styleSheet )</arglist>
    </member>
    <member kind="function">
      <name>setUnderline</name>
      <anchor>setUnderline</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalAlignment</name>
      <anchor>setVerticalAlignment</anchor>
      <arglist>( VerticalAlignment a )</arglist>
    </member>
    <member kind="function">
      <name>styleSheet</name>
      <anchor>styleSheet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sync</name>
      <anchor>sync</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>syntaxHighlighter</name>
      <anchor>syntaxHighlighter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textChanged</name>
      <anchor>textChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textCursor</name>
      <anchor>textCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>underline</name>
      <anchor>underline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>undo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undoAvailable</name>
      <anchor>undoAvailable</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>verticalAlignment</name>
      <anchor>verticalAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>zoomIn</name>
      <anchor>zoomIn</anchor>
      <arglist>( int range )</arglist>
    </member>
    <member kind="function">
      <name>zoomIn</name>
      <anchor>zoomIn-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>zoomOut</name>
      <anchor>zoomOut</anchor>
      <arglist>( int range )</arglist>
    </member>
    <member kind="function">
      <name>zoomOut</name>
      <anchor>zoomOut-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>zoomTo</name>
      <anchor>zoomTo</anchor>
      <arglist>( int size )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3TextView</name>
    <filename>q3textview.html</filename>
  </compound>
  <compound kind="class">
    <name>Q3TimeEdit</name>
    <filename>q3timeedit.html</filename>
    <member kind="enum">
      <name>Display</name>
      <anchor>Display-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3TimeEdit</name>
      <anchor>Q3TimeEdit</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3TimeEdit</name>
      <anchor>Q3TimeEdit-2</anchor>
      <arglist>( const QTime &amp; time, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>sectionFormattedText</name>
      <anchor>sectionFormattedText</anchor>
      <arglist>( int sec )</arglist>
    </member>
    <member kind="function">
      <name>separator</name>
      <anchor>separator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHour</name>
      <anchor>setHour</anchor>
      <arglist>( int h )</arglist>
    </member>
    <member kind="function">
      <name>setMinute</name>
      <anchor>setMinute</anchor>
      <arglist>( int m )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( const QTime &amp; min, const QTime &amp; max )</arglist>
    </member>
    <member kind="function">
      <name>setSecond</name>
      <anchor>setSecond</anchor>
      <arglist>( int s )</arglist>
    </member>
    <member kind="function">
      <name>setSeparator</name>
      <anchor>setSeparator</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( const QTime &amp; time )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ToolBar</name>
    <filename>q3toolbar.html</filename>
    <member kind="function">
      <name>Q3ToolBar</name>
      <anchor>Q3ToolBar</anchor>
      <arglist>( const QString &amp; label, Q3MainWindow * parent, Qt::ToolBarDock dock = Qt::DockTop, bool newLine = false, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ToolBar</name>
      <anchor>Q3ToolBar-2</anchor>
      <arglist>( const QString &amp; label, Q3MainWindow * mainWindow, QWidget * parent, bool newLine = false, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3ToolBar</name>
      <anchor>Q3ToolBar-3</anchor>
      <arglist>( Q3MainWindow * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>addSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mainWindow</name>
      <anchor>mainWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setStretchableWidget</name>
      <anchor>setStretchableWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setFilenames</name>
      <anchor>setFilenamesx</anchor>
      <arglist>( const QStringList &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3UriDrag</name>
    <filename>q3uridrag.html</filename>
    <member kind="function">
      <name>Q3UriDrag</name>
      <anchor>Q3UriDrag</anchor>
      <arglist>( const Q3StrList &amp; uris, QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3UriDrag</name>
      <anchor>Q3UriDrag-2</anchor>
      <arglist>( QWidget * dragSource = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>canDecode</name>
      <anchor>canDecode</anchor>
      <arglist>( const QMimeSource * source )</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode</anchor>
      <arglist>( const QMimeSource * source, Q3StrList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>decodeLocalFiles</name>
      <anchor>decodeLocalFiles</anchor>
      <arglist>( const QMimeSource * source, QStringList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>decodeToUnicodeUris</name>
      <anchor>decodeToUnicodeUris</anchor>
      <arglist>( const QMimeSource * source, QStringList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>localFileToUri</name>
      <anchor>localFileToUri</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>setFileNames</name>
      <anchor>setFileNames</anchor>
      <arglist>( const QStringList &amp; filenames )</arglist>
    </member>
    <member kind="function">
      <name>setFileNames</name>
      <anchor>setFileNames-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setFilenames</name>
      <anchor>setFilenames-2x</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setUnicodeUris</name>
      <anchor>setUnicodeUris</anchor>
      <arglist>( const QStringList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>setUris</name>
      <anchor>setUris</anchor>
      <arglist>( const QList&lt;QByteArray&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>unicodeUriToUri</name>
      <anchor>unicodeUriToUri</anchor>
      <arglist>( const QString &amp; string )</arglist>
    </member>
    <member kind="function">
      <name>uriToLocalFile</name>
      <anchor>uriToLocalFile</anchor>
      <arglist>( const char * string )</arglist>
    </member>
    <member kind="function">
      <name>uriToUnicodeUri</name>
      <anchor>uriToUnicodeUri</anchor>
      <arglist>( const char * string )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Url</name>
    <filename>q3url.html</filename>
    <member kind="function">
      <name>Q3Url</name>
      <anchor>Q3Url</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3Url</name>
      <anchor>Q3Url-2</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>Q3Url</name>
      <anchor>Q3Url-3</anchor>
      <arglist>( const Q3Url &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>Q3Url</name>
      <anchor>Q3Url-4</anchor>
      <arglist>( const Q3Url &amp; url, const QString &amp; relUrl, bool checkSlash = false )</arglist>
    </member>
    <member kind="function">
      <name>addPath</name>
      <anchor>addPath</anchor>
      <arglist>( const QString &amp; pa )</arglist>
    </member>
    <member kind="function">
      <name>cdUp</name>
      <anchor>cdUp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode</anchor>
      <arglist>( QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>dirPath</name>
      <anchor>dirPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>encode</name>
      <anchor>encode</anchor>
      <arglist>( QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>encodedPathAndQuery</name>
      <anchor>encodedPathAndQuery</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasHost</name>
      <anchor>hasHost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPassword</name>
      <anchor>hasPassword</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPath</name>
      <anchor>hasPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPort</name>
      <anchor>hasPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasRef</name>
      <anchor>hasRef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasUser</name>
      <anchor>hasUser</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>host</name>
      <anchor>host</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLocalFile</name>
      <anchor>isLocalFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRelativeUrl</name>
      <anchor>isRelativeUrl</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parse</name>
      <anchor>parse</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>password</name>
      <anchor>password</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>path</anchor>
      <arglist>( bool correct = true )</arglist>
    </member>
    <member kind="function">
      <name>port</name>
      <anchor>port</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>protocol</name>
      <anchor>protocol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>query</name>
      <anchor>query</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ref</name>
      <anchor>ref</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEncodedPathAndQuery</name>
      <anchor>setEncodedPathAndQuery</anchor>
      <arglist>( const QString &amp; pathAndQuery )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setHost</name>
      <anchor>setHost</anchor>
      <arglist>( const QString &amp; host )</arglist>
    </member>
    <member kind="function">
      <name>setPassword</name>
      <anchor>setPassword</anchor>
      <arglist>( const QString &amp; pass )</arglist>
    </member>
    <member kind="function">
      <name>setPath</name>
      <anchor>setPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>setPort</name>
      <anchor>setPort</anchor>
      <arglist>( int port )</arglist>
    </member>
    <member kind="function">
      <name>setProtocol</name>
      <anchor>setProtocol</anchor>
      <arglist>( const QString &amp; protocol )</arglist>
    </member>
    <member kind="function">
      <name>setQuery</name>
      <anchor>setQuery</anchor>
      <arglist>( const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>setRef</name>
      <anchor>setRef</anchor>
      <arglist>( const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>setUser</name>
      <anchor>setUser</anchor>
      <arglist>( const QString &amp; user )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( bool encodedPath = false, bool forcePrependProtocol = true )</arglist>
    </member>
    <member kind="function">
      <name>user</name>
      <anchor>user</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QString</anchor>
      <arglist> QString()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3Url &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3Url &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3UrlOperator</name>
    <filename>q3urloperator.html</filename>
    <member kind="function">
      <name>Q3UrlOperator</name>
      <anchor>Q3UrlOperator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3UrlOperator</name>
      <anchor>Q3UrlOperator-2</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>Q3UrlOperator</name>
      <anchor>Q3UrlOperator-3</anchor>
      <arglist>( const Q3UrlOperator &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>Q3UrlOperator</name>
      <anchor>Q3UrlOperator-4</anchor>
      <arglist>( const Q3UrlOperator &amp; url, const QString &amp; relUrl, bool checkSlash = false )</arglist>
    </member>
    <member kind="function">
      <name>clearEntries</name>
      <anchor>clearEntries</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectionStateChanged</name>
      <anchor>connectionStateChanged</anchor>
      <arglist>( int state, const QString &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>( const QString &amp; from, const QString &amp; to, bool move = false, bool toPath = true )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy-2</anchor>
      <arglist>( const QStringList &amp; files, const QString &amp; dest, bool move = false )</arglist>
    </member>
    <member kind="function">
      <name>createdDirectory</name>
      <anchor>createdDirectory</anchor>
      <arglist>( const QUrlInfo &amp; i, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QByteArray &amp; data, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>dataTransferProgress</name>
      <anchor>dataTransferProgress</anchor>
      <arglist>( int bytesDone, int bytesTotal, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>deleteNetworkProtocol</name>
      <anchor>deleteNetworkProtocol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>get</name>
      <anchor>get</anchor>
      <arglist>( const QString &amp; location = QString()</arglist>
    </member>
    <member kind="function">
      <name>getNetworkProtocol</name>
      <anchor>getNetworkProtocol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>info</name>
      <anchor>info</anchor>
      <arglist>( const QString &amp; entry )</arglist>
    </member>
    <member kind="function">
      <name>isDir</name>
      <anchor>isDir</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>itemChanged</name>
      <anchor>itemChanged</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>listChildren</name>
      <anchor>listChildren</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir</anchor>
      <arglist>( const QString &amp; dirname )</arglist>
    </member>
    <member kind="function">
      <name>nameFilter</name>
      <anchor>nameFilter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newChildren</name>
      <anchor>newChildren</anchor>
      <arglist>( const Q3ValueList&lt;QUrlInfo&gt; &amp; i, Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>put</name>
      <anchor>put</anchor>
      <arglist>( const QByteArray &amp; data, const QString &amp; location = QString()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>removed</name>
      <anchor>removed</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>( const QString &amp; oldname, const QString &amp; newname )</arglist>
    </member>
    <member kind="function">
      <name>setNameFilter</name>
      <anchor>setNameFilter</anchor>
      <arglist>( const QString &amp; nameFilter )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( Q3NetworkOperation * op )</arglist>
    </member>
    <member kind="function">
      <name>startedNextCopy</name>
      <anchor>startedNextCopy</anchor>
      <arglist>( const Q3PtrList&lt;Q3NetworkOperation&gt; &amp; lst )</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>stop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3UrlOperator &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ValueList</name>
    <filename>q3valuelist.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_pointer</name>
      <anchor>const_pointer-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_reference</name>
      <anchor>const_reference-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-typedefx</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pointer</name>
      <anchor>pointer-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>reference</name>
      <anchor>reference-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>size_type</name>
      <anchor>size_type-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>value_type</name>
      <anchor>value_type-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Q3ValueList</name>
      <anchor>Q3ValueList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueList</name>
      <anchor>Q3ValueList-2</anchor>
      <arglist>( const Q3ValueList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueList</name>
      <anchor>Q3ValueList-3</anchor>
      <arglist>( const QLinkedList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueList</name>
      <anchor>Q3ValueList-4</anchor>
      <arglist>( const QList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueList</name>
      <anchor>Q3ValueList-5</anchor>
      <arglist>( const std::list&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::size_type i )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at-2</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::size_type i )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>fromLast</name>
      <anchor>fromLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromLast</name>
      <anchor>fromLast-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::Iterator it, const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::Iterator pos, Q3ValueList&lt;T&gt;::size_type n, const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::Iterator it )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QList-ltT-gt</anchor>
      <arglist> QList&lt;T&gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const Q3ValueList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const Q3ValueList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const Q3ValueList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-2</anchor>
      <arglist>( const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( const T &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3ValueList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-3</anchor>
      <arglist>( const std::list&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const Q3ValueList&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const std::list&lt;T&gt; &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::size_type i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( Q3ValueList&lt;T&gt;::size_type i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ValueListConstIterator</name>
    <filename>q3valuelistconstiterator.html</filename>
    <member kind="function">
      <name>Q3ValueListConstIterator</name>
      <anchor>Q3ValueListConstIterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueListConstIterator</name>
      <anchor>Q3ValueListConstIterator-2</anchor>
      <arglist>( const Q3ValueListConstIterator &amp; o )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueListConstIterator</name>
      <anchor>Q3ValueListConstIterator-3</anchor>
      <arglist>( const QLinkedList&lt;T&gt;::const_iterator &amp; o )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueListConstIterator</name>
      <anchor>Q3ValueListConstIterator-4</anchor>
      <arglist>( const QLinkedList&lt;T&gt;::iterator &amp; o )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ValueListIterator</name>
    <filename>q3valuelistiterator.html</filename>
    <member kind="function">
      <name>Q3ValueListIterator</name>
      <anchor>Q3ValueListIterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueListIterator</name>
      <anchor>Q3ValueListIterator-2</anchor>
      <arglist>( const Q3ValueListIterator &amp; o )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueListIterator</name>
      <anchor>Q3ValueListIterator-3</anchor>
      <arglist>( const QLinkedList&lt;T&gt;::iterator &amp; o )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ValueStack</name>
    <filename>q3valuestack.html</filename>
    <member kind="function">
      <name>Q3ValueStack</name>
      <anchor>Q3ValueStack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop</name>
      <anchor>pop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>push</name>
      <anchor>push</anchor>
      <arglist>( const T &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top-2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3ValueVector</name>
    <filename>q3valuevector.html</filename>
    <member kind="function">
      <name>Q3ValueVector</name>
      <anchor>Q3ValueVector</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueVector</name>
      <anchor>Q3ValueVector-2</anchor>
      <arglist>( const Q3ValueVector&lt;T&gt; &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueVector</name>
      <anchor>Q3ValueVector-3</anchor>
      <arglist>( QVector&lt;T&gt;::size_type n, const T &amp; val = T()</arglist>
    </member>
    <member kind="function">
      <name>Q3ValueVector</name>
      <anchor>Q3ValueVector-4</anchor>
      <arglist>( const std::vector&lt;T&gt; &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( int i, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at-2</anchor>
      <arglist>( int i, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int n, const T &amp; val = T()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const Q3ValueVector&lt;T&gt; &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const std::vector&lt;T&gt; &amp; v )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3VBox</name>
    <filename>q3vbox.html</filename>
    <member kind="function">
      <name>Q3VBox</name>
      <anchor>Q3VBox</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3VButtonGroup</name>
    <filename>q3vbuttongroup.html</filename>
    <member kind="function">
      <name>Q3VButtonGroup</name>
      <anchor>Q3VButtonGroup</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Q3VButtonGroup</name>
      <anchor>Q3VButtonGroup-2</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3WhatsThis</name>
    <filename>q3whatsthis.html</filename>
    <member kind="function">
      <name>Q3WhatsThis</name>
      <anchor>Q3WhatsThis</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( QWidget * widget, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( const QString &amp; href )</arglist>
    </member>
    <member kind="function">
      <name>display</name>
      <anchor>display</anchor>
      <arglist>( const QString &amp; text, const QPoint &amp; pos = QCursor::pos()</arglist>
    </member>
    <member kind="function">
      <name>enterWhatsThisMode</name>
      <anchor>enterWhatsThisMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inWhatsThisMode</name>
      <anchor>inWhatsThisMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leaveWhatsThisMode</name>
      <anchor>leaveWhatsThisMode</anchor>
      <arglist>( const QString &amp; text = QString()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>whatsThisButton</name>
      <anchor>whatsThisButton</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3WidgetStack</name>
    <filename>q3widgetstack.html</filename>
    <member kind="function">
      <name>Q3WidgetStack</name>
      <anchor>Q3WidgetStack</anchor>
      <arglist>( QWidget * parent, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>aboutToShow</name>
      <anchor>aboutToShow</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>aboutToShow</name>
      <anchor>aboutToShow-2</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * w, int id = -1 )</arglist>
    </member>
    <member kind="function">
      <name>id</name>
      <anchor>id</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>raiseWidget</name>
      <anchor>raiseWidget</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>raiseWidget</name>
      <anchor>raiseWidget-2</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>removeWidget</name>
      <anchor>removeWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setChildGeometries</name>
      <anchor>setChildGeometries</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibleWidget</name>
      <anchor>visibleWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>setFinish</name>
      <anchor>setFinish</anchor>
      <arglist>( QWidget * widget, bool finish )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Q3Wizard</name>
    <filename>q3wizard.html</filename>
    <member kind="function">
      <name>Q3Wizard</name>
      <anchor>Q3Wizard</anchor>
      <arglist>( QWidget * parent = 0, const char * name = 0, bool modal = false, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addPage</name>
      <anchor>addPage</anchor>
      <arglist>( QWidget * page, const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>appropriate</name>
      <anchor>appropriate</anchor>
      <arglist>( QWidget * page )</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backButton</name>
      <anchor>backButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cancelButton</name>
      <anchor>cancelButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentPage</name>
      <anchor>currentPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>finishButton</name>
      <anchor>finishButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>help</name>
      <anchor>help</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>helpButton</name>
      <anchor>helpButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>helpClicked</name>
      <anchor>helpClicked</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( QWidget * page )</arglist>
    </member>
    <member kind="function">
      <name>insertPage</name>
      <anchor>insertPage</anchor>
      <arglist>( QWidget * page, const QString &amp; title, int index )</arglist>
    </member>
    <member kind="function">
      <name>layOutButtonRow</name>
      <anchor>layOutButtonRow</anchor>
      <arglist>( QHBoxLayout * layout )</arglist>
    </member>
    <member kind="function">
      <name>layOutTitleRow</name>
      <anchor>layOutTitleRow</anchor>
      <arglist>( QHBoxLayout * layout, const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextButton</name>
      <anchor>nextButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>page</name>
      <anchor>page</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>pageCount</name>
      <anchor>pageCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removePage</name>
      <anchor>removePage</anchor>
      <arglist>( QWidget * page )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>( const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>setAppropriate</name>
      <anchor>setAppropriate</anchor>
      <arglist>( QWidget * page, bool appropriate )</arglist>
    </member>
    <member kind="function">
      <name>setBackEnabled</name>
      <anchor>setBackEnabled</anchor>
      <arglist>( QWidget * page, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setFinishEnabled</name>
      <anchor>setFinishEnabled</anchor>
      <arglist>( QWidget * page, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setHelpEnabled</name>
      <anchor>setHelpEnabled</anchor>
      <arglist>( QWidget * page, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setNextEnabled</name>
      <anchor>setNextEnabled</anchor>
      <arglist>( QWidget * page, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setTitle</name>
      <anchor>setTitle</anchor>
      <arglist>( QWidget * page, const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>showPage</name>
      <anchor>showPage</anchor>
      <arglist>( QWidget * page )</arglist>
    </member>
    <member kind="function">
      <name>title</name>
      <anchor>title</anchor>
      <arglist>( QWidget * page )</arglist>
    </member>
    <member kind="function">
      <name>QAbstractButton</name>
      <anchor>QAbstractButton-2</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>accel</name>
      <anchor>accel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOn</name>
      <anchor>isOn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isToggleButton</name>
      <anchor>isToggleButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAccel</name>
      <anchor>setAccel</anchor>
      <arglist>( const QKeySequence &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setIconSet</name>
      <anchor>setIconSet</anchor>
      <arglist>( const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setOn</name>
      <anchor>setOn</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setToggleButton</name>
      <anchor>setToggleButton</anchor>
      <arglist>( bool b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractButton</name>
    <filename>qabstractbutton.html</filename>
    <member kind="function">
      <name>QAbstractButton</name>
      <anchor>QAbstractButton</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>animateClick</name>
      <anchor>animateClick</anchor>
      <arglist>( int msec = 100 )</arglist>
    </member>
    <member kind="function">
      <name>checkStateSet</name>
      <anchor>checkStateSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>click</name>
      <anchor>click</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( bool checked = false )</arglist>
    </member>
    <member kind="function">
      <name>group</name>
      <anchor>group</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hitButton</name>
      <anchor>hitButton</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>nextCheckState</name>
      <anchor>nextCheckState</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>released</name>
      <anchor>released</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toggle</name>
      <anchor>toggle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toggled</name>
      <anchor>toggled</anchor>
      <arglist>( bool checked )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractEventDispatcher</name>
    <filename>qabstracteventdispatcher.html</filename>
    <member kind="function">
      <name>EventFilter</name>
      <anchor>EventFilter-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TimerInfo</name>
      <anchor>TimerInfo-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractEventDispatcher</name>
      <anchor>QAbstractEventDispatcher</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>aboutToBlock</name>
      <anchor>aboutToBlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>awake</name>
      <anchor>awake</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filterEvent</name>
      <anchor>filterEvent</anchor>
      <arglist>( void * message )</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>flush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPendingEvents</name>
      <anchor>hasPendingEvents</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>instance</name>
      <anchor>instance</anchor>
      <arglist>( QThread * thread = 0 )</arglist>
    </member>
    <member kind="function">
      <name>interrupt</name>
      <anchor>interrupt</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processEvents</name>
      <anchor>processEvents</anchor>
      <arglist>( QEventLoop::ProcessEventsFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>registerSocketNotifier</name>
      <anchor>registerSocketNotifier</anchor>
      <arglist>( QSocketNotifier * notifier )</arglist>
    </member>
    <member kind="function">
      <name>registerTimer</name>
      <anchor>registerTimer</anchor>
      <arglist>( int interval, QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>registerTimer</name>
      <anchor>registerTimer-2</anchor>
      <arglist>( int timerId, int interval, QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>registeredTimers</name>
      <anchor>registeredTimers</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>setEventFilter</name>
      <anchor>setEventFilter</anchor>
      <arglist>( EventFilter filter )</arglist>
    </member>
    <member kind="function">
      <name>unregisterSocketNotifier</name>
      <anchor>unregisterSocketNotifier</anchor>
      <arglist>( QSocketNotifier * notifier )</arglist>
    </member>
    <member kind="function">
      <name>unregisterTimer</name>
      <anchor>unregisterTimer</anchor>
      <arglist>( int timerId )</arglist>
    </member>
    <member kind="function">
      <name>unregisterTimers</name>
      <anchor>unregisterTimers</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>wakeUp</name>
      <anchor>wakeUp</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractItemDelegate</name>
    <filename>qabstractitemdelegate.html</filename>
    <member kind="enum">
      <name>EndEditHint</name>
      <anchor>EndEditHint-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractItemDelegate</name>
      <anchor>QAbstractItemDelegate</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>closeEditor</name>
      <anchor>closeEditor</anchor>
      <arglist>( QWidget * editor, EndEditHint hint = NoHint )</arglist>
    </member>
    <member kind="function">
      <name>commitData</name>
      <anchor>commitData</anchor>
      <arglist>( QWidget * editor )</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>( QWidget * parent, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>editorEvent</name>
      <anchor>editorEvent</anchor>
      <arglist>( QEvent * event, QAbstractItemModel * model, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>elidedText</name>
      <anchor>elidedText</anchor>
      <arglist>( const QFontMetrics &amp; fontMetrics, int width, Qt::TextElideMode mode, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setEditorData</name>
      <anchor>setEditorData</anchor>
      <arglist>( QWidget * editor, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setModelData</name>
      <anchor>setModelData</anchor>
      <arglist>( QWidget * editor, QAbstractItemModel * model, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>( const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>updateEditorGeometry</name>
      <anchor>updateEditorGeometry</anchor>
      <arglist>( QWidget * editor, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractItemModel</name>
    <filename>qabstractitemmodel.html</filename>
    <member kind="function">
      <name>QAbstractItemModel</name>
      <anchor>QAbstractItemModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>beginInsertColumns</name>
      <anchor>beginInsertColumns</anchor>
      <arglist>( const QModelIndex &amp; parent, int first, int last )</arglist>
    </member>
    <member kind="function">
      <name>beginInsertRows</name>
      <anchor>beginInsertRows</anchor>
      <arglist>( const QModelIndex &amp; parent, int first, int last )</arglist>
    </member>
    <member kind="function">
      <name>beginRemoveColumns</name>
      <anchor>beginRemoveColumns</anchor>
      <arglist>( const QModelIndex &amp; parent, int first, int last )</arglist>
    </member>
    <member kind="function">
      <name>beginRemoveRows</name>
      <anchor>beginRemoveRows</anchor>
      <arglist>( const QModelIndex &amp; parent, int first, int last )</arglist>
    </member>
    <member kind="function">
      <name>buddy</name>
      <anchor>buddy</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>canFetchMore</name>
      <anchor>canFetchMore</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>columnCount</name>
      <anchor>columnCount</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>createIndex</name>
      <anchor>createIndex</anchor>
      <arglist>( int row, int column, void * ptr = 0 )</arglist>
    </member>
    <member kind="function">
      <name>createIndex</name>
      <anchor>createIndex-2</anchor>
      <arglist>( int row, int column, int id )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QModelIndex &amp; index, int role = Qt::DisplayRole )</arglist>
    </member>
    <member kind="function">
      <name>dataChanged</name>
      <anchor>dataChanged</anchor>
      <arglist>( const QModelIndex &amp; topLeft, const QModelIndex &amp; bottomRight )</arglist>
    </member>
    <member kind="function">
      <name>dropMimeData</name>
      <anchor>dropMimeData</anchor>
      <arglist>( const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>endInsertColumns</name>
      <anchor>endInsertColumns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endInsertRows</name>
      <anchor>endInsertRows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endRemoveColumns</name>
      <anchor>endRemoveColumns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endRemoveRows</name>
      <anchor>endRemoveRows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fetchMore</name>
      <anchor>fetchMore</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QAbstractItemModel::flags( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>hasChildren</name>
      <anchor>hasChildren</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>hasIndex</name>
      <anchor>hasIndex</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>headerData</name>
      <anchor>headerData</anchor>
      <arglist>( int section, Qt::Orientation orientation, int role = Qt::DisplayRole )</arglist>
    </member>
    <member kind="function">
      <name>headerDataChanged</name>
      <anchor>headerDataChanged</anchor>
      <arglist>( Qt::Orientation orientation, int first, int last )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>insertColumn</name>
      <anchor>insertColumn</anchor>
      <arglist>( int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>insertColumns</name>
      <anchor>insertColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>insertRow</name>
      <anchor>insertRow</anchor>
      <arglist>( int row, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>itemData</name>
      <anchor>itemData</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>match</name>
      <anchor>match</anchor>
      <arglist>( const QModelIndex &amp; start, int role, const QVariant &amp; value, int hits = 1, MatchFlags flags = MatchFlags( MatchFromStart | MatchWrap )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( const QModelIndexList &amp; indexes )</arglist>
    </member>
    <member kind="function">
      <name>mimeTypes</name>
      <anchor>mimeTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>removeColumn</name>
      <anchor>removeColumn</anchor>
      <arglist>( int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>removeColumns</name>
      <anchor>removeColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>removeRow</name>
      <anchor>removeRow</anchor>
      <arglist>( int row, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>removeRows</name>
      <anchor>removeRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>revert</name>
      <anchor>revert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowCount</name>
      <anchor>rowCount</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>setHeaderData</name>
      <anchor>setHeaderData</anchor>
      <arglist>( int section, Qt::Orientation orientation, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>setItemData</name>
      <anchor>setItemData</anchor>
      <arglist>( const QModelIndex &amp; index, const QMap&lt;int, QVariant&gt; &amp; roles )</arglist>
    </member>
    <member kind="function">
      <name>sibling</name>
      <anchor>sibling</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>( int column, Qt::SortOrder order = Qt::AscendingOrder )</arglist>
    </member>
    <member kind="function">
      <name>span</name>
      <anchor>span</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>submit</name>
      <anchor>submit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>supportedDropActions</anchor>
      <arglist> QAbstractItemModel::supportedDropActions()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractItemView</name>
    <filename>qabstractitemview.html</filename>
    <member kind="enum">
      <name>CursorAction</name>
      <anchor>CursorAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ScrollHint</name>
      <anchor>ScrollHint-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionBehavior</name>
      <anchor>SelectionBehavior-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionMode</name>
      <anchor>SelectionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextElideMode</name>
      <anchor>textElideMode</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractItemView</name>
      <anchor>QAbstractItemView</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clicked</name>
      <anchor>clicked</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>closeEditor</name>
      <anchor>closeEditor</anchor>
      <arglist>( QWidget * editor, QAbstractItemDelegate::EndEditHint hint )</arglist>
    </member>
    <member kind="function">
      <name>closePersistentEditor</name>
      <anchor>closePersistentEditor</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>commitData</name>
      <anchor>commitData</anchor>
      <arglist>( QWidget * editor )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( const QModelIndex &amp; current, const QModelIndex &amp; previous )</arglist>
    </member>
    <member kind="function">
      <name>currentIndex</name>
      <anchor>currentIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dataChanged</name>
      <anchor>dataChanged</anchor>
      <arglist>( const QModelIndex &amp; topLeft, const QModelIndex &amp; bottomRight )</arglist>
    </member>
    <member kind="function">
      <name>doubleClicked</name>
      <anchor>doubleClicked</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>dragEnterEvent</name>
      <anchor>dragEnterEvent</anchor>
      <arglist>( QDragEnterEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>dragLeaveEvent</name>
      <anchor>dragLeaveEvent</anchor>
      <arglist>( QDragLeaveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dragMoveEvent</name>
      <anchor>dragMoveEvent</anchor>
      <arglist>( QDragMoveEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>dropEvent</name>
      <anchor>dropEvent</anchor>
      <arglist>( QDropEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>edit</name>
      <anchor>edit</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>edit</name>
      <anchor>edit-2</anchor>
      <arglist>( const QModelIndex &amp; index, EditTrigger trigger, QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>editorDestroyed</name>
      <anchor>editorDestroyed</anchor>
      <arglist>( QObject * editor )</arglist>
    </member>
    <member kind="function">
      <name>entered</name>
      <anchor>entered</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>focusInEvent</name>
      <anchor>focusInEvent</anchor>
      <arglist>( QFocusEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>focusOutEvent</name>
      <anchor>focusOutEvent</anchor>
      <arglist>( QFocusEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>horizontalOffset</name>
      <anchor>horizontalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalStepsPerItem</name>
      <anchor>horizontalStepsPerItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexAt</name>
      <anchor>indexAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>isIndexHidden</name>
      <anchor>isIndexHidden</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>itemDelegate</name>
      <anchor>itemDelegate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>keyboardSearch</name>
      <anchor>keyboardSearch</anchor>
      <arglist>( const QString &amp; search )</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClickEvent</name>
      <anchor>mouseDoubleClickEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mouseMoveEvent</name>
      <anchor>mouseMoveEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mousePressEvent</name>
      <anchor>mousePressEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mouseReleaseEvent</name>
      <anchor>mouseReleaseEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>moveCursor</name>
      <anchor>moveCursor</anchor>
      <arglist>( CursorAction cursorAction, Qt::KeyboardModifiers modifiers )</arglist>
    </member>
    <member kind="function">
      <name>openPersistentEditor</name>
      <anchor>openPersistentEditor</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>pressed</name>
      <anchor>pressed</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resizeEvent</name>
      <anchor>resizeEvent</anchor>
      <arglist>( QResizeEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>rootIndex</name>
      <anchor>rootIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowsAboutToBeRemoved</name>
      <anchor>rowsAboutToBeRemoved</anchor>
      <arglist>( const QModelIndex &amp; parent, int start, int end )</arglist>
    </member>
    <member kind="function">
      <name>rowsInserted</name>
      <anchor>rowsInserted</anchor>
      <arglist>( const QModelIndex &amp; parent, int start, int end )</arglist>
    </member>
    <member kind="function">
      <name>scrollTo</name>
      <anchor>scrollTo</anchor>
      <arglist>( const QModelIndex &amp; index, ScrollHint hint = EnsureVisible )</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedIndexes</name>
      <anchor>selectedIndexes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>( const QItemSelection &amp; selected, const QItemSelection &amp; deselected )</arglist>
    </member>
    <member kind="function">
      <name>SelectionFlags</name>
      <anchor>selectionCommand</anchor>
      <arglist> QAbstractItemView::selectionCommand( const QModelIndex &amp; index, const QEvent * event = 0 )</arglist>
    </member>
    <member kind="function">
      <name>selectionModel</name>
      <anchor>selectionModel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentIndex</name>
      <anchor>setCurrentIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalStepsPerItem</name>
      <anchor>setHorizontalStepsPerItem</anchor>
      <arglist>( int steps )</arglist>
    </member>
    <member kind="function">
      <name>setItemDelegate</name>
      <anchor>setItemDelegate</anchor>
      <arglist>( QAbstractItemDelegate * delegate )</arglist>
    </member>
    <member kind="function">
      <name>setModel</name>
      <anchor>setModel</anchor>
      <arglist>( QAbstractItemModel * model )</arglist>
    </member>
    <member kind="function">
      <name>setRootIndex</name>
      <anchor>setRootIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setSelection</name>
      <anchor>setSelection</anchor>
      <arglist>( const QRect &amp; rect, QItemSelectionModel::SelectionFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>setSelectionModel</name>
      <anchor>setSelectionModel</anchor>
      <arglist>( QItemSelectionModel * selectionModel )</arglist>
    </member>
    <member kind="function">
      <name>setState</name>
      <anchor>setState</anchor>
      <arglist>( State state )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalStepsPerItem</name>
      <anchor>setVerticalStepsPerItem</anchor>
      <arglist>( int steps )</arglist>
    </member>
    <member kind="function">
      <name>sizeHintForColumn</name>
      <anchor>sizeHintForColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>sizeHintForIndex</name>
      <anchor>sizeHintForIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>sizeHintForRow</name>
      <anchor>sizeHintForRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>startDrag</name>
      <anchor>startDrag</anchor>
      <arglist>( Qt::DropActions supportedActions )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerEvent</name>
      <anchor>timerEvent</anchor>
      <arglist>( QTimerEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>verticalOffset</name>
      <anchor>verticalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalStepsPerItem</name>
      <anchor>verticalStepsPerItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewOptions</name>
      <anchor>viewOptions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewportEntered</name>
      <anchor>viewportEntered</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewportEvent</name>
      <anchor>viewportEvent</anchor>
      <arglist>( QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>visualRect</name>
      <anchor>visualRect</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>visualRegionForSelection</name>
      <anchor>visualRegionForSelection</anchor>
      <arglist>( const QItemSelection &amp; selection )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractListModel</name>
    <filename>qabstractlistmodel.html</filename>
    <member kind="function">
      <name>QAbstractListModel</name>
      <anchor>QAbstractListModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( int row, int column = 0, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractScrollArea</name>
    <filename>qabstractscrollarea.html</filename>
    <member kind="function">
      <name>ScrollBarPolicy</name>
      <anchor>horizontalScrollBarPolicy</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ScrollBarPolicy</name>
      <anchor>verticalScrollBarPolicy</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractScrollArea</name>
      <anchor>QAbstractScrollArea</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>contextMenuEvent</name>
      <anchor>contextMenuEvent</anchor>
      <arglist>( QContextMenuEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>dragEnterEvent</name>
      <anchor>dragEnterEvent</anchor>
      <arglist>( QDragEnterEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dragLeaveEvent</name>
      <anchor>dragLeaveEvent</anchor>
      <arglist>( QDragLeaveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dragMoveEvent</name>
      <anchor>dragMoveEvent</anchor>
      <arglist>( QDragMoveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dropEvent</name>
      <anchor>dropEvent</anchor>
      <arglist>( QDropEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>event</name>
      <anchor>event</anchor>
      <arglist>( QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>horizontalScrollBar</name>
      <anchor>horizontalScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>maximumViewportSize</name>
      <anchor>maximumViewportSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClickEvent</name>
      <anchor>mouseDoubleClickEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mouseMoveEvent</name>
      <anchor>mouseMoveEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mousePressEvent</name>
      <anchor>mousePressEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mouseReleaseEvent</name>
      <anchor>mouseReleaseEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>resizeEvent</name>
      <anchor>resizeEvent</anchor>
      <arglist>( QResizeEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>scrollContentsBy</name>
      <anchor>scrollContentsBy</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>setViewportMargins</name>
      <anchor>setViewportMargins</anchor>
      <arglist>( int left, int top, int right, int bottom )</arglist>
    </member>
    <member kind="function">
      <name>verticalScrollBar</name>
      <anchor>verticalScrollBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewport</name>
      <anchor>viewport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewportEvent</name>
      <anchor>viewportEvent</anchor>
      <arglist>( QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>wheelEvent</name>
      <anchor>wheelEvent</anchor>
      <arglist>( QWheelEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>addLine</name>
      <anchor>addLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addPage</name>
      <anchor>addPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineStep</name>
      <anchor>lineStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxValue</name>
      <anchor>maxValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minValue</name>
      <anchor>minValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLineStep</name>
      <anchor>setLineStep</anchor>
      <arglist>( int v )</arglist>
    </member>
    <member kind="function">
      <name>setMaxValue</name>
      <anchor>setMaxValue</anchor>
      <arglist>( int v )</arglist>
    </member>
    <member kind="function">
      <name>setMinValue</name>
      <anchor>setMinValue</anchor>
      <arglist>( int v )</arglist>
    </member>
    <member kind="function">
      <name>setSteps</name>
      <anchor>setSteps</anchor>
      <arglist>( int single, int page )</arglist>
    </member>
    <member kind="function">
      <name>subtractLine</name>
      <anchor>subtractLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>subtractPage</name>
      <anchor>subtractPage</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractSlider</name>
    <filename>qabstractslider.html</filename>
    <member kind="enum">
      <name>SliderAction</name>
      <anchor>SliderAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SliderChange</name>
      <anchor>SliderChange-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractSlider</name>
      <anchor>QAbstractSlider</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>actionTriggered</name>
      <anchor>actionTriggered</anchor>
      <arglist>( int action )</arglist>
    </member>
    <member kind="function">
      <name>rangeChanged</name>
      <anchor>rangeChanged</anchor>
      <arglist>( int min, int max )</arglist>
    </member>
    <member kind="function">
      <name>repeatAction</name>
      <anchor>repeatAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( int min, int max )</arglist>
    </member>
    <member kind="function">
      <name>setRepeatAction</name>
      <anchor>setRepeatAction</anchor>
      <arglist>( SliderAction action, int thresholdTime = 500, int repeatTime = 50 )</arglist>
    </member>
    <member kind="function">
      <name>setSliderPosition</name>
      <anchor>setSliderPosition</anchor>
      <arglist>( int position )</arglist>
    </member>
    <member kind="function">
      <name>sliderChange</name>
      <anchor>sliderChange</anchor>
      <arglist>( SliderChange change )</arglist>
    </member>
    <member kind="function">
      <name>sliderMoved</name>
      <anchor>sliderMoved</anchor>
      <arglist>( int value )</arglist>
    </member>
    <member kind="function">
      <name>sliderPosition</name>
      <anchor>sliderPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sliderPressed</name>
      <anchor>sliderPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sliderReleased</name>
      <anchor>sliderReleased</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>triggerAction</name>
      <anchor>triggerAction</anchor>
      <arglist>( SliderAction action )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( int value )</arglist>
    </member>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>State-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>connectionClosed</name>
      <anchor>connectionClosed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>delayedCloseFinished</name>
      <anchor>delayedCloseFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSocket</name>
      <anchor>setSocket</anchor>
      <arglist>( int socket )</arglist>
    </member>
    <member kind="function">
      <name>socket</name>
      <anchor>socket</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>waitForMore</name>
      <anchor>waitForMore</anchor>
      <arglist>( int msecs, bool * timeout = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractSocket</name>
    <filename>qabstractsocket.html</filename>
    <member kind="enum">
      <name>SocketError</name>
      <anchor>SocketError-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SocketState</name>
      <anchor>SocketState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SocketType</name>
      <anchor>SocketType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractSocket</name>
      <anchor>QAbstractSocket</anchor>
      <arglist>( SocketType socketType, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesToWrite</name>
      <anchor>bytesToWrite</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canReadLine</name>
      <anchor>canReadLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectToHost</name>
      <anchor>connectToHost</anchor>
      <arglist>( const QString &amp; hostName, quint16 port, OpenMode openMode = ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>connectToHost</name>
      <anchor>connectToHost-2</anchor>
      <arglist>( const QHostAddress &amp; address, quint16 port, OpenMode openMode = ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>connected</name>
      <anchor>connected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disconnectFromHost</name>
      <anchor>disconnectFromHost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disconnected</name>
      <anchor>disconnected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error-2</anchor>
      <arglist>( SocketError socketError )</arglist>
    </member>
    <member kind="function">
      <name>hostFound</name>
      <anchor>hostFound</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localAddress</name>
      <anchor>localAddress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localPort</name>
      <anchor>localPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peerAddress</name>
      <anchor>peerAddress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peerName</name>
      <anchor>peerName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peerPort</name>
      <anchor>peerPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBufferSize</name>
      <anchor>readBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setReadBufferSize</name>
      <anchor>setReadBufferSize</anchor>
      <arglist>( qint64 size )</arglist>
    </member>
    <member kind="function">
      <name>setSocketDescriptor</name>
      <anchor>setSocketDescriptor</anchor>
      <arglist>( int socketDescriptor, SocketState socketState = ConnectedState, OpenMode openMode = ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>setSocketError</name>
      <anchor>setSocketError</anchor>
      <arglist>( SocketError socketError )</arglist>
    </member>
    <member kind="function">
      <name>setSocketState</name>
      <anchor>setSocketState</anchor>
      <arglist>( SocketState state )</arglist>
    </member>
    <member kind="function">
      <name>socketDescriptor</name>
      <anchor>socketDescriptor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>socketType</name>
      <anchor>socketType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( SocketState socketState )</arglist>
    </member>
    <member kind="function">
      <name>waitForConnected</name>
      <anchor>waitForConnected</anchor>
      <arglist>( int msecs = 30000 )</arglist>
    </member>
    <member kind="function">
      <name>waitForDisconnected</name>
      <anchor>waitForDisconnected</anchor>
      <arglist>( int msecs = 30000 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractSpinBox</name>
    <filename>qabstractspinbox.html</filename>
    <member kind="enum">
      <name>ButtonSymbols</name>
      <anchor>ButtonSymbols-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAbstractSpinBox</name>
      <anchor>QAbstractSpinBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>editingFinished</name>
      <anchor>editingFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fixup</name>
      <anchor>fixup</anchor>
      <arglist>( QString &amp; input )</arglist>
    </member>
    <member kind="function">
      <name>interpretText</name>
      <anchor>interpretText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineEdit</name>
      <anchor>lineEdit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLineEdit</name>
      <anchor>setLineEdit</anchor>
      <arglist>( QLineEdit * lineEdit )</arglist>
    </member>
    <member kind="function">
      <name>stepBy</name>
      <anchor>stepBy</anchor>
      <arglist>( int steps )</arglist>
    </member>
    <member kind="function">
      <name>stepDown</name>
      <anchor>stepDown</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stepEnabled</name>
      <anchor>stepEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stepUp</name>
      <anchor>stepUp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>validate</anchor>
      <arglist> QAbstractSpinBox::validate( QString &amp; input, int &amp; pos )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractTableModel</name>
    <filename>qabstracttablemodel.html</filename>
    <member kind="function">
      <name>QAbstractTableModel</name>
      <anchor>QAbstractTableModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAbstractTextDocumentLayout::Selection</name>
    <filename>qabstracttextdocumentlayout-selection.html</filename>
  </compound>
  <compound kind="class">
    <name>QAbstractTextDocumentLayout</name>
    <filename>qabstracttextdocumentlayout.html</filename>
    <member kind="function">
      <name>QAbstractTextDocumentLayout</name>
      <anchor>QAbstractTextDocumentLayout</anchor>
      <arglist>( QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>anchorAt</name>
      <anchor>anchorAt</anchor>
      <arglist>( const QPointF &amp; position )</arglist>
    </member>
    <member kind="function">
      <name>document</name>
      <anchor>document</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>documentChanged</name>
      <anchor>documentChanged</anchor>
      <arglist>( int position, int charsRemoved, int charsAdded )</arglist>
    </member>
    <member kind="function">
      <name>documentSize</name>
      <anchor>documentSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>documentSizeChanged</name>
      <anchor>documentSizeChanged</anchor>
      <arglist>( const QSizeF &amp; newSize )</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter * painter, const PaintContext &amp; context )</arglist>
    </member>
    <member kind="function">
      <name>drawInlineObject</name>
      <anchor>drawInlineObject</anchor>
      <arglist>( QPainter * painter, const QRectF &amp; rect, QTextInlineObject item, const QTextFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>( int position )</arglist>
    </member>
    <member kind="function">
      <name>frameBoundingRect</name>
      <anchor>frameBoundingRect</anchor>
      <arglist>( QTextFrame * frame )</arglist>
    </member>
    <member kind="function">
      <name>pageCount</name>
      <anchor>pageCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageCountChanged</name>
      <anchor>pageCountChanged</anchor>
      <arglist>( int newPages )</arglist>
    </member>
    <member kind="function">
      <name>paintDevice</name>
      <anchor>paintDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>positionInlineObject</name>
      <anchor>positionInlineObject</anchor>
      <arglist>( QTextInlineObject item, const QTextFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>resizeInlineObject</name>
      <anchor>resizeInlineObject</anchor>
      <arglist>( QTextInlineObject item, const QTextFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setPaintDevice</name>
      <anchor>setPaintDevice</anchor>
      <arglist>( QPaintDevice * device )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>( const QRectF &amp; rect = QRectF( 0., 0., 1000000000., 1000000000. )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessible</name>
    <filename>qaccessible.html</filename>
    <member kind="enum">
      <name>Action</name>
      <anchor>Action-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Event</name>
      <anchor>Event-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InterfaceFactory</name>
      <anchor>InterfaceFactory-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Role</name>
      <anchor>Role-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RootObjectHandler</name>
      <anchor>RootObjectHandler-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Text</name>
      <anchor>Text-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UpdateHandler</name>
      <anchor>UpdateHandler-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>installFactory</name>
      <anchor>installFactory</anchor>
      <arglist>( InterfaceFactory factory )</arglist>
    </member>
    <member kind="function">
      <name>installRootObjectHandler</name>
      <anchor>installRootObjectHandler</anchor>
      <arglist>( RootObjectHandler handler )</arglist>
    </member>
    <member kind="function">
      <name>installUpdateHandler</name>
      <anchor>installUpdateHandler</anchor>
      <arglist>( UpdateHandler handler )</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>queryAccessibleInterface</name>
      <anchor>queryAccessibleInterface</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>removeFactory</name>
      <anchor>removeFactory</anchor>
      <arglist>( InterfaceFactory factory )</arglist>
    </member>
    <member kind="function">
      <name>setRootObject</name>
      <anchor>setRootObject</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>updateAccessibility</name>
      <anchor>updateAccessibility</anchor>
      <arglist>( QObject * object, int child, Event reason )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleButton</name>
    <filename>qaccessiblebutton.html</filename>
    <member kind="function">
      <name>QAccessibleButton</name>
      <anchor>QAccessibleButton</anchor>
      <arglist>( QWidget * w, Role role )</arglist>
    </member>
    <member kind="function">
      <name>button</name>
      <anchor>button</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleComboBox</name>
    <filename>qaccessiblecombobox.html</filename>
    <member kind="function">
      <name>QAccessibleComboBox</name>
      <anchor>QAccessibleComboBox</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>comboBox</name>
      <anchor>comboBox</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleDisplay</name>
    <filename>qaccessibledisplay.html</filename>
    <member kind="function">
      <name>QAccessibleDisplay</name>
      <anchor>QAccessibleDisplay</anchor>
      <arglist>( QWidget * w, Role role = StaticText )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleHeader</name>
    <filename>qaccessibleheader.html</filename>
    <member kind="function">
      <name>QAccessibleHeader</name>
      <anchor>QAccessibleHeader</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>header</name>
      <anchor>header</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleIconView</name>
    <filename>qaccessibleiconview.html</filename>
    <member kind="function">
      <name>QAccessibleIconView</name>
      <anchor>QAccessibleIconView</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>iconView</name>
      <anchor>iconView</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleInterface</name>
    <filename>qaccessibleinterface.html</filename>
    <member kind="function">
      <name>actionText</name>
      <anchor>actionText</anchor>
      <arglist>( int action, Text t, int child )</arglist>
    </member>
    <member kind="function">
      <name>childAt</name>
      <anchor>childAt</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>childCount</name>
      <anchor>childCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doAction</name>
      <anchor>doAction</anchor>
      <arglist>( int action, int child, const QVariantList &amp; params = QVariantList()</arglist>
    </member>
    <member kind="function">
      <name>indexOfChild</name>
      <anchor>indexOfChild</anchor>
      <arglist>( const QAccessibleInterface * child )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>navigate</name>
      <anchor>navigate</anchor>
      <arglist>( RelationFlag relation, int entry, QAccessibleInterface ** target )</arglist>
    </member>
    <member kind="function">
      <name>object</name>
      <anchor>object</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>( int child )</arglist>
    </member>
    <member kind="function">
      <name>relationTo</name>
      <anchor>relationTo</anchor>
      <arglist>( int child, const QAccessibleInterface * other, int otherChild )</arglist>
    </member>
    <member kind="function">
      <name>role</name>
      <anchor>role</anchor>
      <arglist>( int child )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( Text t, int child, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>( int child )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( Text t, int child )</arglist>
    </member>
    <member kind="function">
      <name>userActionCount</name>
      <anchor>userActionCount</anchor>
      <arglist>( int child )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleLineEdit</name>
    <filename>qaccessiblelineedit.html</filename>
    <member kind="function">
      <name>QAccessibleLineEdit</name>
      <anchor>QAccessibleLineEdit</anchor>
      <arglist>( QWidget * w, const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>lineEdit</name>
      <anchor>lineEdit</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleListBox</name>
    <filename>qaccessiblelistbox.html</filename>
    <member kind="function">
      <name>QAccessibleListBox</name>
      <anchor>QAccessibleListBox</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listBox</name>
      <anchor>listBox</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selection</name>
      <anchor>selection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( int child, bool on, bool extend )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleListView</name>
    <filename>qaccessiblelistview.html</filename>
    <member kind="function">
      <name>QAccessibleListView</name>
      <anchor>QAccessibleListView</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>listView</name>
      <anchor>listView</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleObject</name>
    <filename>qaccessibleobject.html</filename>
    <member kind="function">
      <name>QAccessibleObject</name>
      <anchor>QAccessibleObject</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessiblePlugin</name>
    <filename>qaccessibleplugin.html</filename>
    <member kind="function">
      <name>QAccessiblePlugin</name>
      <anchor>QAccessiblePlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key, QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleScrollBar</name>
    <filename>qaccessiblescrollbar.html</filename>
    <member kind="enum">
      <name>ScrollBarElements</name>
      <anchor>ScrollBarElements-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAccessibleScrollBar</name>
      <anchor>QAccessibleScrollBar</anchor>
      <arglist>( QWidget * w, const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>scrollBar</name>
      <anchor>scrollBar</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleScrollView</name>
    <filename>qaccessiblescrollview.html</filename>
    <member kind="function">
      <name>QAccessibleScrollView</name>
      <anchor>QAccessibleScrollView</anchor>
      <arglist>( QWidget * w, Role role )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>itemCount</name>
      <anchor>itemCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemRect</name>
      <anchor>itemRect</anchor>
      <arglist>( int item )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleSlider</name>
    <filename>qaccessibleslider.html</filename>
    <member kind="enum">
      <name>SliderElements</name>
      <anchor>SliderElements-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAccessibleSlider</name>
      <anchor>QAccessibleSlider</anchor>
      <arglist>( QWidget * w, const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>defaultAction</name>
      <anchor>defaultAction</anchor>
      <arglist>( int child )</arglist>
    </member>
    <member kind="function">
      <name>slider</name>
      <anchor>slider</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleSpinBox</name>
    <filename>qaccessiblespinbox.html</filename>
    <member kind="enum">
      <name>SpinBoxElements</name>
      <anchor>SpinBoxElements-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAccessibleSpinBox</name>
      <anchor>QAccessibleSpinBox</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>spinBox</name>
      <anchor>spinBox</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleTabBar</name>
    <filename>qaccessibletabbar.html</filename>
    <member kind="function">
      <name>QAccessibleTabBar</name>
      <anchor>QAccessibleTabBar</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>selection</name>
      <anchor>selection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSelected</name>
      <anchor>setSelected</anchor>
      <arglist>( int child, bool on, bool extend )</arglist>
    </member>
    <member kind="function">
      <name>tabBar</name>
      <anchor>tabBar</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleTextEdit</name>
    <filename>qaccessibletextedit.html</filename>
    <member kind="function">
      <name>QAccessibleTextEdit</name>
      <anchor>QAccessibleTextEdit</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>textEdit</name>
      <anchor>textEdit</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleToolButton</name>
    <filename>qaccessibletoolbutton.html</filename>
    <member kind="enum">
      <name>ToolButtonElements</name>
      <anchor>ToolButtonElements-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAccessibleToolButton</name>
      <anchor>QAccessibleToolButton</anchor>
      <arglist>( QWidget * w, Role role )</arglist>
    </member>
    <member kind="function">
      <name>isSplitButton</name>
      <anchor>isSplitButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toolButton</name>
      <anchor>toolButton</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleWidget</name>
    <filename>qaccessiblewidget.html</filename>
    <member kind="function">
      <name>QAccessibleWidget</name>
      <anchor>QAccessibleWidget</anchor>
      <arglist>( QWidget * w, Role role = Client, const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>addControllingSignal</name>
      <anchor>addControllingSignal</anchor>
      <arglist>( const QString &amp; signal )</arglist>
    </member>
    <member kind="function">
      <name>parentObject</name>
      <anchor>parentObject</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAccelerator</name>
      <anchor>setAccelerator</anchor>
      <arglist>( const QString &amp; accel )</arglist>
    </member>
    <member kind="function">
      <name>setDescription</name>
      <anchor>setDescription</anchor>
      <arglist>( const QString &amp; desc )</arglist>
    </member>
    <member kind="function">
      <name>setHelp</name>
      <anchor>setHelp</anchor>
      <arglist>( const QString &amp; help )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAccessibleWidgetStack</name>
    <filename>qaccessiblewidgetstack.html</filename>
    <member kind="function">
      <name>QAccessibleWidgetStack</name>
      <anchor>QAccessibleWidgetStack</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>widgetStack</name>
      <anchor>widgetStack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QAction</name>
      <anchor>QAction-4</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QAction</name>
      <anchor>QAction-5</anchor>
      <arglist>( const QString &amp; text, const QKeySequence &amp; shortcut, QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QAction</name>
      <anchor>QAction-6</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, const QKeySequence &amp; shortcut, QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>accel</name>
      <anchor>accel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( int i = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addTo</name>
      <anchor>addTo</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOn</name>
      <anchor>isOn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isToggleAction</name>
      <anchor>isToggleAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menuText</name>
      <anchor>menuText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeFrom</name>
      <anchor>removeFrom</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setAccel</name>
      <anchor>setAccel</anchor>
      <arglist>( const QKeySequence &amp; shortcut )</arglist>
    </member>
    <member kind="function">
      <name>setIconSet</name>
      <anchor>setIconSet</anchor>
      <arglist>( const QIcon &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>setMenuText</name>
      <anchor>setMenuText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setOn</name>
      <anchor>setOn</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setToggleAction</name>
      <anchor>setToggleAction</anchor>
      <arglist>( bool b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAction</name>
    <filename>qaction.html</filename>
    <member kind="enum">
      <name>ActionEvent</name>
      <anchor>ActionEvent-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ShortcutContext</name>
      <anchor>shortcutContext</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QAction</name>
      <anchor>QAction</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QAction</name>
      <anchor>QAction-2</anchor>
      <arglist>( const QString &amp; text, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QAction</name>
      <anchor>QAction-3</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>actionGroup</name>
      <anchor>actionGroup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activate</name>
      <anchor>activate</anchor>
      <arglist>( ActionEvent event )</arglist>
    </member>
    <member kind="function">
      <name>changed</name>
      <anchor>changed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hover</name>
      <anchor>hover</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hovered</name>
      <anchor>hovered</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSeparator</name>
      <anchor>isSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menu</name>
      <anchor>menu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentWidget</name>
      <anchor>parentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActionGroup</name>
      <anchor>setActionGroup</anchor>
      <arglist>( QActionGroup * group )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QVariant &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>setDisabled</name>
      <anchor>setDisabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setSeparator</name>
      <anchor>setSeparator</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>showStatusText</name>
      <anchor>showStatusText</anchor>
      <arglist>( QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toggle</name>
      <anchor>toggle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toggled</name>
      <anchor>toggled</anchor>
      <arglist>( bool checked )</arglist>
    </member>
    <member kind="function">
      <name>trigger</name>
      <anchor>trigger</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>triggered</name>
      <anchor>triggered</anchor>
      <arglist>( bool checked = false )</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( QAction * a )</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>addSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addTo</name>
      <anchor>addTo</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QActionGroup</name>
    <filename>qactiongroup.html</filename>
    <member kind="function">
      <name>QActionGroup</name>
      <anchor>QActionGroup</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>actions</name>
      <anchor>actions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-3</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>checkedAction</name>
      <anchor>checkedAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hovered</name>
      <anchor>hovered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>removeAction</name>
      <anchor>removeAction</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>setDisabled</name>
      <anchor>setDisabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>triggered</name>
      <anchor>triggered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>ColorMode</name>
      <anchor>ColorMode-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>colorMode</name>
      <anchor>colorMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flushX</name>
      <anchor>flushX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasGlobalMouseTracking</name>
      <anchor>hasGlobalMouseTracking</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>horizontalAlignment</anchor>
      <arglist> QApplication::horizontalAlignment( Qt::Alignment align )</arglist>
    </member>
    <member kind="function">
      <name>MacintoshVersion</name>
      <anchor>macVersion</anchor>
      <arglist> QApplication::macVersion()</arglist>
    </member>
    <member kind="function">
      <name>mainWidget</name>
      <anchor>mainWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reverseLayout</name>
      <anchor>reverseLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColorMode</name>
      <anchor>setColorMode</anchor>
      <arglist>( ColorMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont-2</anchor>
      <arglist>( const QFont &amp; font, bool b, const char * className = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setGlobalMouseTracking</name>
      <anchor>setGlobalMouseTracking</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setMainWidget</name>
      <anchor>setMainWidget</anchor>
      <arglist>( QWidget * mainWidget )</arglist>
    </member>
    <member kind="function">
      <name>setOverrideCursor</name>
      <anchor>setOverrideCursor-2</anchor>
      <arglist>( const QCursor &amp; cursor, bool replace )</arglist>
    </member>
    <member kind="function">
      <name>setPalette</name>
      <anchor>setPalette-2</anchor>
      <arglist>( const QPalette &amp; pal, bool b, const char * className = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setReverseLayout</name>
      <anchor>setReverseLayout</anchor>
      <arglist>( bool reverse )</arglist>
    </member>
    <member kind="function">
      <name>setWinStyleHighlightColor</name>
      <anchor>setWinStyleHighlightColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>widgetAt</name>
      <anchor>widgetAt-3</anchor>
      <arglist>( int x, int y, bool child )</arglist>
    </member>
    <member kind="function">
      <name>widgetAt</name>
      <anchor>widgetAt-4</anchor>
      <arglist>( const QPoint &amp; point, bool child )</arglist>
    </member>
    <member kind="function">
      <name>winStyleHighlightColor</name>
      <anchor>winStyleHighlightColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WindowsVersion</name>
      <anchor>winVersion</anchor>
      <arglist> QApplication::winVersion()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QApplication</name>
    <filename>qapplication.html</filename>
    <member kind="enum">
      <name>ColorSpec</name>
      <anchor>ColorSpec-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>layoutDirection</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QApplication</name>
      <anchor>QApplication</anchor>
      <arglist>( int &amp; argc, char ** argv )</arglist>
    </member>
    <member kind="function">
      <name>QApplication</name>
      <anchor>QApplication-2</anchor>
      <arglist>( int &amp; argc, char ** argv, bool GUIenabled )</arglist>
    </member>
    <member kind="function">
      <name>QApplication</name>
      <anchor>QApplication-3</anchor>
      <arglist>( int &amp; argc, char ** argv, Type type )</arglist>
    </member>
    <member kind="function">
      <name>QApplication</name>
      <anchor>QApplication-4</anchor>
      <arglist>( Display * dpy, Qt::HANDLE visual = 0, Qt::HANDLE colormap = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QApplication</name>
      <anchor>QApplication-5</anchor>
      <arglist>( Display * dpy, int &amp; argc, char ** argv, Qt::HANDLE visual = 0, Qt::HANDLE colormap = 0 )</arglist>
    </member>
    <member kind="function">
      <name>aboutQt</name>
      <anchor>aboutQt</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeModalWidget</name>
      <anchor>activeModalWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activePopupWidget</name>
      <anchor>activePopupWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeWindow</name>
      <anchor>activeWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>allWidgets</name>
      <anchor>allWidgets</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beep</name>
      <anchor>beep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeOverrideCursor</name>
      <anchor>changeOverrideCursor</anchor>
      <arglist>( const QCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>clipboard</name>
      <anchor>clipboard</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeAllWindows</name>
      <anchor>closeAllWindows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colorSpec</name>
      <anchor>colorSpec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commitData</name>
      <anchor>commitData</anchor>
      <arglist>( QSessionManager &amp; sm )</arglist>
    </member>
    <member kind="function">
      <name>desktop</name>
      <anchor>desktop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusWidget</name>
      <anchor>focusWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontMetrics</name>
      <anchor>fontMetrics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inputContext</name>
      <anchor>inputContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEffectEnabled</name>
      <anchor>isEffectEnabled</anchor>
      <arglist>( Qt::UIEffect effect )</arglist>
    </member>
    <member kind="function">
      <name>isLeftToRight</name>
      <anchor>isLeftToRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRightToLeft</name>
      <anchor>isRightToLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSessionRestored</name>
      <anchor>isSessionRestored</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>KeyboardModifiers</name>
      <anchor>keyboardModifiers</anchor>
      <arglist> QApplication::keyboardModifiers()</arglist>
    </member>
    <member kind="function">
      <name>lastWindowClosed</name>
      <anchor>lastWindowClosed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>macEventFilter</name>
      <anchor>macEventFilter</anchor>
      <arglist>( EventHandlerCallRef caller, EventRef event )</arglist>
    </member>
    <member kind="function">
      <name>MouseButtons</name>
      <anchor>mouseButtons</anchor>
      <arglist> QApplication::mouseButtons()</arglist>
    </member>
    <member kind="function">
      <name>overrideCursor</name>
      <anchor>overrideCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>qwsDecoration</name>
      <anchor>qwsDecoration</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>qwsEventFilter</name>
      <anchor>qwsEventFilter</anchor>
      <arglist>( QWSEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>qwsSetCustomColors</name>
      <anchor>qwsSetCustomColors</anchor>
      <arglist>( QRgb * colorTable, int start, int numColors )</arglist>
    </member>
    <member kind="function">
      <name>qwsSetDecoration</name>
      <anchor>qwsSetDecoration</anchor>
      <arglist>( QDecoration * dec )</arglist>
    </member>
    <member kind="function">
      <name>qwsSetDecoration</name>
      <anchor>qwsSetDecoration-2</anchor>
      <arglist>( const QString &amp; decoration )</arglist>
    </member>
    <member kind="function">
      <name>restoreOverrideCursor</name>
      <anchor>restoreOverrideCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>saveState</anchor>
      <arglist>( QSessionManager &amp; sm )</arglist>
    </member>
    <member kind="function">
      <name>sessionId</name>
      <anchor>sessionId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sessionKey</name>
      <anchor>sessionKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActiveWindow</name>
      <anchor>setActiveWindow</anchor>
      <arglist>( QWidget * act )</arglist>
    </member>
    <member kind="function">
      <name>setColorSpec</name>
      <anchor>setColorSpec</anchor>
      <arglist>( int spec )</arglist>
    </member>
    <member kind="function">
      <name>setEffectEnabled</name>
      <anchor>setEffectEnabled</anchor>
      <arglist>( Qt::UIEffect effect, bool enable = true )</arglist>
    </member>
    <member kind="function">
      <name>setInputContext</name>
      <anchor>setInputContext</anchor>
      <arglist>( QInputContext * inputContext )</arglist>
    </member>
    <member kind="function">
      <name>setOverrideCursor</name>
      <anchor>setOverrideCursor</anchor>
      <arglist>( const QCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle</anchor>
      <arglist>( QStyle * style )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle-2</anchor>
      <arglist>( const QString &amp; style )</arglist>
    </member>
    <member kind="function">
      <name>style</name>
      <anchor>style</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>syncX</name>
      <anchor>syncX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topLevelAt</name>
      <anchor>topLevelAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>topLevelAt</name>
      <anchor>topLevelAt-2</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>topLevelWidgets</name>
      <anchor>topLevelWidgets</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widgetAt</name>
      <anchor>widgetAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>widgetAt</name>
      <anchor>widgetAt-2</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>winFocus</name>
      <anchor>winFocus</anchor>
      <arglist>( QWidget * widget, bool gotFocus )</arglist>
    </member>
    <member kind="function">
      <name>x11EventFilter</name>
      <anchor>x11EventFilter</anchor>
      <arglist>( XEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>x11ProcessEvent</name>
      <anchor>x11ProcessEvent</anchor>
      <arglist>( XEvent * event )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QBasicTimer</name>
    <filename>qbasictimer.html</filename>
    <member kind="function">
      <name>QBasicTimer</name>
      <anchor>QBasicTimer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( int msec, QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>stop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerId</name>
      <anchor>timerId</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QBitArray</name>
    <filename>qbitarray.html</filename>
    <member kind="function">
      <name>QBitArray</name>
      <anchor>QBitArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QBitArray</name>
      <anchor>QBitArray-2</anchor>
      <arglist>( int size, bool value = false )</arglist>
    </member>
    <member kind="function">
      <name>QBitArray</name>
      <anchor>QBitArray-3</anchor>
      <arglist>( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearBit</name>
      <anchor>clearBit</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( bool value, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill-2</anchor>
      <arglist>( bool value, int begin, int end )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setBit</name>
      <anchor>setBit</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>setBit</name>
      <anchor>setBit-2</anchor>
      <arglist>( int i, bool value )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>testBit</name>
      <anchor>testBit</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>toggleBit</name>
      <anchor>toggleBit</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>truncate</name>
      <anchor>truncate</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and-eq</anchor>
      <arglist>amp;=( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-3</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-4</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>operator^=</name>
      <anchor>operator-5e-eq</anchor>
      <arglist>( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>operator-7c-eq</anchor>
      <arglist>( const QBitArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator~</name>
      <anchor>operator-7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-5</anchor>
      <arglist>( int width, int height, bool clear )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-6</anchor>
      <arglist>( int width, int height, const uchar * bits, bool isXbitmap = false )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-7</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-9</anchor>
      <arglist>( const QSize &amp; size, bool clear )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-10</anchor>
      <arglist>( const QSize &amp; size, const uchar * bits, bool isXbitmap = false )</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm</anchor>
      <arglist>( const QMatrix &amp; matrix )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QBitmap</name>
    <filename>qbitmap.html</filename>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-2</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-3</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-4</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QBitmap</name>
      <anchor>QBitmap-8</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromData</name>
      <anchor>fromData</anchor>
      <arglist>( const QSize &amp; size, const uchar * bits, QImage::Format monoFormat = QImage::Format_MonoLSB )</arglist>
    </member>
    <member kind="function">
      <name>fromImage</name>
      <anchor>fromImage</anchor>
      <arglist>( const QImage &amp; image, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>transformed</name>
      <anchor>transformed</anchor>
      <arglist>( const QMatrix &amp; matrix )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>QBoxLayout</name>
      <anchor>QBoxLayout-3</anchor>
      <arglist>( QWidget * parent, Direction dir, int margin = 0, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QBoxLayout</name>
      <anchor>QBoxLayout-4</anchor>
      <arglist>( QLayout * parentLayout, Direction dir, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QBoxLayout</name>
      <anchor>QBoxLayout-5</anchor>
      <arglist>( Direction dir, int spacing, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>findWidget</name>
      <anchor>findWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QBoxLayout</name>
    <filename>qboxlayout.html</filename>
    <member kind="enum">
      <name>Direction</name>
      <anchor>Direction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QBoxLayout</name>
      <anchor>QBoxLayout</anchor>
      <arglist>( Direction dir, QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>QBoxLayout</name>
      <anchor>QBoxLayout-2</anchor>
      <arglist>( Direction dir )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem</anchor>
      <arglist>( QLayoutItem * item )</arglist>
    </member>
    <member kind="function">
      <name>addLayout</name>
      <anchor>addLayout</anchor>
      <arglist>( QLayout * layout, int stretch = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addSpacing</name>
      <anchor>addSpacing</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>addStretch</name>
      <anchor>addStretch</anchor>
      <arglist>( int stretch = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addStrut</name>
      <anchor>addStrut</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>direction</name>
      <anchor>direction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientations</name>
      <anchor>expandingDirections</anchor>
      <arglist> QBoxLayout::expandingDirections()</arglist>
    </member>
    <member kind="function">
      <name>hasHeightForWidth</name>
      <anchor>hasHeightForWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>heightForWidth</name>
      <anchor>heightForWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( int index, QLayoutItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertLayout</name>
      <anchor>insertLayout</anchor>
      <arglist>( int index, QLayout * layout, int stretch = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insertSpacing</name>
      <anchor>insertSpacing</anchor>
      <arglist>( int index, int size )</arglist>
    </member>
    <member kind="function">
      <name>insertStretch</name>
      <anchor>insertStretch</anchor>
      <arglist>( int index, int stretch = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insertWidget</name>
      <anchor>insertWidget</anchor>
      <arglist>( int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>invalidate</name>
      <anchor>invalidate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximumSize</name>
      <anchor>maximumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumSize</name>
      <anchor>minimumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDirection</name>
      <anchor>setDirection</anchor>
      <arglist>( Direction direction )</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setStretchFactor</name>
      <anchor>setStretchFactor</anchor>
      <arglist>( QWidget * w, int stretch )</arglist>
    </member>
    <member kind="function">
      <name>setStretchFactor</name>
      <anchor>setStretchFactor-2</anchor>
      <arglist>( QLayout * l, int stretch )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-QColor--and</anchor>
      <arglist> const QColor &amp;()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QBrush</name>
    <filename>qbrush.html</filename>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-2</anchor>
      <arglist>( Qt::BrushStyle style )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-3</anchor>
      <arglist>( const QColor &amp; color, Qt::BrushStyle style = Qt::SolidPattern )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-4</anchor>
      <arglist>( const QColor &amp; color, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-5</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-6</anchor>
      <arglist>( const QBrush &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-7</anchor>
      <arglist>( const QGradient &amp; gradient )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-8</anchor>
      <arglist>( Qt::GlobalColor color, Qt::BrushStyle style = Qt::SolidPattern )</arglist>
    </member>
    <member kind="function">
      <name>QBrush</name>
      <anchor>QBrush-9</anchor>
      <arglist>( Qt::GlobalColor color, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>gradient</name>
      <anchor>gradient</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOpaque</name>
      <anchor>isOpaque</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor-2</anchor>
      <arglist>( Qt::GlobalColor c )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle</anchor>
      <arglist>( Qt::BrushStyle style )</arglist>
    </member>
    <member kind="function">
      <name>setTexture</name>
      <anchor>setTexture</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>BrushStyle</name>
      <anchor>style</anchor>
      <arglist> QBrush::style()</arglist>
    </member>
    <member kind="function">
      <name>texture</name>
      <anchor>texture</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QBrush &amp; b )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QBrush &amp; b )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QBrush &amp; b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QBuffer</name>
    <filename>qbuffer.html</filename>
    <member kind="function">
      <name>QBuffer</name>
      <anchor>QBuffer</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QBuffer</name>
      <anchor>QBuffer-2</anchor>
      <arglist>( QByteArray * byteArray, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>buffer</name>
      <anchor>buffer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buffer</name>
      <anchor>buffer-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBuffer</name>
      <anchor>setBuffer</anchor>
      <arglist>( QByteArray * byteArray )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QByteArray &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData-2</anchor>
      <arglist>( const char * data, int size )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( QAbstractButton * b )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QAbstractButton * b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QButtonGroup</name>
    <filename>qbuttongroup.html</filename>
    <member kind="function">
      <name>QButtonGroup</name>
      <anchor>QButtonGroup</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addButton</name>
      <anchor>addButton</anchor>
      <arglist>( QAbstractButton * button )</arglist>
    </member>
    <member kind="function">
      <name>buttonClicked</name>
      <anchor>buttonClicked</anchor>
      <arglist>( QAbstractButton * button )</arglist>
    </member>
    <member kind="function">
      <name>checkedButton</name>
      <anchor>checkedButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeButton</name>
      <anchor>removeButton</anchor>
      <arglist>( QAbstractButton * button )</arglist>
    </member>
    <member kind="function">
      <name>QByteArray</name>
      <anchor>QByteArray-6</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>duplicate</name>
      <anchor>duplicate</anchor>
      <arglist>( const QByteArray &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>duplicate</name>
      <anchor>duplicate-2</anchor>
      <arglist>( const char * a, uint n )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( char c, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const char * c, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-3</anchor>
      <arglist>( const QByteArray &amp; ba, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-4</anchor>
      <arglist>( const QString &amp; s, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev</anchor>
      <arglist>( char c, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev-2</anchor>
      <arglist>( const char * c, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev-3</anchor>
      <arglist>( const QByteArray &amp; ba, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev-4</anchor>
      <arglist>( const QString &amp; s, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>leftJustify</name>
      <anchor>leftJustify</anchor>
      <arglist>( uint width, char fill = &apos; &apos;, bool truncate = false )</arglist>
    </member>
    <member kind="function">
      <name>lower</name>
      <anchor>lower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resetRawData</name>
      <anchor>resetRawData</anchor>
      <arglist>( const char * data, uint n )</arglist>
    </member>
    <member kind="function">
      <name>rightJustify</name>
      <anchor>rightJustify</anchor>
      <arglist>( uint width, char fill = &apos; &apos;, bool truncate = false )</arglist>
    </member>
    <member kind="function">
      <name>setRawData</name>
      <anchor>setRawData</anchor>
      <arglist>( const char * a, uint n )</arglist>
    </member>
    <member kind="function">
      <name>simplifyWhiteSpace</name>
      <anchor>simplifyWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stripWhiteSpace</name>
      <anchor>stripWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>upper</name>
      <anchor>upper</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QByteArray</name>
    <filename>qbytearray.html</filename>
    <member kind="function">
      <name>QByteArray</name>
      <anchor>QByteArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QByteArray</name>
      <anchor>QByteArray-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>QByteArray</name>
      <anchor>QByteArray-3</anchor>
      <arglist>( const char * data, int size )</arglist>
    </member>
    <member kind="function">
      <name>QByteArray</name>
      <anchor>QByteArray-4</anchor>
      <arglist>( int size, char ch )</arglist>
    </member>
    <member kind="function">
      <name>QByteArray</name>
      <anchor>QByteArray-5</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-2</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-3</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-4</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>capacity</name>
      <anchor>capacity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>chop</name>
      <anchor>chop</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constData</name>
      <anchor>constData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>endsWith</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>endsWith-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>endsWith-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( char ch, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromBase64</name>
      <anchor>fromBase64</anchor>
      <arglist>( const QByteArray &amp; base64 )</arglist>
    </member>
    <member kind="function">
      <name>fromRawData</name>
      <anchor>fromRawData</anchor>
      <arglist>( const char * data, int size )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( const QByteArray &amp; ba, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf-2</anchor>
      <arglist>( const QString &amp; str, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf-3</anchor>
      <arglist>( const char * str, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf-4</anchor>
      <arglist>( char ch, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( int i, const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( int i, const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-3</anchor>
      <arglist>( int i, const char * str )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-4</anchor>
      <arglist>( int i, char ch )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf</anchor>
      <arglist>( const QByteArray &amp; ba, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf-2</anchor>
      <arglist>( const QString &amp; str, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf-3</anchor>
      <arglist>( const char * str, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf-4</anchor>
      <arglist>( char ch, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>left</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>leftJustified</name>
      <anchor>leftJustified</anchor>
      <arglist>( int width, char fill = &apos; &apos;, bool truncate = false )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mid</name>
      <anchor>mid</anchor>
      <arglist>( int pos, int len = -1 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number</anchor>
      <arglist>( int n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-2</anchor>
      <arglist>( uint n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-3</anchor>
      <arglist>( qint64 n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-4</anchor>
      <arglist>( quint64 n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-5</anchor>
      <arglist>( double n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( int pos, int len )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( int pos, int len, const QByteArray &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-2</anchor>
      <arglist>( int pos, int len, const char * after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-3</anchor>
      <arglist>( const QByteArray &amp; before, const QByteArray &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-4</anchor>
      <arglist>( const char * before, const QByteArray &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-5</anchor>
      <arglist>( const QByteArray &amp; before, const char * after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-6</anchor>
      <arglist>( const QString &amp; before, const QByteArray &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-7</anchor>
      <arglist>( const QString &amp; before, const char * after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-8</anchor>
      <arglist>( const char * before, const char * after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-9</anchor>
      <arglist>( char before, const QByteArray &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-10</anchor>
      <arglist>( char before, const QString &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-11</anchor>
      <arglist>( char before, const char * after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-12</anchor>
      <arglist>( char before, char after )</arglist>
    </member>
    <member kind="function">
      <name>reserve</name>
      <anchor>reserve</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>right</name>
      <anchor>right</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>rightJustified</name>
      <anchor>rightJustified</anchor>
      <arglist>( int width, char fill = &apos; &apos;, bool truncate = false )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum</anchor>
      <arglist>( int n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-2</anchor>
      <arglist>( qlonglong, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-3</anchor>
      <arglist>( qulonglong, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-4</anchor>
      <arglist>( uint n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-5</anchor>
      <arglist>( short n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-6</anchor>
      <arglist>( ushort n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-7</anchor>
      <arglist>( double n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-8</anchor>
      <arglist>( float n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>simplified</name>
      <anchor>simplified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split</anchor>
      <arglist>( char sep )</arglist>
    </member>
    <member kind="function">
      <name>squeeze</name>
      <anchor>squeeze</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>startsWith</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>startsWith-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>startsWith-3</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>toBase64</name>
      <anchor>toBase64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDouble</name>
      <anchor>toDouble</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toFloat</name>
      <anchor>toFloat</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toInt</name>
      <anchor>toInt</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toLongLong</name>
      <anchor>toLongLong</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toLower</name>
      <anchor>toLower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toShort</name>
      <anchor>toShort</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toUInt</name>
      <anchor>toUInt</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toULongLong</name>
      <anchor>toULongLong</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toUShort</name>
      <anchor>toUShort</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toUpper</name>
      <anchor>toUpper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>trimmed</name>
      <anchor>trimmed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>truncate</name>
      <anchor>truncate</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-char--2a</anchor>
      <arglist> const char *()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-void--2a</anchor>
      <arglist> const void *()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-2</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-3</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-4</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-3</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-4</anchor>
      <arglist>( uint i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QByteArrayMatcher</name>
    <filename>qbytearraymatcher.html</filename>
    <member kind="function">
      <name>QByteArrayMatcher</name>
      <anchor>QByteArrayMatcher</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QByteArrayMatcher</name>
      <anchor>QByteArrayMatcher-2</anchor>
      <arglist>( const QByteArray &amp; pattern )</arglist>
    </member>
    <member kind="function">
      <name>QByteArrayMatcher</name>
      <anchor>QByteArrayMatcher-3</anchor>
      <arglist>( const QByteArrayMatcher &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>indexIn</name>
      <anchor>indexIn</anchor>
      <arglist>( const QByteArray &amp; ba, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>pattern</name>
      <anchor>pattern</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPattern</name>
      <anchor>setPattern</anchor>
      <arglist>( const QByteArray &amp; pattern )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QByteArrayMatcher &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QCache</name>
      <anchor>QCache-2</anchor>
      <arglist>( int maxCost, int dummy )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCache</name>
    <filename>qcache.html</filename>
    <member kind="function">
      <name>QCache</name>
      <anchor>QCache</anchor>
      <arglist>( int maxCost = 100 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const Key &amp; key, T * object, int cost = 1 )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxCost</name>
      <anchor>maxCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>object</name>
      <anchor>object</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setMaxCost</name>
      <anchor>setMaxCost</anchor>
      <arglist>( int cost )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>totalCost</name>
      <anchor>totalCost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCDEStyle</name>
    <filename>qcdestyle.html</filename>
    <member kind="function">
      <name>QCDEStyle</name>
      <anchor>QCDEStyle</anchor>
      <arglist>( bool useHighlightCols = false )</arglist>
    </member>
    <member kind="function">
      <name>ascii</name>
      <anchor>ascii</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>latin1</name>
      <anchor>latin1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lower</name>
      <anchor>lower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mirrored</name>
      <anchor>mirrored</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>networkOrdered</name>
      <anchor>networkOrdered</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>upper</name>
      <anchor>upper</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QChar</name>
    <filename>qchar.html</filename>
    <member kind="enum">
      <name>Category</name>
      <anchor>Category-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>CombiningClass</name>
      <anchor>CombiningClass-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Decomposition</name>
      <anchor>Decomposition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Direction</name>
      <anchor>Direction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Joining</name>
      <anchor>Joining-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SpecialCharacter</name>
      <anchor>SpecialCharacter-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>UnicodeVersion</name>
      <anchor>UnicodeVersion-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-2</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-3</anchor>
      <arglist>( uchar ch )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-4</anchor>
      <arglist>( QLatin1Char ch )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-5</anchor>
      <arglist>( uchar cell, uchar row )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-6</anchor>
      <arglist>( ushort code )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-7</anchor>
      <arglist>( short code )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-8</anchor>
      <arglist>( uint code )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-9</anchor>
      <arglist>( int code )</arglist>
    </member>
    <member kind="function">
      <name>QChar</name>
      <anchor>QChar-10</anchor>
      <arglist>( SpecialCharacter ch )</arglist>
    </member>
    <member kind="function">
      <name>category</name>
      <anchor>category</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cell</name>
      <anchor>cell</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>combiningClass</name>
      <anchor>combiningClass</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>decomposition</name>
      <anchor>decomposition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>decompositionTag</name>
      <anchor>decompositionTag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>digitValue</name>
      <anchor>digitValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>direction</name>
      <anchor>direction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromAscii</name>
      <anchor>fromAscii</anchor>
      <arglist>( char c )</arglist>
    </member>
    <member kind="function">
      <name>fromLatin1</name>
      <anchor>fromLatin1</anchor>
      <arglist>( char c )</arglist>
    </member>
    <member kind="function">
      <name>hasMirrored</name>
      <anchor>hasMirrored</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDigit</name>
      <anchor>isDigit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLetter</name>
      <anchor>isLetter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLetterOrNumber</name>
      <anchor>isLetterOrNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLower</name>
      <anchor>isLower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMark</name>
      <anchor>isMark</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNumber</name>
      <anchor>isNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPrint</name>
      <anchor>isPrint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPunct</name>
      <anchor>isPunct</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSpace</name>
      <anchor>isSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSymbol</name>
      <anchor>isSymbol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isUpper</name>
      <anchor>isUpper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>joining</name>
      <anchor>joining</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mirroredChar</name>
      <anchor>mirroredChar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toAscii</name>
      <anchor>toAscii</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLatin1</name>
      <anchor>toLatin1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLower</name>
      <anchor>toLower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUpper</name>
      <anchor>toUpper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unicode</name>
      <anchor>unicode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unicode</name>
      <anchor>unicode-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unicodeVersion</name>
      <anchor>unicodeVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QCheckBox</name>
      <anchor>QCheckBox-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QCheckBox</name>
      <anchor>QCheckBox-4</anchor>
      <arglist>( const QString &amp; text, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>setNoChange</name>
      <anchor>setNoChange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setState</name>
      <anchor>setState</anchor>
      <arglist>( ToggleState state )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCheckBox</name>
    <filename>qcheckbox.html</filename>
    <member kind="enum">
      <name>ToggleState</name>
      <anchor>ToggleState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QCheckBox</name>
      <anchor>QCheckBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QCheckBox</name>
      <anchor>QCheckBox-2</anchor>
      <arglist>( const QString &amp; text, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>CheckState</name>
      <anchor>checkState</anchor>
      <arglist> QCheckBox::checkState()</arglist>
    </member>
    <member kind="function">
      <name>setCheckState</name>
      <anchor>setCheckState</anchor>
      <arglist>( Qt::CheckState state )</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( int state )</arglist>
    </member>
    <member kind="function">
      <name>inserted</name>
      <anchor>inserted</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QChildEvent</name>
    <filename>qchildevent.html</filename>
    <member kind="function">
      <name>QChildEvent</name>
      <anchor>QChildEvent</anchor>
      <arglist>( Type type, QObject * child )</arglist>
    </member>
    <member kind="function">
      <name>added</name>
      <anchor>added</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>child</name>
      <anchor>child</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>polished</name>
      <anchor>polished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removed</name>
      <anchor>removed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( QMimeSource * src, Mode mode = Clipboard )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QClipboard</name>
    <filename>qclipboard.html</filename>
    <member kind="enum">
      <name>Mode</name>
      <anchor>Mode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>( Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>dataChanged</name>
      <anchor>dataChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>image</anchor>
      <arglist>( Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>ownsClipboard</name>
      <anchor>ownsClipboard</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ownsSelection</name>
      <anchor>ownsSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setImage</name>
      <anchor>setImage</anchor>
      <arglist>( const QImage &amp; image, Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>setMimeData</name>
      <anchor>setMimeData</anchor>
      <arglist>( QMimeData * src, Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap, Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text, Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>supportsSelection</name>
      <anchor>supportsSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( Mode mode = Clipboard )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text-2</anchor>
      <arglist>( QString &amp; subtype, Mode mode = Clipboard )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCloseEvent</name>
    <filename>qcloseevent.html</filename>
    <member kind="function">
      <name>QCloseEvent</name>
      <anchor>QCloseEvent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-7</anchor>
      <arglist>( int x, int y, int z, Spec colorSpec )</arglist>
    </member>
    <member kind="function">
      <name>getRgba</name>
      <anchor>getRgba</anchor>
      <arglist>( int * r, int * g, int * b, int * a )</arglist>
    </member>
    <member kind="function">
      <name>hsv</name>
      <anchor>hsv</anchor>
      <arglist>( int * h, int * s, int * v )</arglist>
    </member>
    <member kind="function">
      <name>pixel</name>
      <anchor>pixel</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>rgb</name>
      <anchor>rgb-2</anchor>
      <arglist>( int * r, int * g, int * b )</arglist>
    </member>
    <member kind="function">
      <name>setRgba</name>
      <anchor>setRgba-2</anchor>
      <arglist>( int r, int g, int b, int a )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QColor</name>
    <filename>qcolor.html</filename>
    <member kind="enum">
      <name>Spec</name>
      <anchor>Spec-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-2</anchor>
      <arglist>( int r, int g, int b, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-3</anchor>
      <arglist>( QRgb color )</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-4</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-5</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-6</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>QColor</name>
      <anchor>QColor-8</anchor>
      <arglist>( Qt::GlobalColor color )</arglist>
    </member>
    <member kind="function">
      <name>alpha</name>
      <anchor>alpha</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alphaF</name>
      <anchor>alphaF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>black</name>
      <anchor>black</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blackF</name>
      <anchor>blackF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blue</name>
      <anchor>blue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blueF</name>
      <anchor>blueF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colorNames</name>
      <anchor>colorNames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>convertTo</name>
      <anchor>convertTo</anchor>
      <arglist>( Spec colorSpec )</arglist>
    </member>
    <member kind="function">
      <name>cyan</name>
      <anchor>cyan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cyanF</name>
      <anchor>cyanF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dark</name>
      <anchor>dark</anchor>
      <arglist>( int factor = 200 )</arglist>
    </member>
    <member kind="function">
      <name>fromCmyk</name>
      <anchor>fromCmyk</anchor>
      <arglist>( int c, int m, int y, int k, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>fromCmykF</name>
      <anchor>fromCmykF</anchor>
      <arglist>( qreal c, qreal m, qreal y, qreal k, qreal a = 1.0 )</arglist>
    </member>
    <member kind="function">
      <name>fromHsv</name>
      <anchor>fromHsv</anchor>
      <arglist>( int h, int s, int v, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>fromHsvF</name>
      <anchor>fromHsvF</anchor>
      <arglist>( qreal h, qreal s, qreal v, qreal a = 1.0 )</arglist>
    </member>
    <member kind="function">
      <name>fromRgb</name>
      <anchor>fromRgb</anchor>
      <arglist>( QRgb rgb )</arglist>
    </member>
    <member kind="function">
      <name>fromRgb</name>
      <anchor>fromRgb-2</anchor>
      <arglist>( int r, int g, int b, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>fromRgbF</name>
      <anchor>fromRgbF</anchor>
      <arglist>( qreal r, qreal g, qreal b, qreal a = 1.0 )</arglist>
    </member>
    <member kind="function">
      <name>fromRgba</name>
      <anchor>fromRgba</anchor>
      <arglist>( QRgb rgba )</arglist>
    </member>
    <member kind="function">
      <name>getCmyk</name>
      <anchor>getCmyk</anchor>
      <arglist>( int * c, int * m, int * y, int * k, int * a = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getCmykF</name>
      <anchor>getCmykF</anchor>
      <arglist>( qreal * c, qreal * m, qreal * y, qreal * k, qreal * a = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getHsv</name>
      <anchor>getHsv</anchor>
      <arglist>( int * h, int * s, int * v, int * a = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getHsvF</name>
      <anchor>getHsvF</anchor>
      <arglist>( qreal * h, qreal * s, qreal * v, qreal * a = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getRgb</name>
      <anchor>getRgb</anchor>
      <arglist>( int * r, int * g, int * b, int * a = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getRgbF</name>
      <anchor>getRgbF</anchor>
      <arglist>( qreal * r, qreal * g, qreal * b, qreal * a = 0 )</arglist>
    </member>
    <member kind="function">
      <name>green</name>
      <anchor>green</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>greenF</name>
      <anchor>greenF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hue</name>
      <anchor>hue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hueF</name>
      <anchor>hueF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>light</name>
      <anchor>light</anchor>
      <arglist>( int factor = 150 )</arglist>
    </member>
    <member kind="function">
      <name>magenta</name>
      <anchor>magenta</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>magentaF</name>
      <anchor>magentaF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>red</name>
      <anchor>red</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redF</name>
      <anchor>redF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rgb</name>
      <anchor>rgb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rgba</name>
      <anchor>rgba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>saturation</name>
      <anchor>saturation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>saturationF</name>
      <anchor>saturationF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlpha</name>
      <anchor>setAlpha</anchor>
      <arglist>( int alpha )</arglist>
    </member>
    <member kind="function">
      <name>setAlphaF</name>
      <anchor>setAlphaF</anchor>
      <arglist>( qreal alpha )</arglist>
    </member>
    <member kind="function">
      <name>setBlue</name>
      <anchor>setBlue</anchor>
      <arglist>( int blue )</arglist>
    </member>
    <member kind="function">
      <name>setBlueF</name>
      <anchor>setBlueF</anchor>
      <arglist>( qreal blue )</arglist>
    </member>
    <member kind="function">
      <name>setCmyk</name>
      <anchor>setCmyk</anchor>
      <arglist>( int c, int m, int y, int k, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>setCmykF</name>
      <anchor>setCmykF</anchor>
      <arglist>( qreal c, qreal m, qreal y, qreal k, qreal a = 1.0 )</arglist>
    </member>
    <member kind="function">
      <name>setGreen</name>
      <anchor>setGreen</anchor>
      <arglist>( int green )</arglist>
    </member>
    <member kind="function">
      <name>setGreenF</name>
      <anchor>setGreenF</anchor>
      <arglist>( qreal green )</arglist>
    </member>
    <member kind="function">
      <name>setHsv</name>
      <anchor>setHsv</anchor>
      <arglist>( int h, int s, int v, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>setHsvF</name>
      <anchor>setHsvF</anchor>
      <arglist>( qreal h, qreal s, qreal v, qreal a = 1.0 )</arglist>
    </member>
    <member kind="function">
      <name>setNamedColor</name>
      <anchor>setNamedColor</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setRed</name>
      <anchor>setRed</anchor>
      <arglist>( int red )</arglist>
    </member>
    <member kind="function">
      <name>setRedF</name>
      <anchor>setRedF</anchor>
      <arglist>( qreal red )</arglist>
    </member>
    <member kind="function">
      <name>setRgb</name>
      <anchor>setRgb</anchor>
      <arglist>( int r, int g, int b, int a = 255 )</arglist>
    </member>
    <member kind="function">
      <name>setRgb</name>
      <anchor>setRgb-2</anchor>
      <arglist>( QRgb rgb )</arglist>
    </member>
    <member kind="function">
      <name>setRgbF</name>
      <anchor>setRgbF</anchor>
      <arglist>( qreal r, qreal g, qreal b, qreal a = 1.0 )</arglist>
    </member>
    <member kind="function">
      <name>setRgba</name>
      <anchor>setRgba</anchor>
      <arglist>( QRgb rgba )</arglist>
    </member>
    <member kind="function">
      <name>spec</name>
      <anchor>spec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toCmyk</name>
      <anchor>toCmyk</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toHsv</name>
      <anchor>toHsv</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toRgb</name>
      <anchor>toRgb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>valueF</name>
      <anchor>valueF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>yellow</name>
      <anchor>yellow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>yellowF</name>
      <anchor>yellowF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( Qt::GlobalColor color )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>getColor</name>
      <anchor>getColor-2</anchor>
      <arglist>( const QColor &amp; init, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>getRgba</name>
      <anchor>getRgba-2</anchor>
      <arglist>( QRgb rgba, bool * ok, QWidget * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QColorDialog</name>
    <filename>qcolordialog.html</filename>
    <member kind="function">
      <name>customColor</name>
      <anchor>customColor</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>customCount</name>
      <anchor>customCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getColor</name>
      <anchor>getColor</anchor>
      <arglist>( const QColor &amp; initial = Qt::white, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getRgba</name>
      <anchor>getRgba</anchor>
      <arglist>( QRgb initial, bool * ok = 0, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setCustomColor</name>
      <anchor>setCustomColor</anchor>
      <arglist>( int number, QRgb color )</arglist>
    </member>
    <member kind="function">
      <name>setStandardColor</name>
      <anchor>setStandardColor</anchor>
      <arglist>( int number, QRgb color )</arglist>
    </member>
    <member kind="function">
      <name>background</name>
      <anchor>background</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>base</name>
      <anchor>base</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>brightText</name>
      <anchor>brightText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>button</name>
      <anchor>button</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonText</name>
      <anchor>buttonText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dark</name>
      <anchor>dark</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>foreground</name>
      <anchor>foreground</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlight</name>
      <anchor>highlight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlightedText</name>
      <anchor>highlightedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>light</name>
      <anchor>light</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>link</name>
      <anchor>link</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>linkVisited</name>
      <anchor>linkVisited</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mid</name>
      <anchor>mid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>midlight</name>
      <anchor>midlight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>shadow</name>
      <anchor>shadow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QColorGroup</name>
    <filename>qcolorgroup.html</filename>
    <member kind="function">
      <name>QColorGroup</name>
      <anchor>QColorGroup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QColorGroup</name>
      <anchor>QColorGroup-2</anchor>
      <arglist>( const QBrush &amp; foreground, const QBrush &amp; button, const QBrush &amp; light, const QBrush &amp; dark, const QBrush &amp; mid, const QBrush &amp; text, const QBrush &amp; bright_text, const QBrush &amp; base, const QBrush &amp; background )</arglist>
    </member>
    <member kind="function">
      <name>QColorGroup</name>
      <anchor>QColorGroup-3</anchor>
      <arglist>( const QColor &amp; foreground, const QColor &amp; background, const QColor &amp; light, const QColor &amp; dark, const QColor &amp; mid, const QColor &amp; text, const QColor &amp; base )</arglist>
    </member>
    <member kind="function">
      <name>QColorGroup</name>
      <anchor>QColorGroup-4</anchor>
      <arglist>( const QColorGroup &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QColorGroup</name>
      <anchor>QColorGroup-5</anchor>
      <arglist>( const QPalette &amp; pal )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QColorGroup &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QColorGroup &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QComboBox</name>
      <anchor>QComboBox-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QComboBox</name>
      <anchor>QComboBox-3</anchor>
      <arglist>( bool rw, QWidget * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem</anchor>
      <arglist>( const QString &amp; text, int index )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-2</anchor>
      <arglist>( const QPixmap &amp; pixmap, int index )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-3</anchor>
      <arglist>( const QPixmap &amp; pixmap, const QString &amp; text, int index )</arglist>
    </member>
    <member kind="function">
      <name>clearEdit</name>
      <anchor>clearEdit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearValidator</name>
      <anchor>clearValidator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>editable</name>
      <anchor>editable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-3</anchor>
      <arglist>( const QString &amp; text, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-4</anchor>
      <arglist>( const QPixmap &amp; pixmap, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-5</anchor>
      <arglist>( const QPixmap &amp; pixmap, const QString &amp; text, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertStringList</name>
      <anchor>insertStringList</anchor>
      <arglist>( const QStringList &amp; list, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertionPolicy</name>
      <anchor>insertionPolicy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>popup</name>
      <anchor>popup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentText</name>
      <anchor>setCurrentText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setInsertionPolicy</name>
      <anchor>setInsertionPolicy</anchor>
      <arglist>( InsertPolicy policy )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>textChanged</name>
      <anchor>textChanged</anchor>
      <arglist>( const QString &amp; )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QComboBox</name>
    <filename>qcombobox.html</filename>
    <member kind="enum">
      <name>InsertPolicy</name>
      <anchor>InsertPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Policy</name>
      <anchor>Policy-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SizeAdjustPolicy</name>
      <anchor>SizeAdjustPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QComboBox</name>
      <anchor>QComboBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem</anchor>
      <arglist>( const QString &amp; text, const QVariant &amp; userData = QVariant()</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, const QVariant &amp; userData = QVariant()</arglist>
    </member>
    <member kind="function">
      <name>addItems</name>
      <anchor>addItems</anchor>
      <arglist>( const QStringList &amp; texts )</arglist>
    </member>
    <member kind="function">
      <name>clearEditText</name>
      <anchor>clearEditText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>editTextChanged</name>
      <anchor>editTextChanged</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>findData</name>
      <anchor>findData</anchor>
      <arglist>( const QVariant &amp; data, int role = Qt::UserRole, QAbstractItemModel::MatchFlags flags = QAbstractItemModel::MatchExactly | QAbstractItemModel::MatchCase )</arglist>
    </member>
    <member kind="function">
      <name>findText</name>
      <anchor>findText</anchor>
      <arglist>( const QString &amp; text, QAbstractItemModel::MatchFlags flags = QAbstractItemModel::MatchExactly | QAbstractItemModel::MatchCase )</arglist>
    </member>
    <member kind="function">
      <name>hidePopup</name>
      <anchor>hidePopup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( int index, const QString &amp; text, const QVariant &amp; userData = QVariant()</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-2</anchor>
      <arglist>( int index, const QIcon &amp; icon, const QString &amp; text, const QVariant &amp; userData = QVariant()</arglist>
    </member>
    <member kind="function">
      <name>insertItems</name>
      <anchor>insertItems</anchor>
      <arglist>( int index, const QStringList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>itemData</name>
      <anchor>itemData</anchor>
      <arglist>( int index, int role = Qt::UserRole )</arglist>
    </member>
    <member kind="function">
      <name>itemDelegate</name>
      <anchor>itemDelegate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemIcon</name>
      <anchor>itemIcon</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemText</name>
      <anchor>itemText</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>lineEdit</name>
      <anchor>lineEdit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEditText</name>
      <anchor>setEditText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setItemData</name>
      <anchor>setItemData</anchor>
      <arglist>( int index, const QVariant &amp; value, int role = Qt::UserRole )</arglist>
    </member>
    <member kind="function">
      <name>setItemDelegate</name>
      <anchor>setItemDelegate</anchor>
      <arglist>( QAbstractItemDelegate * delegate )</arglist>
    </member>
    <member kind="function">
      <name>setItemIcon</name>
      <anchor>setItemIcon</anchor>
      <arglist>( int index, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setItemText</name>
      <anchor>setItemText</anchor>
      <arglist>( int index, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setLineEdit</name>
      <anchor>setLineEdit</anchor>
      <arglist>( QLineEdit * edit )</arglist>
    </member>
    <member kind="function">
      <name>setModel</name>
      <anchor>setModel</anchor>
      <arglist>( QAbstractItemModel * model )</arglist>
    </member>
    <member kind="function">
      <name>setValidator</name>
      <anchor>setValidator</anchor>
      <arglist>( const QValidator * validator )</arglist>
    </member>
    <member kind="function">
      <name>setView</name>
      <anchor>setView</anchor>
      <arglist>( QAbstractItemView * itemView )</arglist>
    </member>
    <member kind="function">
      <name>showPopup</name>
      <anchor>showPopup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>validator</name>
      <anchor>validator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>view</name>
      <anchor>view</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCommonStyle</name>
    <filename>qcommonstyle.html</filename>
    <member kind="function">
      <name>QCommonStyle</name>
      <anchor>QCommonStyle</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QConicalGradient</name>
    <filename>qconicalgradient.html</filename>
    <member kind="function">
      <name>QConicalGradient</name>
      <anchor>QConicalGradient</anchor>
      <arglist>( const QPointF &amp; center, qreal angle )</arglist>
    </member>
    <member kind="function">
      <name>QConicalGradient</name>
      <anchor>QConicalGradient-2</anchor>
      <arglist>( qreal cx, qreal cy, qreal angle )</arglist>
    </member>
    <member kind="function">
      <name>angle</name>
      <anchor>angle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>center</name>
      <anchor>center</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QContextMenuEvent</name>
      <anchor>QContextMenuEvent-3</anchor>
      <arglist>( Reason reason, const QPoint &amp; pos, const QPoint &amp; globalPos, int dummy )</arglist>
    </member>
    <member kind="function">
      <name>QContextMenuEvent</name>
      <anchor>QContextMenuEvent-4</anchor>
      <arglist>( Reason reason, const QPoint &amp; pos, int dummy )</arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>state</anchor>
      <arglist> QContextMenuEvent::state()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QContextMenuEvent</name>
    <filename>qcontextmenuevent.html</filename>
    <member kind="enum">
      <name>Reason</name>
      <anchor>Reason-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QContextMenuEvent</name>
      <anchor>QContextMenuEvent</anchor>
      <arglist>( Reason reason, const QPoint &amp; pos, const QPoint &amp; globalPos )</arglist>
    </member>
    <member kind="function">
      <name>QContextMenuEvent</name>
      <anchor>QContextMenuEvent-2</anchor>
      <arglist>( Reason reason, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>globalPos</name>
      <anchor>globalPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalX</name>
      <anchor>globalX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalY</name>
      <anchor>globalY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reason</name>
      <anchor>reason</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QCopChannel</name>
      <anchor>QCopChannel-2</anchor>
      <arglist>( const QString &amp; channel, QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCopChannel</name>
    <filename>qcopchannel.html</filename>
    <member kind="function">
      <name>QCopChannel</name>
      <anchor>QCopChannel</anchor>
      <arglist>( const QString &amp; channel, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>channel</name>
      <anchor>channel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRegistered</name>
      <anchor>isRegistered</anchor>
      <arglist>( const QString &amp; channel )</arglist>
    </member>
    <member kind="function">
      <name>receive</name>
      <anchor>receive</anchor>
      <arglist>( const QString &amp; msg, const QByteArray &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>received</name>
      <anchor>received</anchor>
      <arglist>( const QString &amp; msg, const QByteArray &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>send</name>
      <anchor>send</anchor>
      <arglist>( const QString &amp; channel, const QString &amp; msg, const QByteArray &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>send</name>
      <anchor>send-2</anchor>
      <arglist>( const QString &amp; channel, const QString &amp; msg )</arglist>
    </member>
    <member kind="function">
      <name>enter_loop</name>
      <anchor>enter_loop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exit_loop</name>
      <anchor>exit_loop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lock</name>
      <anchor>lock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>locked</name>
      <anchor>locked</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loopLevel</name>
      <anchor>loopLevel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processOneEvent</name>
      <anchor>processOneEvent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tryLock</name>
      <anchor>tryLock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unlock</name>
      <anchor>unlock</anchor>
      <arglist>( bool wakeUpGui = true )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCoreApplication</name>
    <filename>qcoreapplication.html</filename>
    <member kind="enum">
      <name>Encoding</name>
      <anchor>Encoding-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EventFilter</name>
      <anchor>EventFilter-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QCoreApplication</name>
      <anchor>QCoreApplication</anchor>
      <arglist>( int &amp; argc, char ** argv )</arglist>
    </member>
    <member kind="function">
      <name>aboutToQuit</name>
      <anchor>aboutToQuit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addLibraryPath</name>
      <anchor>addLibraryPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>applicationDirPath</name>
      <anchor>applicationDirPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>applicationFilePath</name>
      <anchor>applicationFilePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>argc</name>
      <anchor>argc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>argv</name>
      <anchor>argv</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closingDown</name>
      <anchor>closingDown</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exit</name>
      <anchor>exit</anchor>
      <arglist>( int returnCode = 0 )</arglist>
    </member>
    <member kind="function">
      <name>filterEvent</name>
      <anchor>filterEvent</anchor>
      <arglist>( void * message, long * result )</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>flush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPendingEvents</name>
      <anchor>hasPendingEvents</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>installTranslator</name>
      <anchor>installTranslator</anchor>
      <arglist>( QTranslator * mf )</arglist>
    </member>
    <member kind="function">
      <name>instance</name>
      <anchor>instance</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>libraryPaths</name>
      <anchor>libraryPaths</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>notify</name>
      <anchor>notify</anchor>
      <arglist>( QObject * receiver, QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>postEvent</name>
      <anchor>postEvent</anchor>
      <arglist>( QObject * receiver, QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>processEvents</name>
      <anchor>processEvents</anchor>
      <arglist>( QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents )</arglist>
    </member>
    <member kind="function">
      <name>processEvents</name>
      <anchor>processEvents-2</anchor>
      <arglist>( QEventLoop::ProcessEventsFlags flags, int maxtime )</arglist>
    </member>
    <member kind="function">
      <name>quit</name>
      <anchor>quit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeLibraryPath</name>
      <anchor>removeLibraryPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>removePostedEvents</name>
      <anchor>removePostedEvents</anchor>
      <arglist>( QObject * receiver )</arglist>
    </member>
    <member kind="function">
      <name>removeTranslator</name>
      <anchor>removeTranslator</anchor>
      <arglist>( QTranslator * mf )</arglist>
    </member>
    <member kind="function">
      <name>sendEvent</name>
      <anchor>sendEvent</anchor>
      <arglist>( QObject * receiver, QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>sendPostedEvents</name>
      <anchor>sendPostedEvents</anchor>
      <arglist>( QObject * receiver, int event_type )</arglist>
    </member>
    <member kind="function">
      <name>sendPostedEvents</name>
      <anchor>sendPostedEvents-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEventFilter</name>
      <anchor>setEventFilter</anchor>
      <arglist>( EventFilter filter )</arglist>
    </member>
    <member kind="function">
      <name>setLibraryPaths</name>
      <anchor>setLibraryPaths</anchor>
      <arglist>( const QStringList &amp; paths )</arglist>
    </member>
    <member kind="function">
      <name>startingUp</name>
      <anchor>startingUp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( const char * context, const char * sourceText, const char * comment = 0, Encoding encoding = DefaultCodec )</arglist>
    </member>
    <member kind="function">
      <name>unixSignal</name>
      <anchor>unixSignal</anchor>
      <arglist>( int number )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCursor</name>
    <filename>qcursor.html</filename>
    <member kind="function">
      <name>QCursor</name>
      <anchor>QCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QCursor</name>
      <anchor>QCursor-2</anchor>
      <arglist>( Qt::CursorShape shape )</arglist>
    </member>
    <member kind="function">
      <name>QCursor</name>
      <anchor>QCursor-3</anchor>
      <arglist>( const QBitmap &amp; bitmap, const QBitmap &amp; mask, int hotX = -1, int hotY = -1 )</arglist>
    </member>
    <member kind="function">
      <name>QCursor</name>
      <anchor>QCursor-4</anchor>
      <arglist>( const QPixmap &amp; pixmap, int hotX = -1, int hotY = -1 )</arglist>
    </member>
    <member kind="function">
      <name>QCursor</name>
      <anchor>QCursor-5</anchor>
      <arglist>( const QCursor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>QCursor</name>
      <anchor>QCursor-6</anchor>
      <arglist>( HCURSOR handle )</arglist>
    </member>
    <member kind="function">
      <name>bitmap</name>
      <anchor>bitmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>handle-2</anchor>
      <arglist> QCursor::handle()</arglist>
    </member>
    <member kind="function">
      <name>hotSpot</name>
      <anchor>hotSpot</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mask</name>
      <anchor>mask</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPos</name>
      <anchor>setPos</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>setPos</name>
      <anchor>setPos-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setShape</name>
      <anchor>setShape</anchor>
      <arglist>( Qt::CursorShape shape )</arglist>
    </member>
    <member kind="function">
      <name>CursorShape</name>
      <anchor>shape</anchor>
      <arglist> QCursor::shape()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QCursor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>QCustomEvent</name>
      <anchor>QCustomEvent</anchor>
      <arglist>( int type, void * data = 0 )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( void * data )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QCustomEvent</name>
    <filename>qcustomevent.html</filename>
    <member kind="function">
      <name>QDataStream</name>
      <anchor>QDataStream-3</anchor>
      <arglist>( QByteArray * array, int mode )</arglist>
    </member>
    <member kind="function">
      <name>eof</name>
      <anchor>eof</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPrintableData</name>
      <anchor>isPrintableData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readRawBytes</name>
      <anchor>readRawBytes</anchor>
      <arglist>( char * str, uint len )</arglist>
    </member>
    <member kind="function">
      <name>setPrintableData</name>
      <anchor>setPrintableData</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>writeRawBytes</name>
      <anchor>writeRawBytes</anchor>
      <arglist>( const char * str, uint len )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDataStream</name>
    <filename>qdatastream.html</filename>
    <member kind="enum">
      <name>ByteOrder</name>
      <anchor>ByteOrder-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Status</name>
      <anchor>Status-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Version</name>
      <anchor>Version-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDataStream</name>
      <anchor>QDataStream</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDataStream</name>
      <anchor>QDataStream-2</anchor>
      <arglist>( QIODevice * d )</arglist>
    </member>
    <member kind="function">
      <name>QDataStream</name>
      <anchor>QDataStream-4</anchor>
      <arglist>( QByteArray * a, QIODevice::OpenMode mode )</arglist>
    </member>
    <member kind="function">
      <name>QDataStream</name>
      <anchor>QDataStream-5</anchor>
      <arglist>( const QByteArray &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>byteOrder</name>
      <anchor>byteOrder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBytes</name>
      <anchor>readBytes</anchor>
      <arglist>( char *&amp; s, uint &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>readRawData</name>
      <anchor>readRawData</anchor>
      <arglist>( char * s, int len )</arglist>
    </member>
    <member kind="function">
      <name>resetStatus</name>
      <anchor>resetStatus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setByteOrder</name>
      <anchor>setByteOrder</anchor>
      <arglist>( ByteOrder bo )</arglist>
    </member>
    <member kind="function">
      <name>setDevice</name>
      <anchor>setDevice</anchor>
      <arglist>( QIODevice * d )</arglist>
    </member>
    <member kind="function">
      <name>setStatus</name>
      <anchor>setStatus</anchor>
      <arglist>( Status status )</arglist>
    </member>
    <member kind="function">
      <name>setVersion</name>
      <anchor>setVersion</anchor>
      <arglist>( int v )</arglist>
    </member>
    <member kind="function">
      <name>status</name>
      <anchor>status</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unsetDevice</name>
      <anchor>unsetDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>version</name>
      <anchor>version</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>writeBytes</name>
      <anchor>writeBytes</anchor>
      <arglist>( const char * s, uint len )</arglist>
    </member>
    <member kind="function">
      <name>writeRawData</name>
      <anchor>writeRawData</anchor>
      <arglist>( const char * s, int len )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( qint8 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-2</anchor>
      <arglist>( bool i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-3</anchor>
      <arglist>( quint8 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-4</anchor>
      <arglist>( quint16 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-5</anchor>
      <arglist>( qint16 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-6</anchor>
      <arglist>( qint32 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-7</anchor>
      <arglist>( quint64 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-8</anchor>
      <arglist>( qint64 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-9</anchor>
      <arglist>( quint32 i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-10</anchor>
      <arglist>( float f )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-11</anchor>
      <arglist>( double f )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-12</anchor>
      <arglist>( const char * s )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt</anchor>
      <arglist>( qint8 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-2</anchor>
      <arglist>( bool &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-3</anchor>
      <arglist>( quint8 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-4</anchor>
      <arglist>( quint16 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-5</anchor>
      <arglist>( qint16 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-6</anchor>
      <arglist>( quint32 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-7</anchor>
      <arglist>( qint32 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-8</anchor>
      <arglist>( quint64 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-9</anchor>
      <arglist>( qint64 &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-10</anchor>
      <arglist>( float &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-11</anchor>
      <arglist>( double &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-12</anchor>
      <arglist>( char *&amp; s )</arglist>
    </member>
    <member kind="function">
      <name>currentDate</name>
      <anchor>currentDate</anchor>
      <arglist>( Qt::TimeSpec spec )</arglist>
    </member>
    <member kind="function">
      <name>dayName</name>
      <anchor>dayName</anchor>
      <arglist>( int weekday )</arglist>
    </member>
    <member kind="function">
      <name>leapYear</name>
      <anchor>leapYear</anchor>
      <arglist>( int year )</arglist>
    </member>
    <member kind="function">
      <name>monthName</name>
      <anchor>monthName</anchor>
      <arglist>( int month )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDate</name>
    <filename>qdate.html</filename>
    <member kind="function">
      <name>QDate</name>
      <anchor>QDate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDate</name>
      <anchor>QDate-2</anchor>
      <arglist>( int y, int m, int d )</arglist>
    </member>
    <member kind="function">
      <name>addDays</name>
      <anchor>addDays</anchor>
      <arglist>( int ndays )</arglist>
    </member>
    <member kind="function">
      <name>addMonths</name>
      <anchor>addMonths</anchor>
      <arglist>( int nmonths )</arglist>
    </member>
    <member kind="function">
      <name>addYears</name>
      <anchor>addYears</anchor>
      <arglist>( int nyears )</arglist>
    </member>
    <member kind="function">
      <name>currentDate</name>
      <anchor>currentDate-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>day</name>
      <anchor>day</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dayOfWeek</name>
      <anchor>dayOfWeek</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dayOfYear</name>
      <anchor>dayOfYear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>daysInMonth</name>
      <anchor>daysInMonth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>daysInYear</name>
      <anchor>daysInYear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>daysTo</name>
      <anchor>daysTo</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>fromJulianDay</name>
      <anchor>fromJulianDay</anchor>
      <arglist>( int jd )</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString</anchor>
      <arglist>( const QString &amp; string, Qt::DateFormat format = Qt::TextDate )</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString-2</anchor>
      <arglist>( const QString &amp; string, const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>isLeapYear</name>
      <anchor>isLeapYear</anchor>
      <arglist>( int year )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid-2</anchor>
      <arglist>( int y, int m, int d )</arglist>
    </member>
    <member kind="function">
      <name>longDayName</name>
      <anchor>longDayName</anchor>
      <arglist>( int weekday )</arglist>
    </member>
    <member kind="function">
      <name>longMonthName</name>
      <anchor>longMonthName</anchor>
      <arglist>( int month )</arglist>
    </member>
    <member kind="function">
      <name>month</name>
      <anchor>month</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setYMD</name>
      <anchor>setYMD</anchor>
      <arglist>( int y, int m, int d )</arglist>
    </member>
    <member kind="function">
      <name>shortDayName</name>
      <anchor>shortDayName</anchor>
      <arglist>( int weekday )</arglist>
    </member>
    <member kind="function">
      <name>shortMonthName</name>
      <anchor>shortMonthName</anchor>
      <arglist>( int month )</arglist>
    </member>
    <member kind="function">
      <name>toJulianDay</name>
      <anchor>toJulianDay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-2</anchor>
      <arglist>( Qt::DateFormat format = Qt::TextDate )</arglist>
    </member>
    <member kind="function">
      <name>weekNumber</name>
      <anchor>weekNumber</anchor>
      <arglist>( int * yearNumber = 0 )</arglist>
    </member>
    <member kind="function">
      <name>year</name>
      <anchor>year</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QDate &amp; d )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDateEdit</name>
    <filename>qdateedit.html</filename>
    <member kind="function">
      <name>QDateEdit</name>
      <anchor>QDateEdit</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDateEdit</name>
      <anchor>QDateEdit-2</anchor>
      <arglist>( const QDate &amp; date, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>currentDateTime</name>
      <anchor>currentDateTime-2</anchor>
      <arglist>( Qt::TimeSpec spec )</arglist>
    </member>
    <member kind="function">
      <name>setTime_t</name>
      <anchor>setTime_t-2</anchor>
      <arglist>( uint secsSince1Jan1970UTC, Qt::TimeSpec spec )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDateTime</name>
    <filename>qdatetime.html</filename>
    <member kind="function">
      <name>QDateTime</name>
      <anchor>QDateTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDateTime</name>
      <anchor>QDateTime-2</anchor>
      <arglist>( const QDate &amp; date )</arglist>
    </member>
    <member kind="function">
      <name>QDateTime</name>
      <anchor>QDateTime-3</anchor>
      <arglist>( const QDate &amp; date, const QTime &amp; time, Qt::TimeSpec spec = Qt::LocalTime )</arglist>
    </member>
    <member kind="function">
      <name>QDateTime</name>
      <anchor>QDateTime-4</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>addDays</name>
      <anchor>addDays</anchor>
      <arglist>( int ndays )</arglist>
    </member>
    <member kind="function">
      <name>addMonths</name>
      <anchor>addMonths</anchor>
      <arglist>( int nmonths )</arglist>
    </member>
    <member kind="function">
      <name>addSecs</name>
      <anchor>addSecs</anchor>
      <arglist>( int nsecs )</arglist>
    </member>
    <member kind="function">
      <name>addYears</name>
      <anchor>addYears</anchor>
      <arglist>( int nyears )</arglist>
    </member>
    <member kind="function">
      <name>currentDateTime</name>
      <anchor>currentDateTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>date</name>
      <anchor>date</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>daysTo</name>
      <anchor>daysTo</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString</anchor>
      <arglist>( const QString &amp; string, Qt::DateFormat format = Qt::TextDate )</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString-2</anchor>
      <arglist>( const QString &amp; string, const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>secsTo</name>
      <anchor>secsTo</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>setDate</name>
      <anchor>setDate</anchor>
      <arglist>( const QDate &amp; date )</arglist>
    </member>
    <member kind="function">
      <name>setTime</name>
      <anchor>setTime</anchor>
      <arglist>( const QTime &amp; time )</arglist>
    </member>
    <member kind="function">
      <name>setTimeSpec</name>
      <anchor>setTimeSpec</anchor>
      <arglist>( Qt::TimeSpec spec )</arglist>
    </member>
    <member kind="function">
      <name>setTime_t</name>
      <anchor>setTime_t</anchor>
      <arglist>( uint seconds )</arglist>
    </member>
    <member kind="function">
      <name>time</name>
      <anchor>time</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TimeSpec</name>
      <anchor>timeSpec</anchor>
      <arglist> QDateTime::timeSpec()</arglist>
    </member>
    <member kind="function">
      <name>toLocalTime</name>
      <anchor>toLocalTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-2</anchor>
      <arglist>( Qt::DateFormat format = Qt::TextDate )</arglist>
    </member>
    <member kind="function">
      <name>toTimeSpec</name>
      <anchor>toTimeSpec</anchor>
      <arglist>( Qt::TimeSpec specification )</arglist>
    </member>
    <member kind="function">
      <name>toTime_t</name>
      <anchor>toTime_t</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUTC</name>
      <anchor>toUTC</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QDateTime &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDateTimeEdit</name>
    <filename>qdatetimeedit.html</filename>
    <member kind="function">
      <name>QDateTimeEdit</name>
      <anchor>QDateTimeEdit</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDateTimeEdit</name>
      <anchor>QDateTimeEdit-2</anchor>
      <arglist>( const QDateTime &amp; datetime, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDateTimeEdit</name>
      <anchor>QDateTimeEdit-3</anchor>
      <arglist>( const QDate &amp; date, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDateTimeEdit</name>
      <anchor>QDateTimeEdit-4</anchor>
      <arglist>( const QTime &amp; time, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>dateChanged</name>
      <anchor>dateChanged</anchor>
      <arglist>( const QDate &amp; date )</arglist>
    </member>
    <member kind="function">
      <name>dateTimeChanged</name>
      <anchor>dateTimeChanged</anchor>
      <arglist>( const QDateTime &amp; datetime )</arglist>
    </member>
    <member kind="function">
      <name>dateTimeFromText</name>
      <anchor>dateTimeFromText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>sectionText</name>
      <anchor>sectionText</anchor>
      <arglist>( Section section )</arglist>
    </member>
    <member kind="function">
      <name>setDateRange</name>
      <anchor>setDateRange</anchor>
      <arglist>( const QDate &amp; min, const QDate &amp; max )</arglist>
    </member>
    <member kind="function">
      <name>setTimeRange</name>
      <anchor>setTimeRange</anchor>
      <arglist>( const QTime &amp; min, const QTime &amp; max )</arglist>
    </member>
    <member kind="function">
      <name>textFromDateTime</name>
      <anchor>textFromDateTime</anchor>
      <arglist>( const QDateTime &amp; dateTime )</arglist>
    </member>
    <member kind="function">
      <name>timeChanged</name>
      <anchor>timeChanged</anchor>
      <arglist>( const QTime &amp; time )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDecoration</name>
    <filename>qdecoration.html</filename>
    <member kind="enum">
      <name>DecorationRegion</name>
      <anchor>DecorationRegion-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>DecorationState</name>
      <anchor>DecorationState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDecoration</name>
      <anchor>QDecoration</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buildSysMenu</name>
      <anchor>buildSysMenu</anchor>
      <arglist>( QWidget * widget, QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>menuTriggered</name>
      <anchor>menuTriggered</anchor>
      <arglist>( QWidget * widget, QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter, const QWidget * widget, int decorationRegion = All, DecorationState state = Normal )</arglist>
    </member>
    <member kind="function">
      <name>region</name>
      <anchor>region</anchor>
      <arglist>( const QWidget * widget, const QRect &amp; rect, int type = All )</arglist>
    </member>
    <member kind="function">
      <name>region</name>
      <anchor>region-2</anchor>
      <arglist>( const QWidget * w, int decorationRegion = All )</arglist>
    </member>
    <member kind="function">
      <name>regionAt</name>
      <anchor>regionAt</anchor>
      <arglist>( const QWidget * w, const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>regionClicked</name>
      <anchor>regionClicked</anchor>
      <arglist>( QWidget * widget, int reg )</arglist>
    </member>
    <member kind="function">
      <name>regionDoubleClicked</name>
      <anchor>regionDoubleClicked</anchor>
      <arglist>( QWidget * widget, int reg )</arglist>
    </member>
    <member kind="function">
      <name>startMove</name>
      <anchor>startMove</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>startResize</name>
      <anchor>startResize</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDecorationFactory</name>
    <filename>qdecorationfactory.html</filename>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDecorationPlugin</name>
    <filename>qdecorationplugin.html</filename>
    <member kind="function">
      <name>QDecorationPlugin</name>
      <anchor>QDecorationPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDesktopWidget</name>
    <filename>qdesktopwidget.html</filename>
    <member kind="function">
      <name>QDesktopWidget</name>
      <anchor>QDesktopWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>availableGeometry</name>
      <anchor>availableGeometry</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>availableGeometry</name>
      <anchor>availableGeometry-2</anchor>
      <arglist>( const QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>availableGeometry</name>
      <anchor>availableGeometry-3</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>isVirtualDesktop</name>
      <anchor>isVirtualDesktop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numScreens</name>
      <anchor>numScreens</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primaryScreen</name>
      <anchor>primaryScreen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>resized</anchor>
      <arglist>( int screen )</arglist>
    </member>
    <member kind="function">
      <name>screen</name>
      <anchor>screen</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>screenGeometry</name>
      <anchor>screenGeometry</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>screenGeometry</name>
      <anchor>screenGeometry-2</anchor>
      <arglist>( const QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>screenGeometry</name>
      <anchor>screenGeometry-3</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>screenNumber</name>
      <anchor>screenNumber</anchor>
      <arglist>( const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>screenNumber</name>
      <anchor>screenNumber-2</anchor>
      <arglist>( const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>workAreaResized</name>
      <anchor>workAreaResized</anchor>
      <arglist>( int screen )</arglist>
    </member>
    <member kind="function">
      <name>QDial</name>
      <anchor>QDial-2</anchor>
      <arglist>( int minValue, int maxValue, int pageStep, int value, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDial</name>
      <anchor>QDial-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>dialMoved</name>
      <anchor>dialMoved</anchor>
      <arglist>( int value )</arglist>
    </member>
    <member kind="function">
      <name>dialPressed</name>
      <anchor>dialPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dialReleased</name>
      <anchor>dialReleased</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDial</name>
    <filename>qdial.html</filename>
    <member kind="function">
      <name>QDial</name>
      <anchor>QDial</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDialog</name>
      <anchor>QDialog-2</anchor>
      <arglist>( QWidget * parent, const char * name, bool modal = false, Qt::WFlags f = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDialog</name>
    <filename>qdialog.html</filename>
    <member kind="enum">
      <name>DialogCode</name>
      <anchor>DialogCode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDialog</name>
      <anchor>QDialog</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>done</name>
      <anchor>done</anchor>
      <arglist>( int r )</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>extension</name>
      <anchor>extension</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist> QDialog::orientation()</arglist>
    </member>
    <member kind="function">
      <name>reject</name>
      <anchor>reject</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>result</name>
      <anchor>result</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setExtension</name>
      <anchor>setExtension</anchor>
      <arglist>( QWidget * extension )</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>setOrientation</anchor>
      <arglist>( Qt::Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>setResult</name>
      <anchor>setResult</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>showExtension</name>
      <anchor>showExtension</anchor>
      <arglist>( bool showIt )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>absFilePath</name>
      <anchor>absFilePath</anchor>
      <arglist>( const QString &amp; fileName, bool acceptAbsPath = true )</arglist>
    </member>
    <member kind="function">
      <name>absPath</name>
      <anchor>absPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cleanDirPath</name>
      <anchor>cleanDirPath</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>convertToAbs</name>
      <anchor>convertToAbs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentDirPath</name>
      <anchor>currentDirPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>entryInfoList</name>
      <anchor>entryInfoList</anchor>
      <arglist>( const QString &amp; nameFilter, Filters filters = NoFilter, SortFlags sort = NoSort )</arglist>
    </member>
    <member kind="function">
      <name>entryList</name>
      <anchor>entryList-2</anchor>
      <arglist>( const QString &amp; nameFilter, Filters filters = NoFilter, SortFlags sort = NoSort )</arglist>
    </member>
    <member kind="function">
      <name>homeDirPath</name>
      <anchor>homeDirPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>matchAllDirs</name>
      <anchor>matchAllDirs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir-2</anchor>
      <arglist>( const QString &amp; dirName, bool acceptAbsPath )</arglist>
    </member>
    <member kind="function">
      <name>nameFilter</name>
      <anchor>nameFilter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rmdir</name>
      <anchor>rmdir-2</anchor>
      <arglist>( const QString &amp; dirName, bool acceptAbsPath )</arglist>
    </member>
    <member kind="function">
      <name>rootDirPath</name>
      <anchor>rootDirPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMatchAllDirs</name>
      <anchor>setMatchAllDirs</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>setNameFilter</name>
      <anchor>setNameFilter</anchor>
      <arglist>( const QString &amp; nameFilter )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDir</name>
    <filename>qdir.html</filename>
    <member kind="function">
      <name>FilterSpec</name>
      <anchor>FilterSpec-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SortSpec</name>
      <anchor>SortSpec-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDir</name>
      <anchor>QDir</anchor>
      <arglist>( const QDir &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>QDir</name>
      <anchor>QDir-2</anchor>
      <arglist>( const QString &amp; path = QString()</arglist>
    </member>
    <member kind="function">
      <name>QDir</name>
      <anchor>QDir-3</anchor>
      <arglist>( const QString &amp; path, const QString &amp; nameFilter, SortFlags sort = SortFlags( Name | IgnoreCase )</arglist>
    </member>
    <member kind="function">
      <name>absoluteFilePath</name>
      <anchor>absoluteFilePath</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>absolutePath</name>
      <anchor>absolutePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addResourceSearchPath</name>
      <anchor>addResourceSearchPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>canonicalPath</name>
      <anchor>canonicalPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cd</name>
      <anchor>cd</anchor>
      <arglist>( const QString &amp; dirName )</arglist>
    </member>
    <member kind="function">
      <name>cdUp</name>
      <anchor>cdUp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cleanPath</name>
      <anchor>cleanPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>convertSeparators</name>
      <anchor>convertSeparators</anchor>
      <arglist>( const QString &amp; pathName )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>current</name>
      <anchor>current</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentPath</name>
      <anchor>currentPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dirName</name>
      <anchor>dirName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drives</name>
      <anchor>drives</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>entryInfoList</name>
      <anchor>entryInfoList-2</anchor>
      <arglist>( Filters filters = NoFilter, SortFlags sort = NoSort )</arglist>
    </member>
    <member kind="function">
      <name>entryInfoList</name>
      <anchor>entryInfoList-3</anchor>
      <arglist>( const QStringList &amp; nameFilters, Filters filters = NoFilter, SortFlags sort = NoSort )</arglist>
    </member>
    <member kind="function">
      <name>entryList</name>
      <anchor>entryList</anchor>
      <arglist>( const QStringList &amp; nameFilters, Filters filters = NoFilter, SortFlags sort = NoSort )</arglist>
    </member>
    <member kind="function">
      <name>entryList</name>
      <anchor>entryList-3</anchor>
      <arglist>( Filters filters = NoFilter, SortFlags sort = NoSort )</arglist>
    </member>
    <member kind="function">
      <name>exists</name>
      <anchor>exists</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>exists</name>
      <anchor>exists-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filePath</name>
      <anchor>filePath</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>filter</name>
      <anchor>filter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>home</name>
      <anchor>home</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>homePath</name>
      <anchor>homePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAbsolute</name>
      <anchor>isAbsolute</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAbsolutePath</name>
      <anchor>isAbsolutePath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>isReadable</name>
      <anchor>isReadable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRelative</name>
      <anchor>isRelative</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRelativePath</name>
      <anchor>isRelativePath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>isRoot</name>
      <anchor>isRoot</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeAbsolute</name>
      <anchor>makeAbsolute</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>match</name>
      <anchor>match</anchor>
      <arglist>( const QString &amp; filter, const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>match</name>
      <anchor>match-2</anchor>
      <arglist>( const QStringList &amp; filters, const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir</anchor>
      <arglist>( const QString &amp; dirName )</arglist>
    </member>
    <member kind="function">
      <name>mkpath</name>
      <anchor>mkpath</anchor>
      <arglist>( const QString &amp; dirPath )</arglist>
    </member>
    <member kind="function">
      <name>nameFilters</name>
      <anchor>nameFilters</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>path</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>relativeFilePath</name>
      <anchor>relativeFilePath</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>( const QString &amp; oldName, const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>rmdir</name>
      <anchor>rmdir</anchor>
      <arglist>( const QString &amp; dirName )</arglist>
    </member>
    <member kind="function">
      <name>rmpath</name>
      <anchor>rmpath</anchor>
      <arglist>( const QString &amp; dirPath )</arglist>
    </member>
    <member kind="function">
      <name>root</name>
      <anchor>root</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rootPath</name>
      <anchor>rootPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>separator</name>
      <anchor>separator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrent</name>
      <anchor>setCurrent</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>setFilter</name>
      <anchor>setFilter</anchor>
      <arglist>( Filters filters )</arglist>
    </member>
    <member kind="function">
      <name>setNameFilters</name>
      <anchor>setNameFilters</anchor>
      <arglist>( const QStringList &amp; nameFilters )</arglist>
    </member>
    <member kind="function">
      <name>setPath</name>
      <anchor>setPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>setSorting</name>
      <anchor>setSorting</anchor>
      <arglist>( SortFlags sort )</arglist>
    </member>
    <member kind="function">
      <name>sorting</name>
      <anchor>sorting</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>temp</name>
      <anchor>temp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tempPath</name>
      <anchor>tempPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDir &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDir &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDir &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int pos )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDirectPainter</name>
    <filename>qdirectpainter.html</filename>
    <member kind="function">
      <name>QDirectPainter</name>
      <anchor>QDirectPainter</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameBuffer</name>
      <anchor>frameBuffer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineStep</name>
      <anchor>lineStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numRects</name>
      <anchor>numRects</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>offset</name>
      <anchor>offset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>region</name>
      <anchor>region</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAreaChanged</name>
      <anchor>setAreaChanged</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>transformOrientation</name>
      <anchor>transformOrientation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xOffset</name>
      <anchor>xOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>yOffset</name>
      <anchor>yOffset</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDirModel</name>
    <filename>qdirmodel.html</filename>
    <member kind="enum">
      <name>Roles</name>
      <anchor>Roles-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDirModel</name>
      <anchor>QDirModel</anchor>
      <arglist>( const QStringList &amp; nameFilters, QDir::Filters filters, QDir::SortFlags sort, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDirModel</name>
      <anchor>QDirModel-2</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>columnCount</name>
      <anchor>columnCount</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QModelIndex &amp; index, int role = Qt::DisplayRole )</arglist>
    </member>
    <member kind="function">
      <name>dropMimeData</name>
      <anchor>dropMimeData</anchor>
      <arglist>( const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>fileIcon</name>
      <anchor>fileIcon</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>fileInfo</name>
      <anchor>fileInfo</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>filePath</name>
      <anchor>filePath</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>Filters</name>
      <anchor>filter</anchor>
      <arglist> QDirModel::filter()</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QDirModel::flags( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>hasChildren</name>
      <anchor>hasChildren</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>headerData</name>
      <anchor>headerData</anchor>
      <arglist>( int section, Qt::Orientation orientation, int role )</arglist>
    </member>
    <member kind="function">
      <name>iconProvider</name>
      <anchor>iconProvider</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index-2</anchor>
      <arglist>( const QString &amp; path, int column = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isDir</name>
      <anchor>isDir</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( const QModelIndexList &amp; indexes )</arglist>
    </member>
    <member kind="function">
      <name>mimeTypes</name>
      <anchor>mimeTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir</anchor>
      <arglist>( const QModelIndex &amp; parent, const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>nameFilters</name>
      <anchor>nameFilters</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>( const QModelIndex &amp; child )</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>rmdir</name>
      <anchor>rmdir</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>rowCount</name>
      <anchor>rowCount</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role )</arglist>
    </member>
    <member kind="function">
      <name>setFilter</name>
      <anchor>setFilter</anchor>
      <arglist>( QDir::Filters filters )</arglist>
    </member>
    <member kind="function">
      <name>setIconProvider</name>
      <anchor>setIconProvider</anchor>
      <arglist>( QFileIconProvider * provider )</arglist>
    </member>
    <member kind="function">
      <name>setNameFilters</name>
      <anchor>setNameFilters</anchor>
      <arglist>( const QStringList &amp; filters )</arglist>
    </member>
    <member kind="function">
      <name>setSorting</name>
      <anchor>setSorting</anchor>
      <arglist>( QDir::SortFlags sort )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>( int column, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>SortFlags</name>
      <anchor>sorting</anchor>
      <arglist> QDirModel::sorting()</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>supportedDropActions</anchor>
      <arglist> QDirModel::supportedDropActions()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDockWidget</name>
    <filename>qdockwidget.html</filename>
    <member kind="function">
      <name>DockWidgetAreas</name>
      <anchor>allowedAreas</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDockWidget</name>
      <anchor>QDockWidget</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0, Qt::WFlags flags = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QDockWidget</name>
      <anchor>QDockWidget-2</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags flags = 0 )</arglist>
    </member>
    <member kind="function">
      <name>allowedAreasChanged</name>
      <anchor>allowedAreasChanged</anchor>
      <arglist>( Qt::DockWidgetAreas allowedAreas )</arglist>
    </member>
    <member kind="function">
      <name>featuresChanged</name>
      <anchor>featuresChanged</anchor>
      <arglist>( DockWidgetFeatures features )</arglist>
    </member>
    <member kind="function">
      <name>isAreaAllowed</name>
      <anchor>isAreaAllowed</anchor>
      <arglist>( Qt::DockWidgetArea area )</arglist>
    </member>
    <member kind="function">
      <name>setWidget</name>
      <anchor>setWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>toggleViewAction</name>
      <anchor>toggleViewAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topLevelChanged</name>
      <anchor>topLevelChanged</anchor>
      <arglist>( bool topLevel )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomAttr</name>
    <filename>qdomattr.html</filename>
    <member kind="function">
      <name>QDomAttr</name>
      <anchor>QDomAttr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomAttr</name>
      <anchor>QDomAttr-2</anchor>
      <arglist>( const QDomAttr &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomAttr::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>ownerElement</name>
      <anchor>ownerElement</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QString &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>specified</name>
      <anchor>specified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomAttr &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomCDATASection</name>
    <filename>qdomcdatasection.html</filename>
    <member kind="function">
      <name>QDomCDATASection</name>
      <anchor>QDomCDATASection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomCDATASection</name>
      <anchor>QDomCDATASection-2</anchor>
      <arglist>( const QDomCDATASection &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomCDATASection::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomCDATASection &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomCharacterData</name>
    <filename>qdomcharacterdata.html</filename>
    <member kind="function">
      <name>QDomCharacterData</name>
      <anchor>QDomCharacterData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomCharacterData</name>
      <anchor>QDomCharacterData-2</anchor>
      <arglist>( const QDomCharacterData &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>appendData</name>
      <anchor>appendData</anchor>
      <arglist>( const QString &amp; arg )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteData</name>
      <anchor>deleteData</anchor>
      <arglist>( unsigned long offset, unsigned long count )</arglist>
    </member>
    <member kind="function">
      <name>insertData</name>
      <anchor>insertData</anchor>
      <arglist>( unsigned long offset, const QString &amp; arg )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomCharacterData::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>replaceData</name>
      <anchor>replaceData</anchor>
      <arglist>( unsigned long offset, unsigned long count, const QString &amp; arg )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QString &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>substringData</name>
      <anchor>substringData</anchor>
      <arglist>( unsigned long offset, unsigned long count )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomCharacterData &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomComment</name>
    <filename>qdomcomment.html</filename>
    <member kind="function">
      <name>QDomComment</name>
      <anchor>QDomComment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomComment</name>
      <anchor>QDomComment-2</anchor>
      <arglist>( const QDomComment &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomComment::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomComment &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomDocument</name>
    <filename>qdomdocument.html</filename>
    <member kind="function">
      <name>QDomDocument</name>
      <anchor>QDomDocument</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomDocument</name>
      <anchor>QDomDocument-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>QDomDocument</name>
      <anchor>QDomDocument-3</anchor>
      <arglist>( const QDomDocumentType &amp; doctype )</arglist>
    </member>
    <member kind="function">
      <name>QDomDocument</name>
      <anchor>QDomDocument-4</anchor>
      <arglist>( const QDomDocument &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>createAttribute</name>
      <anchor>createAttribute</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>createAttributeNS</name>
      <anchor>createAttributeNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; qName )</arglist>
    </member>
    <member kind="function">
      <name>createCDATASection</name>
      <anchor>createCDATASection</anchor>
      <arglist>( const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>createComment</name>
      <anchor>createComment</anchor>
      <arglist>( const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>createDocumentFragment</name>
      <anchor>createDocumentFragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createElement</name>
      <anchor>createElement</anchor>
      <arglist>( const QString &amp; tagName )</arglist>
    </member>
    <member kind="function">
      <name>createElementNS</name>
      <anchor>createElementNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; qName )</arglist>
    </member>
    <member kind="function">
      <name>createEntityReference</name>
      <anchor>createEntityReference</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>createProcessingInstruction</name>
      <anchor>createProcessingInstruction</anchor>
      <arglist>( const QString &amp; target, const QString &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>createTextNode</name>
      <anchor>createTextNode</anchor>
      <arglist>( const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>doctype</name>
      <anchor>doctype</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>documentElement</name>
      <anchor>documentElement</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>elementById</name>
      <anchor>elementById</anchor>
      <arglist>( const QString &amp; elementId )</arglist>
    </member>
    <member kind="function">
      <name>elementsByTagName</name>
      <anchor>elementsByTagName</anchor>
      <arglist>( const QString &amp; tagname )</arglist>
    </member>
    <member kind="function">
      <name>elementsByTagNameNS</name>
      <anchor>elementsByTagNameNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>implementation</name>
      <anchor>implementation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>importNode</name>
      <anchor>importNode</anchor>
      <arglist>( const QDomNode &amp; importedNode, bool deep )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomDocument::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent</anchor>
      <arglist>( const QByteArray &amp; data, bool namespaceProcessing, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent-2</anchor>
      <arglist>( const QString &amp; text, bool namespaceProcessing, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent-3</anchor>
      <arglist>( QIODevice * dev, bool namespaceProcessing, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent-4</anchor>
      <arglist>( const QString &amp; text, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent-5</anchor>
      <arglist>( const QByteArray &amp; buffer, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent-6</anchor>
      <arglist>( QIODevice * dev, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContent</name>
      <anchor>setContent-7</anchor>
      <arglist>( QXmlInputSource * source, QXmlReader * reader, QString * errorMsg = 0, int * errorLine = 0, int * errorColumn = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toByteArray</name>
      <anchor>toByteArray</anchor>
      <arglist>( int indent = 1 )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( int indent = 1 )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomDocument &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomDocumentFragment</name>
    <filename>qdomdocumentfragment.html</filename>
    <member kind="function">
      <name>QDomDocumentFragment</name>
      <anchor>QDomDocumentFragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomDocumentFragment</name>
      <anchor>QDomDocumentFragment-2</anchor>
      <arglist>( const QDomDocumentFragment &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomDocumentFragment::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomDocumentFragment &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomDocumentType</name>
    <filename>qdomdocumenttype.html</filename>
    <member kind="function">
      <name>QDomDocumentType</name>
      <anchor>QDomDocumentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomDocumentType</name>
      <anchor>QDomDocumentType-2</anchor>
      <arglist>( const QDomDocumentType &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>entities</name>
      <anchor>entities</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>internalSubset</name>
      <anchor>internalSubset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomDocumentType::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>notations</name>
      <anchor>notations</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>publicId</name>
      <anchor>publicId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>systemId</name>
      <anchor>systemId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomDocumentType &amp; n )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomElement</name>
    <filename>qdomelement.html</filename>
    <member kind="function">
      <name>QDomElement</name>
      <anchor>QDomElement</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomElement</name>
      <anchor>QDomElement-2</anchor>
      <arglist>( const QDomElement &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>attribute</name>
      <anchor>attributex</anchor>
      <arglist>( const QString &amp; name, const QString &amp; defValue = QString()</arglist>
    </member>
    <member kind="function">
      <name>attributeNS</name>
      <anchor>attributeNS</anchor>
      <arglist>( const QString nsURI, const QString &amp; localName, const QString &amp; defValue = QString()</arglist>
    </member>
    <member kind="function">
      <name>attributeNode</name>
      <anchor>attributeNode</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>attributeNodeNS</name>
      <anchor>attributeNodeNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>attributes</name>
      <anchor>attributes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>elementsByTagName</name>
      <anchor>elementsByTagName</anchor>
      <arglist>( const QString &amp; tagname )</arglist>
    </member>
    <member kind="function">
      <name>elementsByTagNameNS</name>
      <anchor>elementsByTagNameNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>hasAttribute</name>
      <anchor>hasAttribute</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>hasAttributeNS</name>
      <anchor>hasAttributeNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomElement::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>removeAttribute</name>
      <anchor>removeAttribute</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>removeAttributeNS</name>
      <anchor>removeAttributeNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>removeAttributeNode</name>
      <anchor>removeAttributeNode</anchor>
      <arglist>( const QDomAttr &amp; oldAttr )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute</anchor>
      <arglist>( const QString &amp; name, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute-2</anchor>
      <arglist>( const QString &amp; name, int value )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute-3</anchor>
      <arglist>( const QString &amp; name, uint value )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute-4</anchor>
      <arglist>( const QString &amp; name, qlonglong value )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute-5</anchor>
      <arglist>( const QString &amp; name, qulonglong value )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute-6</anchor>
      <arglist>( const QString &amp; name, double value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNS</name>
      <anchor>setAttributeNS</anchor>
      <arglist>( const QString nsURI, const QString &amp; qName, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNS</name>
      <anchor>setAttributeNS-2</anchor>
      <arglist>( const QString nsURI, const QString &amp; qName, int value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNS</name>
      <anchor>setAttributeNS-3</anchor>
      <arglist>( const QString nsURI, const QString &amp; qName, uint value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNS</name>
      <anchor>setAttributeNS-4</anchor>
      <arglist>( const QString nsURI, const QString &amp; qName, qlonglong value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNS</name>
      <anchor>setAttributeNS-5</anchor>
      <arglist>( const QString nsURI, const QString &amp; qName, qulonglong value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNS</name>
      <anchor>setAttributeNS-6</anchor>
      <arglist>( const QString nsURI, const QString &amp; qName, double value )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNode</name>
      <anchor>setAttributeNode</anchor>
      <arglist>( const QDomAttr &amp; newAttr )</arglist>
    </member>
    <member kind="function">
      <name>setAttributeNodeNS</name>
      <anchor>setAttributeNodeNS</anchor>
      <arglist>( const QDomAttr &amp; newAttr )</arglist>
    </member>
    <member kind="function">
      <name>setTagName</name>
      <anchor>setTagName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>tagName</name>
      <anchor>tagName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomElement &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomEntity</name>
    <filename>qdomentity.html</filename>
    <member kind="function">
      <name>QDomEntity</name>
      <anchor>QDomEntity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomEntity</name>
      <anchor>QDomEntity-2</anchor>
      <arglist>( const QDomEntity &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomEntity::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>notationName</name>
      <anchor>notationName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>publicId</name>
      <anchor>publicId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>systemId</name>
      <anchor>systemId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomEntity &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomEntityReference</name>
    <filename>qdomentityreference.html</filename>
    <member kind="function">
      <name>QDomEntityReference</name>
      <anchor>QDomEntityReference</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomEntityReference</name>
      <anchor>QDomEntityReference-2</anchor>
      <arglist>( const QDomEntityReference &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomEntityReference::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomEntityReference &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomImplementation</name>
    <filename>qdomimplementation.html</filename>
    <member kind="function">
      <name>QDomImplementation</name>
      <anchor>QDomImplementation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomImplementation</name>
      <anchor>QDomImplementation-2</anchor>
      <arglist>( const QDomImplementation &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>createDocument</name>
      <anchor>createDocument</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; qName, const QDomDocumentType &amp; doctype )</arglist>
    </member>
    <member kind="function">
      <name>createDocumentType</name>
      <anchor>createDocumentType</anchor>
      <arglist>( const QString &amp; qName, const QString &amp; publicId, const QString &amp; systemId )</arglist>
    </member>
    <member kind="function">
      <name>hasFeature</name>
      <anchor>hasFeature</anchor>
      <arglist>( const QString &amp; feature, const QString &amp; version )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDomImplementation &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomImplementation &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDomImplementation &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomNamedNodeMap</name>
    <filename>qdomnamednodemap.html</filename>
    <member kind="function">
      <name>QDomNamedNodeMap</name>
      <anchor>QDomNamedNodeMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomNamedNodeMap</name>
      <anchor>QDomNamedNodeMap-2</anchor>
      <arglist>( const QDomNamedNodeMap &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>namedItem</name>
      <anchor>namedItem</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>namedItemNS</name>
      <anchor>namedItemNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>removeNamedItem</name>
      <anchor>removeNamedItem</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>removeNamedItemNS</name>
      <anchor>removeNamedItemNS</anchor>
      <arglist>( const QString &amp; nsURI, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>setNamedItem</name>
      <anchor>setNamedItem</anchor>
      <arglist>( const QDomNode &amp; newNode )</arglist>
    </member>
    <member kind="function">
      <name>setNamedItemNS</name>
      <anchor>setNamedItemNS</anchor>
      <arglist>( const QDomNode &amp; newNode )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDomNamedNodeMap &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomNamedNodeMap &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDomNamedNodeMap &amp; n )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomNode</name>
    <filename>qdomnode.html</filename>
    <member kind="enum">
      <name>NodeType</name>
      <anchor>NodeType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QDomNode</name>
      <anchor>QDomNode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomNode</name>
      <anchor>QDomNode-2</anchor>
      <arglist>( const QDomNode &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>appendChild</name>
      <anchor>appendChild</anchor>
      <arglist>( const QDomNode &amp; newChild )</arglist>
    </member>
    <member kind="function">
      <name>attributes</name>
      <anchor>attributes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childNodes</name>
      <anchor>childNodes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cloneNode</name>
      <anchor>cloneNode</anchor>
      <arglist>( bool deep = true )</arglist>
    </member>
    <member kind="function">
      <name>firstChild</name>
      <anchor>firstChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>firstChildElement</name>
      <anchor>firstChildElement</anchor>
      <arglist>( const QString &amp; tagName = QString()</arglist>
    </member>
    <member kind="function">
      <name>hasAttributes</name>
      <anchor>hasAttributes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasChildNodes</name>
      <anchor>hasChildNodes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertAfter</name>
      <anchor>insertAfter</anchor>
      <arglist>( const QDomNode &amp; newChild, const QDomNode &amp; refChild )</arglist>
    </member>
    <member kind="function">
      <name>insertBefore</name>
      <anchor>insertBefore</anchor>
      <arglist>( const QDomNode &amp; newChild, const QDomNode &amp; refChild )</arglist>
    </member>
    <member kind="function">
      <name>isAttr</name>
      <anchor>isAttr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCDATASection</name>
      <anchor>isCDATASection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCharacterData</name>
      <anchor>isCharacterData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isComment</name>
      <anchor>isComment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDocument</name>
      <anchor>isDocument</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDocumentFragment</name>
      <anchor>isDocumentFragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDocumentType</name>
      <anchor>isDocumentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isElement</name>
      <anchor>isElement</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEntity</name>
      <anchor>isEntity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEntityReference</name>
      <anchor>isEntityReference</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNotation</name>
      <anchor>isNotation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isProcessingInstruction</name>
      <anchor>isProcessingInstruction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSupported</name>
      <anchor>isSupported</anchor>
      <arglist>( const QString &amp; feature, const QString &amp; version )</arglist>
    </member>
    <member kind="function">
      <name>isText</name>
      <anchor>isText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastChild</name>
      <anchor>lastChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastChildElement</name>
      <anchor>lastChildElement</anchor>
      <arglist>( const QString &amp; tagName = QString()</arglist>
    </member>
    <member kind="function">
      <name>localName</name>
      <anchor>localName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>namedItem</name>
      <anchor>namedItem</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>namespaceURI</name>
      <anchor>namespaceURI</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextSibling</name>
      <anchor>nextSibling</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextSiblingElement</name>
      <anchor>nextSiblingElement</anchor>
      <arglist>( const QString &amp; tagName = QString()</arglist>
    </member>
    <member kind="function">
      <name>nodeName</name>
      <anchor>nodeName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nodeType</name>
      <anchor>nodeType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nodeValue</name>
      <anchor>nodeValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>normalize</name>
      <anchor>normalize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ownerDocument</name>
      <anchor>ownerDocument</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentNode</name>
      <anchor>parentNode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prefix</name>
      <anchor>prefix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previousSibling</name>
      <anchor>previousSibling</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previousSiblingElement</name>
      <anchor>previousSiblingElement</anchor>
      <arglist>( const QString &amp; tagName = QString()</arglist>
    </member>
    <member kind="function">
      <name>removeChild</name>
      <anchor>removeChild</anchor>
      <arglist>( const QDomNode &amp; oldChild )</arglist>
    </member>
    <member kind="function">
      <name>replaceChild</name>
      <anchor>replaceChild</anchor>
      <arglist>( const QDomNode &amp; newChild, const QDomNode &amp; oldChild )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>( QTextStream &amp; str, int indent )</arglist>
    </member>
    <member kind="function">
      <name>setNodeValue</name>
      <anchor>setNodeValue</anchor>
      <arglist>( const QString &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>setPrefix</name>
      <anchor>setPrefix</anchor>
      <arglist>( const QString &amp; pre )</arglist>
    </member>
    <member kind="function">
      <name>toAttr</name>
      <anchor>toAttr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toCDATASection</name>
      <anchor>toCDATASection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toCharacterData</name>
      <anchor>toCharacterData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toComment</name>
      <anchor>toComment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDocument</name>
      <anchor>toDocument</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDocumentFragment</name>
      <anchor>toDocumentFragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDocumentType</name>
      <anchor>toDocumentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toElement</name>
      <anchor>toElement</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toEntity</name>
      <anchor>toEntity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toEntityReference</name>
      <anchor>toEntityReference</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toNotation</name>
      <anchor>toNotation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toProcessingInstruction</name>
      <anchor>toProcessingInstruction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toText</name>
      <anchor>toText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDomNode &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomNode &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDomNode &amp; n )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomNodeList</name>
    <filename>qdomnodelist.html</filename>
    <member kind="function">
      <name>QDomNodeList</name>
      <anchor>QDomNodeList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomNodeList</name>
      <anchor>QDomNodeList-2</anchor>
      <arglist>( const QDomNodeList &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QDomNodeList &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomNodeList &amp; n )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QDomNodeList &amp; n )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomNotation</name>
    <filename>qdomnotation.html</filename>
    <member kind="function">
      <name>QDomNotation</name>
      <anchor>QDomNotation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomNotation</name>
      <anchor>QDomNotation-2</anchor>
      <arglist>( const QDomNotation &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomNotation::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>publicId</name>
      <anchor>publicId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>systemId</name>
      <anchor>systemId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomNotation &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomProcessingInstruction</name>
    <filename>qdomprocessinginstruction.html</filename>
    <member kind="function">
      <name>QDomProcessingInstruction</name>
      <anchor>QDomProcessingInstruction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomProcessingInstruction</name>
      <anchor>QDomProcessingInstruction-2</anchor>
      <arglist>( const QDomProcessingInstruction &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomProcessingInstruction::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QString &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>target</name>
      <anchor>target</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomProcessingInstruction &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDomText</name>
    <filename>qdomtext.html</filename>
    <member kind="function">
      <name>QDomText</name>
      <anchor>QDomText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QDomText</name>
      <anchor>QDomText-2</anchor>
      <arglist>( const QDomText &amp; x )</arglist>
    </member>
    <member kind="function">
      <name>NodeType</name>
      <anchor>nodeType</anchor>
      <arglist> QDomText::nodeType()</arglist>
    </member>
    <member kind="function">
      <name>splitText</name>
      <anchor>splitText</anchor>
      <arglist>( int offset )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QDomText &amp; x )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDoubleSpinBox</name>
    <filename>qdoublespinbox.html</filename>
    <member kind="function">
      <name>QDoubleSpinBox</name>
      <anchor>QDoubleSpinBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( double min, double max )</arglist>
    </member>
    <member kind="function">
      <name>textFromValue</name>
      <anchor>textFromValue</anchor>
      <arglist>( double v )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( double d )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>valueFromText</name>
      <anchor>valueFromText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>QDoubleValidator</name>
      <anchor>QDoubleValidator-3</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QDoubleValidator</name>
      <anchor>QDoubleValidator-4</anchor>
      <arglist>( double bottom, double top, int decimals, QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDoubleValidator</name>
    <filename>qdoublevalidator.html</filename>
    <member kind="function">
      <name>QDoubleValidator</name>
      <anchor>QDoubleValidator</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QDoubleValidator</name>
      <anchor>QDoubleValidator-2</anchor>
      <arglist>( double bottom, double top, int decimals, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( double minimum, double maximum, int decimals = 0 )</arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>validate</anchor>
      <arglist> QDoubleValidator::validate( QString &amp; input, int &amp; pos )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDrag</name>
    <filename>qdrag.html</filename>
    <member kind="function">
      <name>QDrag</name>
      <anchor>QDrag</anchor>
      <arglist>( QWidget * dragSource )</arglist>
    </member>
    <member kind="function">
      <name>actionChanged</name>
      <anchor>actionChanged</anchor>
      <arglist>( Qt::DropAction action )</arglist>
    </member>
    <member kind="function">
      <name>hotSpot</name>
      <anchor>hotSpot</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDragCursor</name>
      <anchor>setDragCursor</anchor>
      <arglist>( const QPixmap &amp; cursor, Qt::DropAction action )</arglist>
    </member>
    <member kind="function">
      <name>setHotSpot</name>
      <anchor>setHotSpot</anchor>
      <arglist>( const QPoint &amp; hotspot )</arglist>
    </member>
    <member kind="function">
      <name>setMimeData</name>
      <anchor>setMimeData</anchor>
      <arglist>( QMimeData * data )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>source</name>
      <anchor>source</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DropAction</name>
      <anchor>start</anchor>
      <arglist> QDrag::start( Qt::DropActions request = Qt::CopyAction )</arglist>
    </member>
    <member kind="function">
      <name>target</name>
      <anchor>target</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>targetChanged</name>
      <anchor>targetChanged</anchor>
      <arglist>( QWidget * newTarget )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDragEnterEvent</name>
    <filename>qdragenterevent.html</filename>
    <member kind="function">
      <name>QDragEnterEvent</name>
      <anchor>QDragEnterEvent</anchor>
      <arglist>( const QPoint &amp; point, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDragLeaveEvent</name>
    <filename>qdragleaveevent.html</filename>
    <member kind="function">
      <name>QDragLeaveEvent</name>
      <anchor>QDragLeaveEvent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept-2</anchor>
      <arglist>( bool y )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDragMoveEvent</name>
    <filename>qdragmoveevent.html</filename>
    <member kind="function">
      <name>QDragMoveEvent</name>
      <anchor>QDragMoveEvent</anchor>
      <arglist>( const QPoint &amp; pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type = DragMove )</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept</anchor>
      <arglist>( const QRect &amp; rectangle )</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept-3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>answerRect</name>
      <anchor>answerRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ignore</name>
      <anchor>ignore</anchor>
      <arglist>( const QRect &amp; rectangle )</arglist>
    </member>
    <member kind="function">
      <name>ignore</name>
      <anchor>ignore-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enum">
      <name>Action</name>
      <anchor>Action-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept-2</anchor>
      <arglist>( bool accept )</arglist>
    </member>
    <member kind="function">
      <name>acceptAction</name>
      <anchor>acceptAction</anchor>
      <arglist>( bool accept = true )</arglist>
    </member>
    <member kind="function">
      <name>action</name>
      <anchor>action</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const char * f )</arglist>
    </member>
    <member kind="function">
      <name>encodedData</name>
      <anchor>encodedData</anchor>
      <arglist>( const char * format )</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>( int n = 0 )</arglist>
    </member>
    <member kind="function">
      <name>provides</name>
      <anchor>provides</anchor>
      <arglist>( const char * mimeType )</arglist>
    </member>
    <member kind="function">
      <name>setPoint</name>
      <anchor>setPoint</anchor>
      <arglist>( const QPoint &amp; point )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QDropEvent</name>
    <filename>qdropevent.html</filename>
    <member kind="function">
      <name>QDropEvent</name>
      <anchor>QDropEvent</anchor>
      <arglist>( const QPoint &amp; pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type = Drop )</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>acceptProposedAction</name>
      <anchor>acceptProposedAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DropAction</name>
      <anchor>dropAction</anchor>
      <arglist> QDropEvent::dropAction()</arglist>
    </member>
    <member kind="function">
      <name>KeyboardModifiers</name>
      <anchor>keyboardModifiers</anchor>
      <arglist> QDropEvent::keyboardModifiers()</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MouseButtons</name>
      <anchor>mouseButtons</anchor>
      <arglist> QDropEvent::mouseButtons()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>possibleActions</anchor>
      <arglist> QDropEvent::possibleActions()</arglist>
    </member>
    <member kind="function">
      <name>DropAction</name>
      <anchor>proposedAction</anchor>
      <arglist> QDropEvent::proposedAction()</arglist>
    </member>
    <member kind="function">
      <name>setDropAction</name>
      <anchor>setDropAction</anchor>
      <arglist>( Qt::DropAction action )</arglist>
    </member>
    <member kind="function">
      <name>source</name>
      <anchor>source</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>message</name>
      <anchor>message</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QErrorMessage</name>
    <filename>qerrormessage.html</filename>
    <member kind="function">
      <name>QErrorMessage</name>
      <anchor>QErrorMessage</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>qtHandler</name>
      <anchor>qtHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showMessage</name>
      <anchor>showMessage</anchor>
      <arglist>( const QString &amp; message )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QEvent</name>
    <filename>qevent.html</filename>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QEvent</name>
      <anchor>QEvent</anchor>
      <arglist>( Type type )</arglist>
    </member>
    <member kind="function">
      <name>accept</name>
      <anchor>accept</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ignore</name>
      <anchor>ignore</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>spontaneous</name>
      <anchor>spontaneous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open-2</anchor>
      <arglist>( OpenMode flags, FILE * f )</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open-3</anchor>
      <arglist>( OpenMode flags, int fd )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFile</name>
    <filename>qfile.html</filename>
    <member kind="function">
      <name>DecoderFn</name>
      <anchor>DecoderFn-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EncoderFn</name>
      <anchor>EncoderFn-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FileError</name>
      <anchor>FileError-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PermissionSpec</name>
      <anchor>PermissionSpec-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFile</name>
      <anchor>QFile-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>QFile</name>
      <anchor>QFile-3</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QFile</name>
      <anchor>QFile-4</anchor>
      <arglist>( const QString &amp; name, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>( const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy-2</anchor>
      <arglist>( const QString &amp; fileName, const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>decodeName</name>
      <anchor>decodeName</anchor>
      <arglist>( const QByteArray &amp; localFileName )</arglist>
    </member>
    <member kind="function">
      <name>decodeName</name>
      <anchor>decodeName-2</anchor>
      <arglist>( const char * localFileName )</arglist>
    </member>
    <member kind="function">
      <name>encodeName</name>
      <anchor>encodeName</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exists</name>
      <anchor>exists</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>exists</name>
      <anchor>exists-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileEngine</name>
      <anchor>fileEngine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSequential</name>
      <anchor>isSequential</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>link</name>
      <anchor>link</anchor>
      <arglist>( const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>link</name>
      <anchor>link-2</anchor>
      <arglist>( const QString &amp; oldName, const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>( OpenMode mode )</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open-4</anchor>
      <arglist>( FILE * fh, OpenMode mode )</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open-5</anchor>
      <arglist>( int fd, OpenMode mode )</arglist>
    </member>
    <member kind="function">
      <name>permissions</name>
      <anchor>permissions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>permissions</name>
      <anchor>permissions-2</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>readLink</name>
      <anchor>readLink</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>readLink</name>
      <anchor>readLink-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>( const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename-2</anchor>
      <arglist>( const QString &amp; oldName, const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( qint64 sz )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize-2</anchor>
      <arglist>( const QString &amp; fileName, qint64 sz )</arglist>
    </member>
    <member kind="function">
      <name>setDecodingFunction</name>
      <anchor>setDecodingFunction</anchor>
      <arglist>( DecoderFn function )</arglist>
    </member>
    <member kind="function">
      <name>setEncodingFunction</name>
      <anchor>setEncodingFunction</anchor>
      <arglist>( EncoderFn function )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setPermissions</name>
      <anchor>setPermissions</anchor>
      <arglist>( Permissions permissions )</arglist>
    </member>
    <member kind="function">
      <name>setPermissions</name>
      <anchor>setPermissions-2</anchor>
      <arglist>( const QString &amp; fileName, Permissions permissions )</arglist>
    </member>
    <member kind="function">
      <name>unsetError</name>
      <anchor>unsetError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getExistingDirectory</name>
      <anchor>getExistingDirectory-2</anchor>
      <arglist>( const QString &amp; dir, QWidget * parent = 0, const char * name = 0, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>getOpenFileName</name>
      <anchor>getOpenFileName-2</anchor>
      <arglist>( const QString &amp; dir, const QString &amp; filter = QString()</arglist>
    </member>
    <member kind="function">
      <name>getOpenFileNames</name>
      <anchor>getOpenFileNames-2</anchor>
      <arglist>( const QString &amp; filter, const QString &amp; dir = QString()</arglist>
    </member>
    <member kind="function">
      <name>getSaveFileName</name>
      <anchor>getSaveFileName-2</anchor>
      <arglist>( const QString &amp; dir, const QString &amp; filter = QString()</arglist>
    </member>
    <member kind="function">
      <name>mode</name>
      <anchor>mode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedFile</name>
      <anchor>selectedFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDir</name>
      <anchor>setDir</anchor>
      <arglist>( const QString &amp; directory )</arglist>
    </member>
    <member kind="function">
      <name>setDir</name>
      <anchor>setDir-2</anchor>
      <arglist>( const QDir &amp; directory )</arglist>
    </member>
    <member kind="function">
      <name>setMode</name>
      <anchor>setMode</anchor>
      <arglist>( FileMode m )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFileDialog</name>
    <filename>qfiledialog.html</filename>
    <member kind="enum">
      <name>AcceptMode</name>
      <anchor>AcceptMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>DialogLabel</name>
      <anchor>DialogLabel-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FileMode</name>
      <anchor>FileMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Mode</name>
      <anchor>Mode-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ViewMode</name>
      <anchor>ViewMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFileDialog</name>
      <anchor>QFileDialog</anchor>
      <arglist>( QWidget * parent, Qt::WFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>QFileDialog</name>
      <anchor>QFileDialog-2</anchor>
      <arglist>( QWidget * parent = 0, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>directory</name>
      <anchor>directory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filesSelected</name>
      <anchor>filesSelected</anchor>
      <arglist>( const QStringList &amp; selected )</arglist>
    </member>
    <member kind="function">
      <name>filters</name>
      <anchor>filters</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getExistingDirectory</name>
      <anchor>getExistingDirectory</anchor>
      <arglist>( QWidget * parent = 0, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>getOpenFileName</name>
      <anchor>getOpenFileName</anchor>
      <arglist>( QWidget * parent = 0, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>getOpenFileNames</name>
      <anchor>getOpenFileNames</anchor>
      <arglist>( QWidget * parent = 0, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>getSaveFileName</name>
      <anchor>getSaveFileName</anchor>
      <arglist>( QWidget * parent = 0, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>history</name>
      <anchor>history</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconProvider</name>
      <anchor>iconProvider</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemDelegate</name>
      <anchor>itemDelegate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>labelText</name>
      <anchor>labelText</anchor>
      <arglist>( DialogLabel label )</arglist>
    </member>
    <member kind="function">
      <name>selectFile</name>
      <anchor>selectFile</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>selectFilter</name>
      <anchor>selectFilter</anchor>
      <arglist>( const QString &amp; filter )</arglist>
    </member>
    <member kind="function">
      <name>selectedFiles</name>
      <anchor>selectedFiles</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedFilter</name>
      <anchor>selectedFilter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDirectory</name>
      <anchor>setDirectory</anchor>
      <arglist>( const QString &amp; directory )</arglist>
    </member>
    <member kind="function">
      <name>setDirectory</name>
      <anchor>setDirectory-2</anchor>
      <arglist>( const QDir &amp; directory )</arglist>
    </member>
    <member kind="function">
      <name>setFilter</name>
      <anchor>setFilter</anchor>
      <arglist>( const QString &amp; filter )</arglist>
    </member>
    <member kind="function">
      <name>setFilters</name>
      <anchor>setFilters</anchor>
      <arglist>( const QStringList &amp; filters )</arglist>
    </member>
    <member kind="function">
      <name>setHistory</name>
      <anchor>setHistory</anchor>
      <arglist>( const QStringList &amp; paths )</arglist>
    </member>
    <member kind="function">
      <name>setIconProvider</name>
      <anchor>setIconProvider</anchor>
      <arglist>( QFileIconProvider * provider )</arglist>
    </member>
    <member kind="function">
      <name>setItemDelegate</name>
      <anchor>setItemDelegate</anchor>
      <arglist>( QAbstractItemDelegate * delegate )</arglist>
    </member>
    <member kind="function">
      <name>setLabelText</name>
      <anchor>setLabelText</anchor>
      <arglist>( DialogLabel label, const QString &amp; text )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFileEngine</name>
    <filename>qfileengine.html</filename>
    <member kind="enum">
      <name>FileName</name>
      <anchor>FileName-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FileOwner</name>
      <anchor>FileOwner-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FileTime</name>
      <anchor>FileTime-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFileEngine</name>
      <anchor>QFileEngine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>caseSensitive</name>
      <anchor>caseSensitive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>chmod</name>
      <anchor>chmod</anchor>
      <arglist>( uint perms )</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>( const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>createFileEngine</name>
      <anchor>createFileEngine</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>entryList</name>
      <anchor>entryList</anchor>
      <arglist>( QDir::Filters filters, const QStringList &amp; filterNames )</arglist>
    </member>
    <member kind="function">
      <name>FileError</name>
      <anchor>error</anchor>
      <arglist> QFileEngine::error()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileFlags</name>
      <anchor>fileFlags</anchor>
      <arglist>( FileFlags type = FileInfoAll )</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>( FileName file = DefaultName )</arglist>
    </member>
    <member kind="function">
      <name>fileTime</name>
      <anchor>fileTime</anchor>
      <arglist>( FileTime time )</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>flush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRelativePath</name>
      <anchor>isRelativePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSequential</name>
      <anchor>isSequential</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>link</name>
      <anchor>link</anchor>
      <arglist>( const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map</anchor>
      <arglist>( qint64 offset, qint64 size )</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir</anchor>
      <arglist>( const QString &amp; dirName, bool createParentDirectories )</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>( int mode )</arglist>
    </member>
    <member kind="function">
      <name>owner</name>
      <anchor>owner</anchor>
      <arglist>( FileOwner owner )</arglist>
    </member>
    <member kind="function">
      <name>ownerId</name>
      <anchor>ownerId</anchor>
      <arglist>( FileOwner owner )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( char * data, qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>( const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>rmdir</name>
      <anchor>rmdir</anchor>
      <arglist>( const QString &amp; dirName, bool recurseParentDirectories )</arglist>
    </member>
    <member kind="function">
      <name>seek</name>
      <anchor>seek</anchor>
      <arglist>( qint64 offset )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( qint64 size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unmap</name>
      <anchor>unmap</anchor>
      <arglist>( uchar * data )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( const char * data, qint64 size )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFileEngineHandler</name>
    <filename>qfileenginehandler.html</filename>
    <member kind="function">
      <name>QFileEngineHandler</name>
      <anchor>QFileEngineHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createFileEngine</name>
      <anchor>createFileEngine</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFileIconProvider</name>
    <filename>qfileiconprovider.html</filename>
    <member kind="enum">
      <name>IconType</name>
      <anchor>IconType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFileIconProvider</name>
      <anchor>QFileIconProvider</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>icon</name>
      <anchor>icon</anchor>
      <arglist>( IconType type )</arglist>
    </member>
    <member kind="function">
      <name>icon</name>
      <anchor>icon-2</anchor>
      <arglist>( const QFileInfo &amp; info )</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>( const QFileInfo &amp; info )</arglist>
    </member>
    <member kind="function">
      <name>absFilePath</name>
      <anchor>absFilePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>baseName</name>
      <anchor>baseName-2</anchor>
      <arglist>( bool complete )</arglist>
    </member>
    <member kind="function">
      <name>convertToAbs</name>
      <anchor>convertToAbs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dir</name>
      <anchor>dir-2</anchor>
      <arglist>( bool absPath )</arglist>
    </member>
    <member kind="function">
      <name>dirPath</name>
      <anchor>dirPath</anchor>
      <arglist>( bool absPath = false )</arglist>
    </member>
    <member kind="function">
      <name>extension</name>
      <anchor>extension</anchor>
      <arglist>( bool complete = true )</arglist>
    </member>
    <member kind="function">
      <name>permission</name>
      <anchor>permission-2</anchor>
      <arglist>( PermissionSpec permissions )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFileInfo</name>
    <filename>qfileinfo.html</filename>
    <member kind="function">
      <name>QFileInfo</name>
      <anchor>QFileInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QFileInfo</name>
      <anchor>QFileInfo-2</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>QFileInfo</name>
      <anchor>QFileInfo-3</anchor>
      <arglist>( const QFile &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>QFileInfo</name>
      <anchor>QFileInfo-4</anchor>
      <arglist>( const QDir &amp; dir, const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>QFileInfo</name>
      <anchor>QFileInfo-5</anchor>
      <arglist>( const QFileInfo &amp; fileinfo )</arglist>
    </member>
    <member kind="function">
      <name>absoluteDir</name>
      <anchor>absoluteDir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>absoluteFilePath</name>
      <anchor>absoluteFilePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>absolutePath</name>
      <anchor>absolutePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>baseName</name>
      <anchor>baseName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>caching</name>
      <anchor>caching</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canonicalFilePath</name>
      <anchor>canonicalFilePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canonicalPath</name>
      <anchor>canonicalPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>completeBaseName</name>
      <anchor>completeBaseName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>completeSuffix</name>
      <anchor>completeSuffix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>created</name>
      <anchor>created</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dir</name>
      <anchor>dir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exists</name>
      <anchor>exists</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filePath</name>
      <anchor>filePath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>group</name>
      <anchor>group</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>groupId</name>
      <anchor>groupId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAbsolute</name>
      <anchor>isAbsolute</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDir</name>
      <anchor>isDir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isExecutable</name>
      <anchor>isExecutable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFile</name>
      <anchor>isFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isHidden</name>
      <anchor>isHidden</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isReadable</name>
      <anchor>isReadable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRelative</name>
      <anchor>isRelative</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRoot</name>
      <anchor>isRoot</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSymLink</name>
      <anchor>isSymLink</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isWritable</name>
      <anchor>isWritable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastModified</name>
      <anchor>lastModified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastRead</name>
      <anchor>lastRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeAbsolute</name>
      <anchor>makeAbsolute</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>owner</name>
      <anchor>owner</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ownerId</name>
      <anchor>ownerId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>path</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>permission</name>
      <anchor>permission</anchor>
      <arglist>( QFile::Permissions permissions )</arglist>
    </member>
    <member kind="function">
      <name>Permissions</name>
      <anchor>permissions</anchor>
      <arglist> QFileInfo::permissions()</arglist>
    </member>
    <member kind="function">
      <name>readLink</name>
      <anchor>readLink</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCaching</name>
      <anchor>setCaching</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setFile</name>
      <anchor>setFile</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>setFile</name>
      <anchor>setFile-2</anchor>
      <arglist>( const QFile &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>setFile</name>
      <anchor>setFile-3</anchor>
      <arglist>( const QDir &amp; dir, const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>suffix</name>
      <anchor>suffix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QFileInfo &amp; fileinfo )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QFileInfo &amp; fileinfo )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QFileInfo &amp; fileinfo )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFileOpenEvent</name>
    <filename>qfileopenevent.html</filename>
    <member kind="function">
      <name>file</name>
      <anchor>file</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFocusEvent</name>
    <filename>qfocusevent.html</filename>
    <member kind="enum">
      <name>Reason</name>
      <anchor>Reason-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFocusEvent</name>
      <anchor>QFocusEvent</anchor>
      <arglist>( Type type, Qt::FocusReason reason = Qt::OtherFocusReason )</arglist>
    </member>
    <member kind="function">
      <name>gotFocus</name>
      <anchor>gotFocus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lostFocus</name>
      <anchor>lostFocus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FocusReason</name>
      <anchor>reason</anchor>
      <arglist> QFocusEvent::reason()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFocusFrame</name>
    <filename>qfocusframe.html</filename>
    <member kind="function">
      <name>QFocusFrame</name>
      <anchor>QFocusFrame</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setWidget</name>
      <anchor>setWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultFont</name>
      <anchor>defaultFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointSizeFloat</name>
      <anchor>pointSizeFloat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDefaultFont</name>
      <anchor>setDefaultFont</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setPixelSizeFloat</name>
      <anchor>setPixelSizeFloat</anchor>
      <arglist>( qreal pixelSize )</arglist>
    </member>
    <member kind="function">
      <name>setPointSizeFloat</name>
      <anchor>setPointSizeFloat</anchor>
      <arglist>( qreal size )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFont</name>
    <filename>qfont.html</filename>
    <member kind="enum">
      <name>Stretch</name>
      <anchor>Stretch-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Style</name>
      <anchor>Style-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StyleHint</name>
      <anchor>StyleHint-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StyleStrategy</name>
      <anchor>StyleStrategy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Weight</name>
      <anchor>Weight-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFont</name>
      <anchor>QFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QFont</name>
      <anchor>QFont-2</anchor>
      <arglist>( const QString &amp; family, int pointSize = -1, int weight = -1, bool italic = false )</arglist>
    </member>
    <member kind="function">
      <name>QFont</name>
      <anchor>QFont-3</anchor>
      <arglist>( const QFont &amp; font, QPaintDevice * pd )</arglist>
    </member>
    <member kind="function">
      <name>QFont</name>
      <anchor>QFont-4</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>bold</name>
      <anchor>bold</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultFamily</name>
      <anchor>defaultFamily</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exactMatch</name>
      <anchor>exactMatch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>family</name>
      <anchor>family</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fixedPitch</name>
      <anchor>fixedPitch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString</anchor>
      <arglist>( const QString &amp; descrip )</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertSubstitution</name>
      <anchor>insertSubstitution</anchor>
      <arglist>( const QString &amp; familyName, const QString &amp; substituteName )</arglist>
    </member>
    <member kind="function">
      <name>insertSubstitutions</name>
      <anchor>insertSubstitutions</anchor>
      <arglist>( const QString &amp; familyName, const QStringList &amp; substituteNames )</arglist>
    </member>
    <member kind="function">
      <name>isCopyOf</name>
      <anchor>isCopyOf</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>italic</name>
      <anchor>italic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>kerning</name>
      <anchor>kerning</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastResortFamily</name>
      <anchor>lastResortFamily</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastResortFont</name>
      <anchor>lastResortFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>overline</name>
      <anchor>overline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixelSize</name>
      <anchor>pixelSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointSize</name>
      <anchor>pointSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointSizeF</name>
      <anchor>pointSizeF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rawMode</name>
      <anchor>rawMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rawName</name>
      <anchor>rawName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeSubstitution</name>
      <anchor>removeSubstitution</anchor>
      <arglist>( const QString &amp; familyName )</arglist>
    </member>
    <member kind="function">
      <name>resolve</name>
      <anchor>resolve</anchor>
      <arglist>( const QFont &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>setBold</name>
      <anchor>setBold</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setFamily</name>
      <anchor>setFamily</anchor>
      <arglist>( const QString &amp; family )</arglist>
    </member>
    <member kind="function">
      <name>setFixedPitch</name>
      <anchor>setFixedPitch</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setItalic</name>
      <anchor>setItalic</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setKerning</name>
      <anchor>setKerning</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setOverline</name>
      <anchor>setOverline</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setPixelSize</name>
      <anchor>setPixelSize</anchor>
      <arglist>( int pixelSize )</arglist>
    </member>
    <member kind="function">
      <name>setPointSize</name>
      <anchor>setPointSize</anchor>
      <arglist>( int pointSize )</arglist>
    </member>
    <member kind="function">
      <name>setPointSizeF</name>
      <anchor>setPointSizeF</anchor>
      <arglist>( qreal pointSize )</arglist>
    </member>
    <member kind="function">
      <name>setRawMode</name>
      <anchor>setRawMode</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setRawName</name>
      <anchor>setRawName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setStretch</name>
      <anchor>setStretch</anchor>
      <arglist>( int factor )</arglist>
    </member>
    <member kind="function">
      <name>setStrikeOut</name>
      <anchor>setStrikeOut</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle</anchor>
      <arglist>( Style style )</arglist>
    </member>
    <member kind="function">
      <name>setStyleHint</name>
      <anchor>setStyleHint</anchor>
      <arglist>( StyleHint hint, StyleStrategy strategy = PreferDefault )</arglist>
    </member>
    <member kind="function">
      <name>setStyleStrategy</name>
      <anchor>setStyleStrategy</anchor>
      <arglist>( StyleStrategy s )</arglist>
    </member>
    <member kind="function">
      <name>setUnderline</name>
      <anchor>setUnderline</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setWeight</name>
      <anchor>setWeight</anchor>
      <arglist>( int weight )</arglist>
    </member>
    <member kind="function">
      <name>stretch</name>
      <anchor>stretch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>strikeOut</name>
      <anchor>strikeOut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>style</name>
      <anchor>style</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>styleHint</name>
      <anchor>styleHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>styleStrategy</name>
      <anchor>styleStrategy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>substitute</name>
      <anchor>substitute</anchor>
      <arglist>( const QString &amp; familyName )</arglist>
    </member>
    <member kind="function">
      <name>substitutes</name>
      <anchor>substitutes</anchor>
      <arglist>( const QString &amp; familyName )</arglist>
    </member>
    <member kind="function">
      <name>substitutions</name>
      <anchor>substitutions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>underline</name>
      <anchor>underline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>weight</name>
      <anchor>weight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFontDatabase</name>
    <filename>qfontdatabase.html</filename>
    <member kind="enum">
      <name>WritingSystem</name>
      <anchor>WritingSystem-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFontDatabase</name>
      <anchor>QFontDatabase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bold</name>
      <anchor>bold</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style )</arglist>
    </member>
    <member kind="function">
      <name>families</name>
      <anchor>families</anchor>
      <arglist>( WritingSystem writingSystem = Any )</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style, int pointSize )</arglist>
    </member>
    <member kind="function">
      <name>isBitmapScalable</name>
      <anchor>isBitmapScalable</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style = QString()</arglist>
    </member>
    <member kind="function">
      <name>isFixedPitch</name>
      <anchor>isFixedPitch</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style = QString()</arglist>
    </member>
    <member kind="function">
      <name>isScalable</name>
      <anchor>isScalable</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style = QString()</arglist>
    </member>
    <member kind="function">
      <name>isSmoothlyScalable</name>
      <anchor>isSmoothlyScalable</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style = QString()</arglist>
    </member>
    <member kind="function">
      <name>italic</name>
      <anchor>italic</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style )</arglist>
    </member>
    <member kind="function">
      <name>pointSizes</name>
      <anchor>pointSizes</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style = QString()</arglist>
    </member>
    <member kind="function">
      <name>smoothSizes</name>
      <anchor>smoothSizes</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style )</arglist>
    </member>
    <member kind="function">
      <name>standardSizes</name>
      <anchor>standardSizes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>styleString</name>
      <anchor>styleString</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>styles</name>
      <anchor>styles</anchor>
      <arglist>( const QString &amp; family )</arglist>
    </member>
    <member kind="function">
      <name>weight</name>
      <anchor>weight</anchor>
      <arglist>( const QString &amp; family, const QString &amp; style )</arglist>
    </member>
    <member kind="function">
      <name>writingSystemName</name>
      <anchor>writingSystemName</anchor>
      <arglist>( WritingSystem writingSystem )</arglist>
    </member>
    <member kind="function">
      <name>writingSystemSample</name>
      <anchor>writingSystemSample</anchor>
      <arglist>( WritingSystem writingSystem )</arglist>
    </member>
    <member kind="function">
      <name>writingSystems</name>
      <anchor>writingSystems</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFontDialog</name>
    <filename>qfontdialog.html</filename>
    <member kind="function">
      <name>getFont</name>
      <anchor>getFont</anchor>
      <arglist>( bool * ok, const QFont &amp; initial, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>getFont-2</anchor>
      <arglist>( bool * ok, const QFont &amp; def, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>getFont-3</anchor>
      <arglist>( bool * ok, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>getFont</name>
      <anchor>getFont-5</anchor>
      <arglist>( bool * ok, QWidget * parent = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFontInfo</name>
    <filename>qfontinfo.html</filename>
    <member kind="function">
      <name>QFontInfo</name>
      <anchor>QFontInfo</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>QFontInfo</name>
      <anchor>QFontInfo-2</anchor>
      <arglist>( const QFontInfo &amp; fi )</arglist>
    </member>
    <member kind="function">
      <name>bold</name>
      <anchor>bold</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exactMatch</name>
      <anchor>exactMatch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>family</name>
      <anchor>family</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fixedPitch</name>
      <anchor>fixedPitch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>italic</name>
      <anchor>italic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixelSize</name>
      <anchor>pixelSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointSize</name>
      <anchor>pointSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointSizeF</name>
      <anchor>pointSizeF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rawMode</name>
      <anchor>rawMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Style</name>
      <anchor>style</anchor>
      <arglist> QFontInfo::style()</arglist>
    </member>
    <member kind="function">
      <name>StyleHint</name>
      <anchor>styleHint</anchor>
      <arglist> QFontInfo::styleHint()</arglist>
    </member>
    <member kind="function">
      <name>weight</name>
      <anchor>weight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QFontInfo &amp; fi )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-3</anchor>
      <arglist>( const QString &amp; text, int len )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-4</anchor>
      <arglist>( int x, int y, int w, int h, int flags, const QString &amp; str, int len, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size-2</anchor>
      <arglist>( int flags, const QString &amp; str, int len, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFontMetrics</name>
    <filename>qfontmetrics.html</filename>
    <member kind="function">
      <name>QFontMetrics</name>
      <anchor>QFontMetrics</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>QFontMetrics</name>
      <anchor>QFontMetrics-2</anchor>
      <arglist>( const QFont &amp; font, QPaintDevice * paintdevice )</arglist>
    </member>
    <member kind="function">
      <name>QFontMetrics</name>
      <anchor>QFontMetrics-3</anchor>
      <arglist>( const QFontMetrics &amp; fm )</arglist>
    </member>
    <member kind="function">
      <name>ascent</name>
      <anchor>ascent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-2</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-5</anchor>
      <arglist>( int x, int y, int width, int height, int flags, const QString &amp; text, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-6</anchor>
      <arglist>( const QRect &amp; r, int flgs, const QString &amp; str, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
    <member kind="function">
      <name>charWidth</name>
      <anchor>charWidth</anchor>
      <arglist>( const QString &amp; str, int pos )</arglist>
    </member>
    <member kind="function">
      <name>descent</name>
      <anchor>descent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inFont</name>
      <anchor>inFont</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>leading</name>
      <anchor>leading</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftBearing</name>
      <anchor>leftBearing</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>lineSpacing</name>
      <anchor>lineSpacing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineWidth</name>
      <anchor>lineWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxWidth</name>
      <anchor>maxWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minLeftBearing</name>
      <anchor>minLeftBearing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minRightBearing</name>
      <anchor>minRightBearing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>overlinePos</name>
      <anchor>overlinePos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightBearing</name>
      <anchor>rightBearing</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>( int flgs, const QString &amp; text, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
    <member kind="function">
      <name>strikeOutPos</name>
      <anchor>strikeOutPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>underlinePos</name>
      <anchor>underlinePos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( const QString &amp; str, int len = -1 )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width-2</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QFontMetrics &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QFontMetrics &amp; fm )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QFontMetrics &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFontMetricsF</name>
    <filename>qfontmetricsf.html</filename>
    <member kind="function">
      <name>QFontMetricsF</name>
      <anchor>QFontMetricsF</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>QFontMetricsF</name>
      <anchor>QFontMetricsF-2</anchor>
      <arglist>( const QFont &amp; font, QPaintDevice * paintdevice )</arglist>
    </member>
    <member kind="function">
      <name>QFontMetricsF</name>
      <anchor>QFontMetricsF-3</anchor>
      <arglist>( const QFontMetrics &amp; fontMetrics )</arglist>
    </member>
    <member kind="function">
      <name>QFontMetricsF</name>
      <anchor>QFontMetricsF-4</anchor>
      <arglist>( const QFontMetricsF &amp; fm )</arglist>
    </member>
    <member kind="function">
      <name>ascent</name>
      <anchor>ascent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-2</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-3</anchor>
      <arglist>( const QRectF &amp; rect, int flags, const QString &amp; text, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
    <member kind="function">
      <name>descent</name>
      <anchor>descent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inFont</name>
      <anchor>inFont</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>leading</name>
      <anchor>leading</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftBearing</name>
      <anchor>leftBearing</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>lineSpacing</name>
      <anchor>lineSpacing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineWidth</name>
      <anchor>lineWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxWidth</name>
      <anchor>maxWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minLeftBearing</name>
      <anchor>minLeftBearing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minRightBearing</name>
      <anchor>minRightBearing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>overlinePos</name>
      <anchor>overlinePos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightBearing</name>
      <anchor>rightBearing</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>( int flags, const QString &amp; text, int tabstops = 0, int * tabarray = 0 )</arglist>
    </member>
    <member kind="function">
      <name>strikeOutPos</name>
      <anchor>strikeOutPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>underlinePos</name>
      <anchor>underlinePos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width-2</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QFontMetricsF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QFontMetricsF &amp; fm )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QFontMetrics &amp; fontMetrics )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QFontMetricsF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QFrame</name>
      <anchor>QFrame-2</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFrame</name>
    <filename>qframe.html</filename>
    <member kind="enum">
      <name>Shadow</name>
      <anchor>Shadow-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Shape</name>
      <anchor>Shape-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFrame</name>
      <anchor>QFrame</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>frameStyle</name>
      <anchor>frameStyle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFrameStyle</name>
      <anchor>setFrameStyle</anchor>
      <arglist>( int style )</arglist>
    </member>
    <member kind="function">
      <name>QFtp</name>
      <anchor>QFtp-2</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>readBlock</name>
      <anchor>readBlock</anchor>
      <arglist>( char * data, quint64 maxlen )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QFtp</name>
    <filename>qftp.html</filename>
    <member kind="enum">
      <name>Command</name>
      <anchor>Command-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TransferMode</name>
      <anchor>TransferMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TransferType</name>
      <anchor>TransferType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QFtp</name>
      <anchor>QFtp</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cd</name>
      <anchor>cd</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>clearPendingCommands</name>
      <anchor>clearPendingCommands</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commandFinished</name>
      <anchor>commandFinished</anchor>
      <arglist>( int id, bool error )</arglist>
    </member>
    <member kind="function">
      <name>commandStarted</name>
      <anchor>commandStarted</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>connectToHost</name>
      <anchor>connectToHost</anchor>
      <arglist>( const QString &amp; host, quint16 port = 21 )</arglist>
    </member>
    <member kind="function">
      <name>currentCommand</name>
      <anchor>currentCommand</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentDevice</name>
      <anchor>currentDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentId</name>
      <anchor>currentId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dataTransferProgress</name>
      <anchor>dataTransferProgress</anchor>
      <arglist>( qint64 done, qint64 total )</arglist>
    </member>
    <member kind="function">
      <name>done</name>
      <anchor>done</anchor>
      <arglist>( bool error )</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>get</name>
      <anchor>get</anchor>
      <arglist>( const QString &amp; file, QIODevice * dev = 0, TransferType type = Binary )</arglist>
    </member>
    <member kind="function">
      <name>hasPendingCommands</name>
      <anchor>hasPendingCommands</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>list</name>
      <anchor>list</anchor>
      <arglist>( const QString &amp; dir = QString()</arglist>
    </member>
    <member kind="function">
      <name>listInfo</name>
      <anchor>listInfo</anchor>
      <arglist>( const QUrlInfo &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>login</name>
      <anchor>login</anchor>
      <arglist>( const QString &amp; user = QString()</arglist>
    </member>
    <member kind="function">
      <name>mkdir</name>
      <anchor>mkdir</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>put</name>
      <anchor>put</anchor>
      <arglist>( QIODevice * dev, const QString &amp; file, TransferType type = Binary )</arglist>
    </member>
    <member kind="function">
      <name>put</name>
      <anchor>put-2</anchor>
      <arglist>( const QByteArray &amp; data, const QString &amp; file, TransferType type = Binary )</arglist>
    </member>
    <member kind="function">
      <name>rawCommand</name>
      <anchor>rawCommand</anchor>
      <arglist>( const QString &amp; command )</arglist>
    </member>
    <member kind="function">
      <name>rawCommandReply</name>
      <anchor>rawCommandReply</anchor>
      <arglist>( int replyCode, const QString &amp; detail )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( char * data, qint64 maxlen )</arglist>
    </member>
    <member kind="function">
      <name>readAll</name>
      <anchor>readAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readyRead</name>
      <anchor>readyRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>rename</name>
      <anchor>rename</anchor>
      <arglist>( const QString &amp; oldname, const QString &amp; newname )</arglist>
    </member>
    <member kind="function">
      <name>rmdir</name>
      <anchor>rmdir</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>setProxy</name>
      <anchor>setProxy</anchor>
      <arglist>( const QString &amp; host, quint16 port )</arglist>
    </member>
    <member kind="function">
      <name>setTransferMode</name>
      <anchor>setTransferMode</anchor>
      <arglist>( TransferMode mode )</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( int state )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGfxDriverFactory</name>
    <filename>qgfxdriverfactory.html</filename>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key, int displayId )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGfxDriverPlugin</name>
    <filename>qgfxdriverplugin.html</filename>
    <member kind="function">
      <name>QGfxDriverPlugin</name>
      <anchor>QGfxDriverPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; driver, int displayId )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGLColormap</name>
    <filename>qglcolormap.html</filename>
    <member kind="function">
      <name>QGLColormap</name>
      <anchor>QGLColormap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QGLColormap</name>
      <anchor>QGLColormap-2</anchor>
      <arglist>( const QGLColormap &amp; map )</arglist>
    </member>
    <member kind="function">
      <name>detach</name>
      <anchor>detach</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>entryColor</name>
      <anchor>entryColor</anchor>
      <arglist>( int idx )</arglist>
    </member>
    <member kind="function">
      <name>entryRgb</name>
      <anchor>entryRgb</anchor>
      <arglist>( int idx )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( QRgb color )</arglist>
    </member>
    <member kind="function">
      <name>findNearest</name>
      <anchor>findNearest</anchor>
      <arglist>( QRgb color )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEntries</name>
      <anchor>setEntries</anchor>
      <arglist>( int count, const QRgb * colors, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setEntry</name>
      <anchor>setEntry</anchor>
      <arglist>( int idx, QRgb color )</arglist>
    </member>
    <member kind="function">
      <name>setEntry</name>
      <anchor>setEntry-2</anchor>
      <arglist>( int idx, const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QGLColormap &amp; map )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGLContext</name>
    <filename>qglcontext.html</filename>
    <member kind="function">
      <name>QGLContext</name>
      <anchor>QGLContext</anchor>
      <arglist>( const QGLFormat &amp; format, QPaintDevice * device )</arglist>
    </member>
    <member kind="function">
      <name>bindTexture</name>
      <anchor>bindTexture</anchor>
      <arglist>( const QImage &amp; image, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA8 )</arglist>
    </member>
    <member kind="function">
      <name>bindTexture</name>
      <anchor>bindTexture-2</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>bindTexture</name>
      <anchor>bindTexture-3</anchor>
      <arglist>( const QPixmap &amp; pixmap, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA8 )</arglist>
    </member>
    <member kind="function">
      <name>chooseContext</name>
      <anchor>chooseContext</anchor>
      <arglist>( const QGLContext * shareContext = 0 )</arglist>
    </member>
    <member kind="function">
      <name>chooseMacVisual</name>
      <anchor>chooseMacVisual</anchor>
      <arglist>( GDHandle device )</arglist>
    </member>
    <member kind="function">
      <name>choosePixelFormat</name>
      <anchor>choosePixelFormat</anchor>
      <arglist>( void * dummyPfd, HDC pdc )</arglist>
    </member>
    <member kind="function">
      <name>chooseVisual</name>
      <anchor>chooseVisual</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QGLContext * shareContext = 0 )</arglist>
    </member>
    <member kind="function">
      <name>currentContext</name>
      <anchor>currentContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteTexture</name>
      <anchor>deleteTexture</anchor>
      <arglist>( GLuint id )</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deviceIsPixmap</name>
      <anchor>deviceIsPixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doneCurrent</name>
      <anchor>doneCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>generateFontDisplayLists</name>
      <anchor>generateFontDisplayLists</anchor>
      <arglist>( const QFont &amp; font, int listBase )</arglist>
    </member>
    <member kind="function">
      <name>getProcAddress</name>
      <anchor>getProcAddress</anchor>
      <arglist>( const QString &amp; proc )</arglist>
    </member>
    <member kind="function">
      <name>initialized</name>
      <anchor>initialized</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSharing</name>
      <anchor>isSharing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeCurrent</name>
      <anchor>makeCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>overlayTransparentColor</name>
      <anchor>overlayTransparentColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>requestedFormat</name>
      <anchor>requestedFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QGLFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setInitialized</name>
      <anchor>setInitialized</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>setTextureCacheLimit</name>
      <anchor>setTextureCacheLimit</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setWindowCreated</name>
      <anchor>setWindowCreated</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>swapBuffers</name>
      <anchor>swapBuffers</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textureCacheLimit</name>
      <anchor>textureCacheLimit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>windowCreated</name>
      <anchor>windowCreated</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGLFormat</name>
    <filename>qglformat.html</filename>
    <member kind="function">
      <name>QGLFormat</name>
      <anchor>QGLFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QGLFormat</name>
      <anchor>QGLFormat-2</anchor>
      <arglist>( QGL::FormatOptions options, int plane = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGLFormat</name>
      <anchor>QGLFormat-3</anchor>
      <arglist>( const QGLFormat &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>accum</name>
      <anchor>accum</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>accumBufferSize</name>
      <anchor>accumBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alpha</name>
      <anchor>alpha</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alphaBufferSize</name>
      <anchor>alphaBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultFormat</name>
      <anchor>defaultFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultOverlayFormat</name>
      <anchor>defaultOverlayFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>depthBufferSize</name>
      <anchor>depthBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>directRendering</name>
      <anchor>directRendering</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doubleBuffer</name>
      <anchor>doubleBuffer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasOpenGL</name>
      <anchor>hasOpenGL</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasOpenGLOverlays</name>
      <anchor>hasOpenGLOverlays</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasOverlay</name>
      <anchor>hasOverlay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>plane</name>
      <anchor>plane</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rgba</name>
      <anchor>rgba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sampleBuffers</name>
      <anchor>sampleBuffers</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>samples</name>
      <anchor>samples</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAccum</name>
      <anchor>setAccum</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setAccumBufferSize</name>
      <anchor>setAccumBufferSize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setAlpha</name>
      <anchor>setAlpha</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setAlphaBufferSize</name>
      <anchor>setAlphaBufferSize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultFormat</name>
      <anchor>setDefaultFormat</anchor>
      <arglist>( const QGLFormat &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultOverlayFormat</name>
      <anchor>setDefaultOverlayFormat</anchor>
      <arglist>( const QGLFormat &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setDepth</name>
      <anchor>setDepth</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setDepthBufferSize</name>
      <anchor>setDepthBufferSize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setDirectRendering</name>
      <anchor>setDirectRendering</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setDoubleBuffer</name>
      <anchor>setDoubleBuffer</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setOption</name>
      <anchor>setOption</anchor>
      <arglist>( QGL::FormatOptions opt )</arglist>
    </member>
    <member kind="function">
      <name>setOverlay</name>
      <anchor>setOverlay</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setPlane</name>
      <anchor>setPlane</anchor>
      <arglist>( int plane )</arglist>
    </member>
    <member kind="function">
      <name>setRgba</name>
      <anchor>setRgba</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setSampleBuffers</name>
      <anchor>setSampleBuffers</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setSamples</name>
      <anchor>setSamples</anchor>
      <arglist>( int numSamples )</arglist>
    </member>
    <member kind="function">
      <name>setStencil</name>
      <anchor>setStencil</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setStencilBufferSize</name>
      <anchor>setStencilBufferSize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setStereo</name>
      <anchor>setStereo</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>stencil</name>
      <anchor>stencil</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stencilBufferSize</name>
      <anchor>stencilBufferSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stereo</name>
      <anchor>stereo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>testOption</name>
      <anchor>testOption</anchor>
      <arglist>( QGL::FormatOptions opt )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QGLFormat &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QGLFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>QGLWidget</name>
      <anchor>QGLWidget-4</anchor>
      <arglist>( QWidget * parent, const char * name, const QGLWidget * shareWidget = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGLWidget</name>
      <anchor>QGLWidget-5</anchor>
      <arglist>( const QGLFormat &amp; format, QWidget * parent, const char * name, const QGLWidget * shareWidget = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGLWidget</name>
      <anchor>QGLWidget-6</anchor>
      <arglist>( QGLContext * context, QWidget * parent, const char * name, const QGLWidget * shareWidget = 0, Qt::WFlags f = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGLWidget</name>
    <filename>qglwidget.html</filename>
    <member kind="function">
      <name>QGLWidget</name>
      <anchor>QGLWidget</anchor>
      <arglist>( QWidget * parent = 0, const QGLWidget * shareWidget = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGLWidget</name>
      <anchor>QGLWidget-2</anchor>
      <arglist>( QGLContext * context, QWidget * parent = 0, const QGLWidget * shareWidget = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGLWidget</name>
      <anchor>QGLWidget-3</anchor>
      <arglist>( const QGLFormat &amp; format, QWidget * parent = 0, const QGLWidget * shareWidget = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>autoBufferSwap</name>
      <anchor>autoBufferSwap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bindTexture</name>
      <anchor>bindTexture</anchor>
      <arglist>( const QImage &amp; image, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA8 )</arglist>
    </member>
    <member kind="function">
      <name>bindTexture</name>
      <anchor>bindTexture-2</anchor>
      <arglist>( const QPixmap &amp; pixmap, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA8 )</arglist>
    </member>
    <member kind="function">
      <name>bindTexture</name>
      <anchor>bindTexture-3</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>colormap</name>
      <anchor>colormap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>context</name>
      <anchor>context</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>convertToGLFormat</name>
      <anchor>convertToGLFormat</anchor>
      <arglist>( const QImage &amp; img )</arglist>
    </member>
    <member kind="function">
      <name>deleteTexture</name>
      <anchor>deleteTexture</anchor>
      <arglist>( GLuint id )</arglist>
    </member>
    <member kind="function">
      <name>doneCurrent</name>
      <anchor>doneCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>doubleBuffer</name>
      <anchor>doubleBuffer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontDisplayListBase</name>
      <anchor>fontDisplayListBase</anchor>
      <arglist>( const QFont &amp; fnt, int listBase = 2000 )</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>glDraw</name>
      <anchor>glDraw</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>glInit</name>
      <anchor>glInit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>grabFrameBuffer</name>
      <anchor>grabFrameBuffer</anchor>
      <arglist>( bool withAlpha = false )</arglist>
    </member>
    <member kind="function">
      <name>initializeGL</name>
      <anchor>initializeGL</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initializeOverlayGL</name>
      <anchor>initializeOverlayGL</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSharing</name>
      <anchor>isSharing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeCurrent</name>
      <anchor>makeCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeOverlayCurrent</name>
      <anchor>makeOverlayCurrent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>overlayContext</name>
      <anchor>overlayContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>paintGL</name>
      <anchor>paintGL</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintOverlayGL</name>
      <anchor>paintOverlayGL</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>qglClearColor</name>
      <anchor>qglClearColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>qglColor</name>
      <anchor>qglColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>renderPixmap</name>
      <anchor>renderPixmap</anchor>
      <arglist>( int w = 0, int h = 0, bool useContext = false )</arglist>
    </member>
    <member kind="function">
      <name>renderText</name>
      <anchor>renderText</anchor>
      <arglist>( int x, int y, const QString &amp; str, const QFont &amp; fnt = QFont()</arglist>
    </member>
    <member kind="function">
      <name>renderText</name>
      <anchor>renderText-2</anchor>
      <arglist>( double x, double y, double z, const QString &amp; str, const QFont &amp; fnt = QFont()</arglist>
    </member>
    <member kind="function">
      <name>resizeEvent</name>
      <anchor>resizeEvent</anchor>
      <arglist>( QResizeEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>resizeGL</name>
      <anchor>resizeGL</anchor>
      <arglist>( int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>resizeOverlayGL</name>
      <anchor>resizeOverlayGL</anchor>
      <arglist>( int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>setAutoBufferSwap</name>
      <anchor>setAutoBufferSwap</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>setColormap</name>
      <anchor>setColormap</anchor>
      <arglist>( const QGLColormap &amp; cmap )</arglist>
    </member>
    <member kind="function">
      <name>setMouseTracking</name>
      <anchor>setMouseTracking</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>swapBuffers</name>
      <anchor>swapBuffers</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateGL</name>
      <anchor>updateGL</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateOverlayGL</name>
      <anchor>updateOverlayGL</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGradient</name>
    <filename>qgradient.html</filename>
    <member kind="enum">
      <name>Spread</name>
      <anchor>Spread-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>setColorAt</name>
      <anchor>setColorAt</anchor>
      <arglist>( qreal pos, const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setSpread</name>
      <anchor>setSpread</anchor>
      <arglist>( Spread spread )</arglist>
    </member>
    <member kind="function">
      <name>setStops</name>
      <anchor>setStops</anchor>
      <arglist>( const QGradientStops &amp; stops )</arglist>
    </member>
    <member kind="function">
      <name>spread</name>
      <anchor>spread</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stops</name>
      <anchor>stops</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QGridLayout</name>
      <anchor>QGridLayout-3</anchor>
      <arglist>( QWidget * parent, int nRows, int nCols = 1, int margin = 0, int space = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGridLayout</name>
      <anchor>QGridLayout-4</anchor>
      <arglist>( int nRows, int nCols = 1, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGridLayout</name>
      <anchor>QGridLayout-5</anchor>
      <arglist>( QLayout * parentLayout, int nRows = 1, int nCols = 1, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addColSpacing</name>
      <anchor>addColSpacing</anchor>
      <arglist>( int col, int minsize )</arglist>
    </member>
    <member kind="function">
      <name>addMultiCell</name>
      <anchor>addMultiCell</anchor>
      <arglist>( QLayoutItem * l, int fromRow, int toRow, int fromCol, int toCol, Qt::Alignment align = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addMultiCellLayout</name>
      <anchor>addMultiCellLayout</anchor>
      <arglist>( QLayout * layout, int fromRow, int toRow, int fromCol, int toCol, Qt::Alignment align = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addMultiCellWidget</name>
      <anchor>addMultiCellWidget</anchor>
      <arglist>( QWidget * w, int fromRow, int toRow, int fromCol, int toCol, Qt::Alignment align = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addRowSpacing</name>
      <anchor>addRowSpacing</anchor>
      <arglist>( int row, int minsize )</arglist>
    </member>
    <member kind="function">
      <name>cellGeometry</name>
      <anchor>cellGeometry</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>colSpacing</name>
      <anchor>colSpacing</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>colStretch</name>
      <anchor>colStretch</anchor>
      <arglist>( int col )</arglist>
    </member>
    <member kind="function">
      <name>expand</name>
      <anchor>expand</anchor>
      <arglist>( int nRows, int nCols )</arglist>
    </member>
    <member kind="function">
      <name>findWidget</name>
      <anchor>findWidget</anchor>
      <arglist>( QWidget * w, int * row, int * column )</arglist>
    </member>
    <member kind="function">
      <name>numCols</name>
      <anchor>numCols</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numRows</name>
      <anchor>numRows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Corner</name>
      <anchor>origin</anchor>
      <arglist> QGridLayout::origin()</arglist>
    </member>
    <member kind="function">
      <name>rowSpacing</name>
      <anchor>rowSpacing</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>setColSpacing</name>
      <anchor>setColSpacing</anchor>
      <arglist>( int col, int minSize )</arglist>
    </member>
    <member kind="function">
      <name>setColStretch</name>
      <anchor>setColStretch</anchor>
      <arglist>( int col, int stretch )</arglist>
    </member>
    <member kind="function">
      <name>setOrigin</name>
      <anchor>setOrigin</anchor>
      <arglist>( Qt::Corner corner )</arglist>
    </member>
    <member kind="function">
      <name>setRowSpacing</name>
      <anchor>setRowSpacing</anchor>
      <arglist>( int row, int minSize )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGridLayout</name>
    <filename>qgridlayout.html</filename>
    <member kind="function">
      <name>QGridLayout</name>
      <anchor>QGridLayout</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>QGridLayout</name>
      <anchor>QGridLayout-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem</anchor>
      <arglist>( QLayoutItem * item, int row, int column, int rowSpan = 1, int columnSpan = 1, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem-2</anchor>
      <arglist>( QLayoutItem * item )</arglist>
    </member>
    <member kind="function">
      <name>addLayout</name>
      <anchor>addLayout</anchor>
      <arglist>( QLayout * layout, int row, int column, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addLayout</name>
      <anchor>addLayout-2</anchor>
      <arglist>( QLayout * layout, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget-2</anchor>
      <arglist>( QWidget * w, int row, int column, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget-3</anchor>
      <arglist>( QWidget * w, int fromRow, int fromColumn, int rowSpan, int columnSpan, Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>cellRect</name>
      <anchor>cellRect</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>columnCount</name>
      <anchor>columnCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnMinimumWidth</name>
      <anchor>columnMinimumWidth</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>columnStretch</name>
      <anchor>columnStretch</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>Orientations</name>
      <anchor>expandingDirections</anchor>
      <arglist> QGridLayout::expandingDirections()</arglist>
    </member>
    <member kind="function">
      <name>getItemPosition</name>
      <anchor>getItemPosition</anchor>
      <arglist>( int index, int * row, int * column, int * rowSpan, int * columnSpan )</arglist>
    </member>
    <member kind="function">
      <name>hasHeightForWidth</name>
      <anchor>hasHeightForWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>heightForWidth</name>
      <anchor>heightForWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>invalidate</name>
      <anchor>invalidate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximumSize</name>
      <anchor>maximumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumSize</name>
      <anchor>minimumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Corner</name>
      <anchor>originCorner</anchor>
      <arglist> QGridLayout::originCorner()</arglist>
    </member>
    <member kind="function">
      <name>rowCount</name>
      <anchor>rowCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowMinimumHeight</name>
      <anchor>rowMinimumHeight</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>rowStretch</name>
      <anchor>rowStretch</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>setColumnMinimumWidth</name>
      <anchor>setColumnMinimumWidth</anchor>
      <arglist>( int column, int minSize )</arglist>
    </member>
    <member kind="function">
      <name>setColumnStretch</name>
      <anchor>setColumnStretch</anchor>
      <arglist>( int column, int stretch )</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setOriginCorner</name>
      <anchor>setOriginCorner</anchor>
      <arglist>( Qt::Corner c )</arglist>
    </member>
    <member kind="function">
      <name>setRowMinimumHeight</name>
      <anchor>setRowMinimumHeight</anchor>
      <arglist>( int row, int minSize )</arglist>
    </member>
    <member kind="function">
      <name>setRowStretch</name>
      <anchor>setRowStretch</anchor>
      <arglist>( int row, int stretch )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QGroupBox</name>
      <anchor>QGroupBox-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QGroupBox</name>
      <anchor>QGroupBox-4</anchor>
      <arglist>( const QString &amp; title, QWidget * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QGroupBox</name>
    <filename>qgroupbox.html</filename>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QGroupBox</name>
      <anchor>QGroupBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QGroupBox</name>
      <anchor>QGroupBox-2</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toggled</name>
      <anchor>toggled</anchor>
      <arglist>( bool on )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHash::const_iterator</name>
    <filename>qhash-const-iterator.html</filename>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-3</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHash::iterator</name>
    <filename>qhash-iterator.html</filename>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHash</name>
    <filename>qhash.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QHash</name>
      <anchor>QHash</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QHash</name>
      <anchor>QHash-2</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>capacity</name>
      <anchor>capacity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constBegin</name>
      <anchor>constBegin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constEnd</name>
      <anchor>constEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>empty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>insertMulti</name>
      <anchor>insertMulti</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys-2</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>reserve</name>
      <anchor>reserve</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>squeeze</name>
      <anchor>squeeze</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>unite</name>
      <anchor>unite</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( const Key &amp; key, const T &amp; defaultValue )</arglist>
    </member>
    <member kind="function">
      <name>values</name>
      <anchor>values</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>values</name>
      <anchor>values-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHashIterator</name>
    <filename>qhashiterator.html</filename>
    <member kind="function">
      <name>QHashIterator</name>
      <anchor>QHashIterator</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; hash )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; hash )</arglist>
    </member>
    <member kind="function">
      <name>QHBoxLayout</name>
      <anchor>QHBoxLayout-3</anchor>
      <arglist>( QWidget * parent, int margin, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QHBoxLayout</name>
      <anchor>QHBoxLayout-4</anchor>
      <arglist>( QLayout * parentLayout, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QHBoxLayout</name>
      <anchor>QHBoxLayout-5</anchor>
      <arglist>( int spacing, const char * name = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHBoxLayout</name>
    <filename>qhboxlayout.html</filename>
    <member kind="function">
      <name>QHBoxLayout</name>
      <anchor>QHBoxLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QHBoxLayout</name>
      <anchor>QHBoxLayout-2</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHeaderView</name>
    <filename>qheaderview.html</filename>
    <member kind="enum">
      <name>ResizeMode</name>
      <anchor>ResizeMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QHeaderView</name>
      <anchor>QHeaderView</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>headerDataChanged</name>
      <anchor>headerDataChanged</anchor>
      <arglist>( Qt::Orientation orientation, int logicalFirst, int logicalLast )</arglist>
    </member>
    <member kind="function">
      <name>hideSection</name>
      <anchor>hideSection</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>horizontalOffset</name>
      <anchor>horizontalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isClickable</name>
      <anchor>isClickable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMovable</name>
      <anchor>isMovable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSectionHidden</name>
      <anchor>isSectionHidden</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalIndex</name>
      <anchor>logicalIndex</anchor>
      <arglist>( int visualIndex )</arglist>
    </member>
    <member kind="function">
      <name>logicalIndexAt</name>
      <anchor>logicalIndexAt</anchor>
      <arglist>( int position )</arglist>
    </member>
    <member kind="function">
      <name>logicalIndexAt</name>
      <anchor>logicalIndexAt-2</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>logicalIndexAt</name>
      <anchor>logicalIndexAt-3</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>moveSection</name>
      <anchor>moveSection</anchor>
      <arglist>( int from, int to )</arglist>
    </member>
    <member kind="function">
      <name>offset</name>
      <anchor>offset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist> QHeaderView::orientation()</arglist>
    </member>
    <member kind="function">
      <name>paintSection</name>
      <anchor>paintSection</anchor>
      <arglist>( QPainter * painter, const QRect &amp; rect, int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>resizeMode</name>
      <anchor>resizeMode</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>resizeSection</name>
      <anchor>resizeSection</anchor>
      <arglist>( int logicalIndex, int size )</arglist>
    </member>
    <member kind="function">
      <name>sectionAutoResize</name>
      <anchor>sectionAutoResize</anchor>
      <arglist>( int logicalIndex, ResizeMode mode )</arglist>
    </member>
    <member kind="function">
      <name>sectionClicked</name>
      <anchor>sectionClicked</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionCountChanged</name>
      <anchor>sectionCountChanged</anchor>
      <arglist>( int oldCount, int newCount )</arglist>
    </member>
    <member kind="function">
      <name>sectionDoubleClicked</name>
      <anchor>sectionDoubleClicked</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionHandleDoubleClicked</name>
      <anchor>sectionHandleDoubleClicked</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionMoved</name>
      <anchor>sectionMoved</anchor>
      <arglist>( int logicalIndex, int oldVisualIndex, int newVisualIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionPosition</name>
      <anchor>sectionPosition</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionPressed</name>
      <anchor>sectionPressed</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionResized</name>
      <anchor>sectionResized</anchor>
      <arglist>( int logicalIndex, int oldSize, int newSize )</arglist>
    </member>
    <member kind="function">
      <name>sectionSize</name>
      <anchor>sectionSize</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionSizeFromContents</name>
      <anchor>sectionSizeFromContents</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionSizeHint</name>
      <anchor>sectionSizeHint</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionViewportPosition</name>
      <anchor>sectionViewportPosition</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sectionsAboutToBeRemoved</name>
      <anchor>sectionsAboutToBeRemoved</anchor>
      <arglist>( const QModelIndex &amp; parent, int logicalFirst, int logicalLast )</arglist>
    </member>
    <member kind="function">
      <name>sectionsInserted</name>
      <anchor>sectionsInserted</anchor>
      <arglist>( const QModelIndex &amp; parent, int logicalFirst, int logicalLast )</arglist>
    </member>
    <member kind="function">
      <name>sectionsMoved</name>
      <anchor>sectionsMoved</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setClickable</name>
      <anchor>setClickable</anchor>
      <arglist>( bool clickable )</arglist>
    </member>
    <member kind="function">
      <name>setMovable</name>
      <anchor>setMovable</anchor>
      <arglist>( bool movable )</arglist>
    </member>
    <member kind="function">
      <name>setOffset</name>
      <anchor>setOffset</anchor>
      <arglist>( int offset )</arglist>
    </member>
    <member kind="function">
      <name>setResizeMode</name>
      <anchor>setResizeMode</anchor>
      <arglist>( ResizeMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setResizeMode</name>
      <anchor>setResizeMode-2</anchor>
      <arglist>( int logicalIndex, ResizeMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setSectionHidden</name>
      <anchor>setSectionHidden</anchor>
      <arglist>( int logicalIndex, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setSortIndicator</name>
      <anchor>setSortIndicator</anchor>
      <arglist>( int logicalIndex, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>showSection</name>
      <anchor>showSection</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SortOrder</name>
      <anchor>sortIndicatorOrder</anchor>
      <arglist> QHeaderView::sortIndicatorOrder()</arglist>
    </member>
    <member kind="function">
      <name>sortIndicatorSection</name>
      <anchor>sortIndicatorSection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalOffset</name>
      <anchor>verticalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visualIndex</name>
      <anchor>visualIndex</anchor>
      <arglist>( int logicalIndex )</arglist>
    </member>
    <member kind="function">
      <name>visualIndexAt</name>
      <anchor>visualIndexAt</anchor>
      <arglist>( int position )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHideEvent</name>
    <filename>qhideevent.html</filename>
    <member kind="function">
      <name>QHideEvent</name>
      <anchor>QHideEvent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ip4Addr</name>
      <anchor>ip4Addr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isIPv4Address</name>
      <anchor>isIPv4Address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isIPv6Address</name>
      <anchor>isIPv6Address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isIp4Addr</name>
      <anchor>isIp4Addr</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHostAddress</name>
    <filename>qhostaddress.html</filename>
    <member kind="enum">
      <name>SpecialAddress</name>
      <anchor>SpecialAddress-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress-2</anchor>
      <arglist>( quint32 ip4Addr )</arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress-3</anchor>
      <arglist>( quint8 * ip6Addr )</arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress-4</anchor>
      <arglist>( const Q_IPV6ADDR &amp; ip6Addr )</arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress-5</anchor>
      <arglist>( const QString &amp; address )</arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress-6</anchor>
      <arglist>( const QHostAddress &amp; address )</arglist>
    </member>
    <member kind="function">
      <name>QHostAddress</name>
      <anchor>QHostAddress-7</anchor>
      <arglist>( SpecialAddress address )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NetworkLayerProtocol</name>
      <anchor>protocol</anchor>
      <arglist> QHostAddress::protocol()</arglist>
    </member>
    <member kind="function">
      <name>setAddress</name>
      <anchor>setAddress</anchor>
      <arglist>( quint32 ip4Addr )</arglist>
    </member>
    <member kind="function">
      <name>setAddress</name>
      <anchor>setAddress-2</anchor>
      <arglist>( quint8 * ip6Addr )</arglist>
    </member>
    <member kind="function">
      <name>setAddress</name>
      <anchor>setAddress-3</anchor>
      <arglist>( const Q_IPV6ADDR &amp; ip6Addr )</arglist>
    </member>
    <member kind="function">
      <name>setAddress</name>
      <anchor>setAddress-4</anchor>
      <arglist>( const QString &amp; address )</arglist>
    </member>
    <member kind="function">
      <name>toIPv4Address</name>
      <anchor>toIPv4Address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toIPv6Address</name>
      <anchor>toIPv6Address</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHostAddress &amp; address )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QHostAddress &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( SpecialAddress other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHostInfo</name>
    <filename>qhostinfo.html</filename>
    <member kind="enum">
      <name>HostInfoError</name>
      <anchor>HostInfoError-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QHostInfo</name>
      <anchor>QHostInfo</anchor>
      <arglist>( int id = -1 )</arglist>
    </member>
    <member kind="function">
      <name>QHostInfo</name>
      <anchor>QHostInfo-2</anchor>
      <arglist>( const QHostInfo &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>abortHostLookup</name>
      <anchor>abortHostLookup</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>addresses</name>
      <anchor>addresses</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromName</name>
      <anchor>fromName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>hostName</name>
      <anchor>hostName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localHostName</name>
      <anchor>localHostName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lookupHost</name>
      <anchor>lookupHost</anchor>
      <arglist>( const QString &amp; name, QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>lookupId</name>
      <anchor>lookupId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAddresses</name>
      <anchor>setAddresses</anchor>
      <arglist>( const QList&lt;QHostAddress&gt; &amp; addresses )</arglist>
    </member>
    <member kind="function">
      <name>setError</name>
      <anchor>setError</anchor>
      <arglist>( HostInfoError error )</arglist>
    </member>
    <member kind="function">
      <name>setErrorString</name>
      <anchor>setErrorString</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>setHostName</name>
      <anchor>setHostName</anchor>
      <arglist>( const QString &amp; hostName )</arglist>
    </member>
    <member kind="function">
      <name>setLookupId</name>
      <anchor>setLookupId</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHostInfo &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHoverEvent</name>
    <filename>qhoverevent.html</filename>
    <member kind="function">
      <name>QHoverEvent</name>
      <anchor>QHoverEvent</anchor>
      <arglist>( Type type, const QPoint &amp; pos, const QPoint &amp; oldPos )</arglist>
    </member>
    <member kind="function">
      <name>oldPos</name>
      <anchor>oldPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeConnection</name>
      <anchor>closeConnection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readBlock</name>
      <anchor>readBlock</anchor>
      <arglist>( char * data, quint64 maxlen )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHttp</name>
    <filename>qhttp.html</filename>
    <member kind="enum">
      <name>Error</name>
      <anchor>Error-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QHttp</name>
      <anchor>QHttp</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QHttp</name>
      <anchor>QHttp-2</anchor>
      <arglist>( const QString &amp; hostName, quint16 port = 80, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearPendingRequests</name>
      <anchor>clearPendingRequests</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentDestinationDevice</name>
      <anchor>currentDestinationDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentId</name>
      <anchor>currentId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentRequest</name>
      <anchor>currentRequest</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentSourceDevice</name>
      <anchor>currentSourceDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dataReadProgress</name>
      <anchor>dataReadProgress</anchor>
      <arglist>( int done, int total )</arglist>
    </member>
    <member kind="function">
      <name>dataSendProgress</name>
      <anchor>dataSendProgress</anchor>
      <arglist>( int done, int total )</arglist>
    </member>
    <member kind="function">
      <name>done</name>
      <anchor>done</anchor>
      <arglist>( bool error )</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>get</name>
      <anchor>get</anchor>
      <arglist>( const QString &amp; path, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasPendingRequests</name>
      <anchor>hasPendingRequests</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>head</name>
      <anchor>head</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>post</name>
      <anchor>post</anchor>
      <arglist>( const QString &amp; path, QIODevice * data, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>post</name>
      <anchor>post-2</anchor>
      <arglist>( const QString &amp; path, const QByteArray &amp; data, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( char * data, qint64 maxlen )</arglist>
    </member>
    <member kind="function">
      <name>readAll</name>
      <anchor>readAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readyRead</name>
      <anchor>readyRead</anchor>
      <arglist>( const QHttpResponseHeader &amp; resp )</arglist>
    </member>
    <member kind="function">
      <name>request</name>
      <anchor>request</anchor>
      <arglist>( const QHttpRequestHeader &amp; header, QIODevice * data = 0, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>request</name>
      <anchor>request-2</anchor>
      <arglist>( const QHttpRequestHeader &amp; header, const QByteArray &amp; data, QIODevice * to = 0 )</arglist>
    </member>
    <member kind="function">
      <name>requestFinished</name>
      <anchor>requestFinished</anchor>
      <arglist>( int id, bool error )</arglist>
    </member>
    <member kind="function">
      <name>requestStarted</name>
      <anchor>requestStarted</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>responseHeaderReceived</name>
      <anchor>responseHeaderReceived</anchor>
      <arglist>( const QHttpResponseHeader &amp; resp )</arglist>
    </member>
    <member kind="function">
      <name>setHost</name>
      <anchor>setHost</anchor>
      <arglist>( const QString &amp; hostName, quint16 port = 80 )</arglist>
    </member>
    <member kind="function">
      <name>setProxy</name>
      <anchor>setProxy</anchor>
      <arglist>( const QString &amp; host, int port, const QString &amp; username = QString()</arglist>
    </member>
    <member kind="function">
      <name>setSocket</name>
      <anchor>setSocket</anchor>
      <arglist>( QTcpSocket * socket )</arglist>
    </member>
    <member kind="function">
      <name>setUser</name>
      <anchor>setUser</anchor>
      <arglist>( const QString &amp; userName, const QString &amp; password = QString()</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( int state )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHttpHeader</name>
    <filename>qhttpheader.html</filename>
    <member kind="function">
      <name>QHttpHeader</name>
      <anchor>QHttpHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QHttpHeader</name>
      <anchor>QHttpHeader-2</anchor>
      <arglist>( const QHttpHeader &amp; header )</arglist>
    </member>
    <member kind="function">
      <name>QHttpHeader</name>
      <anchor>QHttpHeader-3</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>contentLength</name>
      <anchor>contentLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contentType</name>
      <anchor>contentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasContentLength</name>
      <anchor>hasContentLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasContentType</name>
      <anchor>hasContentType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasKey</name>
      <anchor>hasKey</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>majorVersion</name>
      <anchor>majorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minorVersion</name>
      <anchor>minorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeValue</name>
      <anchor>removeValue</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setContentLength</name>
      <anchor>setContentLength</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>setContentType</name>
      <anchor>setContentType</anchor>
      <arglist>( const QString &amp; type )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QString &amp; key, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHttpHeader &amp; h )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHttpRequestHeader</name>
    <filename>qhttprequestheader.html</filename>
    <member kind="function">
      <name>QHttpRequestHeader</name>
      <anchor>QHttpRequestHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QHttpRequestHeader</name>
      <anchor>QHttpRequestHeader-2</anchor>
      <arglist>( const QString &amp; method, const QString &amp; path, int majorVer = 1, int minorVer = 1 )</arglist>
    </member>
    <member kind="function">
      <name>QHttpRequestHeader</name>
      <anchor>QHttpRequestHeader-3</anchor>
      <arglist>( const QHttpRequestHeader &amp; header )</arglist>
    </member>
    <member kind="function">
      <name>QHttpRequestHeader</name>
      <anchor>QHttpRequestHeader-4</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>majorVersion</name>
      <anchor>majorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>method</name>
      <anchor>method</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minorVersion</name>
      <anchor>minorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>path</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRequest</name>
      <anchor>setRequest</anchor>
      <arglist>( const QString &amp; method, const QString &amp; path, int majorVer = 1, int minorVer = 1 )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHttpRequestHeader &amp; header )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QHttpResponseHeader</name>
    <filename>qhttpresponseheader.html</filename>
    <member kind="function">
      <name>QHttpResponseHeader</name>
      <anchor>QHttpResponseHeader-3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QHttpResponseHeader</name>
      <anchor>QHttpResponseHeader-4</anchor>
      <arglist>( const QHttpResponseHeader &amp; header )</arglist>
    </member>
    <member kind="function">
      <name>majorVersion</name>
      <anchor>majorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minorVersion</name>
      <anchor>minorVersion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reasonPhrase</name>
      <anchor>reasonPhrase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>statusCode</name>
      <anchor>statusCode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QHttpResponseHeader &amp; header )</arglist>
    </member>
    <member kind="enum">
      <name>Size</name>
      <anchor>Size-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap-4</anchor>
      <arglist>( Size size, Mode mode, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap-5</anchor>
      <arglist>( Size size, bool enabled, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap-6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmapSize</name>
      <anchor>pixmapSize</anchor>
      <arglist>( Size which )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>( const QPixmap &amp; pixmap, Size size )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap, Size size, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap-2</anchor>
      <arglist>( const QString &amp; fileName, Size size, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>setPixmapSize</name>
      <anchor>setPixmapSize</anchor>
      <arglist>( Size which, const QSize &amp; size )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QIcon</name>
    <filename>qicon.html</filename>
    <member kind="enum">
      <name>Mode</name>
      <anchor>Mode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QIcon</name>
      <anchor>QIcon</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QIcon</name>
      <anchor>QIcon-2</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>QIcon</name>
      <anchor>QIcon-3</anchor>
      <arglist>( const QIcon &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QIcon</name>
      <anchor>QIcon-4</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>QIcon</name>
      <anchor>QIcon-5</anchor>
      <arglist>( QIconEngine * engine )</arglist>
    </member>
    <member kind="function">
      <name>actualSize</name>
      <anchor>actualSize</anchor>
      <arglist>( const QSize &amp; size, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>addFile</name>
      <anchor>addFile</anchor>
      <arglist>( const QString &amp; fileName, const QSize &amp; size = QSize()</arglist>
    </member>
    <member kind="function">
      <name>addPixmap</name>
      <anchor>addPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter, const QRect &amp; rect, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint-2</anchor>
      <arglist>( QPainter * painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( const QSize &amp; size, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap-2</anchor>
      <arglist>( int w, int h, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap-3</anchor>
      <arglist>( int extent, Mode mode = Normal, State state = Off )</arglist>
    </member>
    <member kind="function">
      <name>serialNumber</name>
      <anchor>serialNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QIcon &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QIconDragEvent</name>
    <filename>qicondragevent.html</filename>
    <member kind="function">
      <name>QIconDragEvent</name>
      <anchor>QIconDragEvent</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QIconEngine</name>
    <filename>qiconengine.html</filename>
    <member kind="function">
      <name>actualSize</name>
      <anchor>actualSize</anchor>
      <arglist>( const QSize &amp; size, QIcon::Mode mode, QIcon::State state )</arglist>
    </member>
    <member kind="function">
      <name>addFile</name>
      <anchor>addFile</anchor>
      <arglist>( const QString &amp; fileName, const QSize &amp; size, QIcon::Mode mode, QIcon::State state )</arglist>
    </member>
    <member kind="function">
      <name>addPixmap</name>
      <anchor>addPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap, QIcon::Mode mode, QIcon::State state )</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter, const QRect &amp; rect, QIcon::Mode mode, QIcon::State state )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( const QSize &amp; size, QIcon::Mode mode, QIcon::State state )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QIconEnginePlugin</name>
    <filename>qiconengineplugin.html</filename>
    <member kind="function">
      <name>QIconEnginePlugin</name>
      <anchor>QIconEnginePlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-9</anchor>
      <arglist>( int w, int h, int depth, int numColors = 0, Endian bitOrder = IgnoreEndian )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-10</anchor>
      <arglist>( const QSize &amp; size, int depth, int numColors = 0, Endian bitOrder = IgnoreEndian )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-11</anchor>
      <arglist>( uchar * data, int w, int h, int depth, const QRgb * colortable, int numColors, Endian bitOrder )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-12</anchor>
      <arglist>( uchar * data, int w, int h, int depth, int bpl, const QRgb * colortable, int numColors, Endian bitOrder )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-13</anchor>
      <arglist>( const QByteArray &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>bitOrder</name>
      <anchor>bitOrder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>convertBitOrder</name>
      <anchor>convertBitOrder</anchor>
      <arglist>( Endian bitOrder )</arglist>
    </member>
    <member kind="function">
      <name>convertDepth</name>
      <anchor>convertDepth</anchor>
      <arglist>( int depth, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>convertDepthWithPalette</name>
      <anchor>convertDepthWithPalette</anchor>
      <arglist>( int d, QRgb * palette, int palette_count, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>( int x, int y, int w, int h, Qt::ImageConversionFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy-2</anchor>
      <arglist>( const QRect &amp; rect, Qt::ImageConversionFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( int width, int height, int depth, int numColors = 0, Endian bitOrder = IgnoreEndian )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create-2</anchor>
      <arglist>( const QSize &amp; size, int depth, int numColors = 0, Endian bitOrder = IgnoreEndian )</arglist>
    </member>
    <member kind="function">
      <name>hasAlphaBuffer</name>
      <anchor>hasAlphaBuffer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>invertPixels</name>
      <anchor>invertPixels-2</anchor>
      <arglist>( bool invertAlpha )</arglist>
    </member>
    <member kind="function">
      <name>jumpTable</name>
      <anchor>jumpTable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>jumpTable</name>
      <anchor>jumpTable-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mirror</name>
      <anchor>mirror</anchor>
      <arglist>( bool horizontal = false, bool vertical = true )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scaleHeight</name>
      <anchor>scaleHeight</anchor>
      <arglist>( int h )</arglist>
    </member>
    <member kind="function">
      <name>scaleWidth</name>
      <anchor>scaleWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>setAlphaBuffer</name>
      <anchor>setAlphaBuffer</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>smoothScale</name>
      <anchor>smoothScale</anchor>
      <arglist>( int width, int height, Qt::AspectRatioMode mode = Qt::IgnoreAspectRatio )</arglist>
    </member>
    <member kind="function">
      <name>smoothScale</name>
      <anchor>smoothScale-2</anchor>
      <arglist>( const QSize &amp; size, Qt::AspectRatioMode mode = Qt::IgnoreAspectRatio )</arglist>
    </member>
    <member kind="function">
      <name>swapRGB</name>
      <anchor>swapRGB</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>systemBitOrder</name>
      <anchor>systemBitOrder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>systemByteOrder</name>
      <anchor>systemByteOrder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm</anchor>
      <arglist>( const QMatrix &amp; matrix )</arglist>
    </member>
    <member kind="function">
      <name>ImageConversionFlags</name>
      <anchor>bitBlt</anchor>
      <arglist> flags = Qt::AutoColor )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QImage</name>
    <filename>qimage.html</filename>
    <member kind="enum">
      <name>Endian</name>
      <anchor>Endian-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Format</name>
      <anchor>Format-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>InvertMode</name>
      <anchor>InvertMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-2</anchor>
      <arglist>( const QSize &amp; size, Format format )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-3</anchor>
      <arglist>( int width, int height, Format format )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-4</anchor>
      <arglist>( uchar * data, int width, int height, Format format )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-5</anchor>
      <arglist>( const char * const[] xpm )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-6</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-7</anchor>
      <arglist>( const char * fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QImage</name>
      <anchor>QImage-8</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>allGray</name>
      <anchor>allGray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alphaChannel</name>
      <anchor>alphaChannel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bits</name>
      <anchor>bits</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bits</name>
      <anchor>bits-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesPerLine</name>
      <anchor>bytesPerLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>colorTable</name>
      <anchor>colorTable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>convertToFormat</name>
      <anchor>convertToFormat</anchor>
      <arglist>( Format format, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>convertToFormat</name>
      <anchor>convertToFormat-2</anchor>
      <arglist>( Format format, const QVector&lt;QRgb&gt; &amp; colorTable, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy-3</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy-4</anchor>
      <arglist>( const QRect &amp; r = QRect()</arglist>
    </member>
    <member kind="function">
      <name>createAlphaMask</name>
      <anchor>createAlphaMask</anchor>
      <arglist>( Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>createHeuristicMask</name>
      <anchor>createHeuristicMask</anchor>
      <arglist>( bool clipTight = true )</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>detach</name>
      <anchor>detach</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dotsPerMeterX</name>
      <anchor>dotsPerMeterX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dotsPerMeterY</name>
      <anchor>dotsPerMeterY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( uint pixel )</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromData</name>
      <anchor>fromData</anchor>
      <arglist>( const uchar * data, int size, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>fromData</name>
      <anchor>fromData-2</anchor>
      <arglist>( const QByteArray &amp; data, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasAlphaChannel</name>
      <anchor>hasAlphaChannel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>invertPixels</name>
      <anchor>invertPixels</anchor>
      <arglist>( InvertMode mode = InvertRgb )</arglist>
    </member>
    <member kind="function">
      <name>isDetached</name>
      <anchor>isDetached</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isGrayscale</name>
      <anchor>isGrayscale</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>loadFromData</name>
      <anchor>loadFromData</anchor>
      <arglist>( const uchar * data, int len, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>loadFromData</name>
      <anchor>loadFromData-2</anchor>
      <arglist>( const QByteArray &amp; data, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>metric</name>
      <anchor>metric</anchor>
      <arglist>( PaintDeviceMetric metric )</arglist>
    </member>
    <member kind="function">
      <name>mirrored</name>
      <anchor>mirrored</anchor>
      <arglist>( bool horizontal = false, bool vertical = true )</arglist>
    </member>
    <member kind="function">
      <name>numBytes</name>
      <anchor>numBytes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numColors</name>
      <anchor>numColors</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>offset</name>
      <anchor>offset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixel</name>
      <anchor>pixel</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>pixelIndex</name>
      <anchor>pixelIndex</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rgbSwapped</name>
      <anchor>rgbSwapped</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>( const QString &amp; fileName, const char * format, int quality = -1 )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save-2</anchor>
      <arglist>( QIODevice * device, const char * format, int quality = -1 )</arglist>
    </member>
    <member kind="function">
      <name>scaled</name>
      <anchor>scaled</anchor>
      <arglist>( int w, int h, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scaled</name>
      <anchor>scaled-2</anchor>
      <arglist>( const QSize &amp; size, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scaledToHeight</name>
      <anchor>scaledToHeight</anchor>
      <arglist>( int h, Qt::TransformationMode mode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scaledToWidth</name>
      <anchor>scaledToWidth</anchor>
      <arglist>( int w, Qt::TransformationMode mode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scanLine</name>
      <anchor>scanLine</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>scanLine</name>
      <anchor>scanLine-2</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>serialNumber</name>
      <anchor>serialNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlphaChannel</name>
      <anchor>setAlphaChannel</anchor>
      <arglist>( const QImage &amp; alphaChannel )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( int i, QRgb c )</arglist>
    </member>
    <member kind="function">
      <name>setColorTable</name>
      <anchor>setColorTable</anchor>
      <arglist>( const QVector&lt;QRgb&gt; colors )</arglist>
    </member>
    <member kind="function">
      <name>setDotsPerMeterX</name>
      <anchor>setDotsPerMeterX</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>setDotsPerMeterY</name>
      <anchor>setDotsPerMeterY</anchor>
      <arglist>( int y )</arglist>
    </member>
    <member kind="function">
      <name>setNumColors</name>
      <anchor>setNumColors</anchor>
      <arglist>( int numColors )</arglist>
    </member>
    <member kind="function">
      <name>setOffset</name>
      <anchor>setOffset</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setPixel</name>
      <anchor>setPixel</anchor>
      <arglist>( int x, int y, uint index_or_rgb )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const char * key, const char * lang, const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( const char * key, const char * lang = 0 )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text-2</anchor>
      <arglist>( const QImageTextKeyLang &amp; kl )</arglist>
    </member>
    <member kind="function">
      <name>textKeys</name>
      <anchor>textKeys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textLanguages</name>
      <anchor>textLanguages</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textList</name>
      <anchor>textList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>transformed</name>
      <anchor>transformed</anchor>
      <arglist>( const QMatrix &amp; matrix, Qt::TransformationMode mode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>trueMatrix</name>
      <anchor>trueMatrix</anchor>
      <arglist>( const QMatrix &amp; matrix, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>valid</name>
      <anchor>valid</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QImage &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QImage &amp; i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QImageIOHandler</name>
    <filename>qimageiohandler.html</filename>
    <member kind="enum">
      <name>ImageOption</name>
      <anchor>ImageOption-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QImageIOHandler</name>
      <anchor>QImageIOHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canRead</name>
      <anchor>canRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentImageNumber</name>
      <anchor>currentImageNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentImageRect</name>
      <anchor>currentImageRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>imageCount</name>
      <anchor>imageCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>jumpToImage</name>
      <anchor>jumpToImage</anchor>
      <arglist>( int imageNumber )</arglist>
    </member>
    <member kind="function">
      <name>jumpToNextImage</name>
      <anchor>jumpToNextImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loopCount</name>
      <anchor>loopCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextImageDelay</name>
      <anchor>nextImageDelay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>option</name>
      <anchor>option</anchor>
      <arglist>( ImageOption option )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QImage * image )</arglist>
    </member>
    <member kind="function">
      <name>setDevice</name>
      <anchor>setDevice</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QByteArray &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setOption</name>
      <anchor>setOption</anchor>
      <arglist>( ImageOption option, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>supportsOption</name>
      <anchor>supportsOption</anchor>
      <arglist>( ImageOption option )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QImageIOHandlerFactoryInterface</name>
    <filename>qimageiohandlerfactoryinterface.html</filename>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( QIODevice * device, const QByteArray &amp; format = QByteArray()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QImageIOPlugin</name>
    <filename>qimageioplugin.html</filename>
    <member kind="function">
      <name>QImageIOPlugin</name>
      <anchor>QImageIOPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>capabilities</name>
      <anchor>capabilities</anchor>
      <arglist>( QIODevice * device, const QByteArray &amp; format )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QImageReader</name>
    <filename>qimagereader.html</filename>
    <member kind="enum">
      <name>ImageReaderError</name>
      <anchor>ImageReaderError-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QImageReader</name>
      <anchor>QImageReader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QImageReader</name>
      <anchor>QImageReader-2</anchor>
      <arglist>( QIODevice * device, const QByteArray &amp; format = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>QImageReader</name>
      <anchor>QImageReader-3</anchor>
      <arglist>( const QString &amp; fileName, const QByteArray &amp; format = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>canRead</name>
      <anchor>canRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clipRect</name>
      <anchor>clipRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentImageNumber</name>
      <anchor>currentImageNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentImageRect</name>
      <anchor>currentImageRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>imageCount</name>
      <anchor>imageCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>imageFormat</name>
      <anchor>imageFormat</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>imageFormat</name>
      <anchor>imageFormat-2</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>jumpToImage</name>
      <anchor>jumpToImage</anchor>
      <arglist>( int imageNumber )</arglist>
    </member>
    <member kind="function">
      <name>jumpToNextImage</name>
      <anchor>jumpToNextImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loopCount</name>
      <anchor>loopCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextImageDelay</name>
      <anchor>nextImageDelay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scaledClipRect</name>
      <anchor>scaledClipRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scaledSize</name>
      <anchor>scaledSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setClipRect</name>
      <anchor>setClipRect</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>setDevice</name>
      <anchor>setDevice</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QByteArray &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setScaledClipRect</name>
      <anchor>setScaledClipRect</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>setScaledSize</name>
      <anchor>setScaledSize</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>supportedImageFormats</name>
      <anchor>supportedImageFormats</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QImageWriter</name>
    <filename>qimagewriter.html</filename>
    <member kind="enum">
      <name>ImageWriterError</name>
      <anchor>ImageWriterError-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QImageWriter</name>
      <anchor>QImageWriter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QImageWriter</name>
      <anchor>QImageWriter-2</anchor>
      <arglist>( QIODevice * device, const QByteArray &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>QImageWriter</name>
      <anchor>QImageWriter-3</anchor>
      <arglist>( const QString &amp; fileName, const QByteArray &amp; format = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>canWrite</name>
      <anchor>canWrite</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>description</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>gamma</name>
      <anchor>gamma</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>quality</name>
      <anchor>quality</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDescription</name>
      <anchor>setDescription</anchor>
      <arglist>( const QString &amp; description )</arglist>
    </member>
    <member kind="function">
      <name>setDevice</name>
      <anchor>setDevice</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QByteArray &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setGamma</name>
      <anchor>setGamma</anchor>
      <arglist>( float gamma )</arglist>
    </member>
    <member kind="function">
      <name>setQuality</name>
      <anchor>setQuality</anchor>
      <arglist>( int quality )</arglist>
    </member>
    <member kind="function">
      <name>supportedImageFormats</name>
      <anchor>supportedImageFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QInputContext</name>
    <filename>qinputcontext.html</filename>
    <member kind="enum">
      <name>StandardFormat</name>
      <anchor>StandardFormat-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QInputContext</name>
      <anchor>QInputContext</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>actions</name>
      <anchor>actions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filterEvent</name>
      <anchor>filterEvent</anchor>
      <arglist>( const QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>identifierName</name>
      <anchor>identifierName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isComposing</name>
      <anchor>isComposing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>language</name>
      <anchor>language</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseHandler</name>
      <anchor>mouseHandler</anchor>
      <arglist>( int x, QMouseEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendEvent</name>
      <anchor>sendEvent</anchor>
      <arglist>( const QInputMethodEvent &amp; event )</arglist>
    </member>
    <member kind="function">
      <name>standardFormat</name>
      <anchor>standardFormat</anchor>
      <arglist>( StandardFormat s )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widgetDestroyed</name>
      <anchor>widgetDestroyed</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>x11FilterEvent</name>
      <anchor>x11FilterEvent</anchor>
      <arglist>( QWidget * keywidget, XEvent * event )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QInputContextPlugin</name>
    <filename>qinputcontextplugin.html</filename>
    <member kind="function">
      <name>QInputContextPlugin</name>
      <anchor>QInputContextPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>description</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>displayName</name>
      <anchor>displayName</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>languages</name>
      <anchor>languages</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>getDouble</name>
      <anchor>getDouble-2</anchor>
      <arglist>( const QString &amp; title, const QString &amp; label, double value = 0, double minValue = -2147483647, double maxValue = 2147483647, int decimals = 1, bool * ok = 0, QWidget * parent = 0, const char * = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getInteger</name>
      <anchor>getInteger-2</anchor>
      <arglist>( const QString &amp; title, const QString &amp; label, int value = 0, int minValue = -2147483647, int maxValue = 2147483647, int step = 1, bool * ok = 0, QWidget * parent = 0, const char * = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getItem</name>
      <anchor>getItem-2</anchor>
      <arglist>( const QString &amp; title, const QString &amp; label, const QStringList &amp; list, int current = 0, bool editable = true, bool * ok = 0, QWidget * parent = 0, const char * = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>getText-2</anchor>
      <arglist>( const QString &amp; title, const QString &amp; label, QLineEdit::EchoMode echo = QLineEdit::Normal, const QString &amp; text = QString()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QInputDialog</name>
    <filename>qinputdialog.html</filename>
    <member kind="function">
      <name>getDouble</name>
      <anchor>getDouble</anchor>
      <arglist>( QWidget * parent, const QString &amp; title, const QString &amp; label, double value = 0, double minValue = -2147483647, double maxValue = 2147483647, int decimals = 1, bool * ok = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getInteger</name>
      <anchor>getInteger</anchor>
      <arglist>( QWidget * parent, const QString &amp; title, const QString &amp; label, int value = 0, int minValue = -2147483647, int maxValue = 2147483647, int step = 1, bool * ok = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getItem</name>
      <anchor>getItem</anchor>
      <arglist>( QWidget * parent, const QString &amp; title, const QString &amp; label, const QStringList &amp; list, int current = 0, bool editable = true, bool * ok = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>getText</name>
      <anchor>getText</anchor>
      <arglist>( QWidget * parent, const QString &amp; title, const QString &amp; label, QLineEdit::EchoMode mode = QLineEdit::Normal, const QString &amp; text = QString()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QInputEvent</name>
    <filename>qinputevent.html</filename>
    <member kind="function">
      <name>KeyboardModifiers</name>
      <anchor>modifiers</anchor>
      <arglist> QInputEvent::modifiers()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QInputMethodEvent::Attribute</name>
    <filename>qinputmethodevent-attribute.html</filename>
    <member kind="function">
      <name>Attribute</name>
      <anchor>Attribute</anchor>
      <arglist>( AttributeType type, int start, int length, QVariant value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QInputMethodEvent</name>
    <filename>qinputmethodevent.html</filename>
    <member kind="enum">
      <name>AttributeType</name>
      <anchor>AttributeType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QInputMethodEvent</name>
      <anchor>QInputMethodEvent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QInputMethodEvent</name>
      <anchor>QInputMethodEvent-2</anchor>
      <arglist>( const QString &amp; preeditText, const QList&lt;Attribute&gt; &amp; attributes )</arglist>
    </member>
    <member kind="function">
      <name>QInputMethodEvent</name>
      <anchor>QInputMethodEvent-3</anchor>
      <arglist>( const QInputMethodEvent &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>attributes</name>
      <anchor>attributes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commitString</name>
      <anchor>commitString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>preeditString</name>
      <anchor>preeditString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>replacementLength</name>
      <anchor>replacementLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>replacementStart</name>
      <anchor>replacementStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCommitString</name>
      <anchor>setCommitString</anchor>
      <arglist>( const QString &amp; commitString, int replaceFrom = 0, int replaceLength = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QIntValidator</name>
      <anchor>QIntValidator-3</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QIntValidator</name>
      <anchor>QIntValidator-4</anchor>
      <arglist>( int minimum, int maximum, QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QIntValidator</name>
    <filename>qintvalidator.html</filename>
    <member kind="function">
      <name>QIntValidator</name>
      <anchor>QIntValidator</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QIntValidator</name>
      <anchor>QIntValidator-2</anchor>
      <arglist>( int minimum, int maximum, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( int bottom, int top )</arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>validate</anchor>
      <arglist> QIntValidator::validate( QString &amp; input, int &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>Offset</name>
      <anchor>Offset-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Status</name>
      <anchor>Status-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at-2</anchor>
      <arglist>( Offset offset )</arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>flags</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getch</name>
      <anchor>getch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAsynchronous</name>
      <anchor>isAsynchronous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isBuffered</name>
      <anchor>isBuffered</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCombinedAccess</name>
      <anchor>isCombinedAccess</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDirectAccess</name>
      <anchor>isDirectAccess</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInactive</name>
      <anchor>isInactive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRaw</name>
      <anchor>isRaw</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSequentialAccess</name>
      <anchor>isSequentialAccess</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSynchronous</name>
      <anchor>isSynchronous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTranslated</name>
      <anchor>isTranslated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mode</name>
      <anchor>mode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>putch</name>
      <anchor>putch</anchor>
      <arglist>( int ch )</arglist>
    </member>
    <member kind="function">
      <name>readBlock</name>
      <anchor>readBlock</anchor>
      <arglist>( char * data, quint64 size )</arglist>
    </member>
    <member kind="function">
      <name>resetStatus</name>
      <anchor>resetStatus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>status</name>
      <anchor>status</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ungetch</name>
      <anchor>ungetch</anchor>
      <arglist>( int ch )</arglist>
    </member>
    <member kind="function">
      <name>writeBlock</name>
      <anchor>writeBlock</anchor>
      <arglist>( const char * data, quint64 size )</arglist>
    </member>
    <member kind="function">
      <name>writeBlock</name>
      <anchor>writeBlock-2</anchor>
      <arglist>( const QByteArray &amp; data )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QIODevice</name>
    <filename>qiodevice.html</filename>
    <member kind="function">
      <name>QIODevice</name>
      <anchor>QIODevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QIODevice</name>
      <anchor>QIODevice-2</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>aboutToClose</name>
      <anchor>aboutToClose</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesAvailable</name>
      <anchor>bytesAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesToWrite</name>
      <anchor>bytesToWrite</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bytesWritten</name>
      <anchor>bytesWritten</anchor>
      <arglist>( qint64 bytes )</arglist>
    </member>
    <member kind="function">
      <name>canReadLine</name>
      <anchor>canReadLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>flush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getChar</name>
      <anchor>getChar</anchor>
      <arglist>( char * c )</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>isOpen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isReadable</name>
      <anchor>isReadable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSequential</name>
      <anchor>isSequential</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTextModeEnabled</name>
      <anchor>isTextModeEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isWritable</name>
      <anchor>isWritable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>( OpenMode mode )</arglist>
    </member>
    <member kind="function">
      <name>openMode</name>
      <anchor>openMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>putChar</name>
      <anchor>putChar</anchor>
      <arglist>( char c )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( char * data, qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read-2</anchor>
      <arglist>( qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>readAll</name>
      <anchor>readAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readData</name>
      <anchor>readData</anchor>
      <arglist>( char * data, qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>readLine</name>
      <anchor>readLine</anchor>
      <arglist>( char * data, qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>readLine</name>
      <anchor>readLine-2</anchor>
      <arglist>( qint64 maxSize = 0 )</arglist>
    </member>
    <member kind="function">
      <name>readLineData</name>
      <anchor>readLineData</anchor>
      <arglist>( char * data, qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>readyRead</name>
      <anchor>readyRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>seek</name>
      <anchor>seek</anchor>
      <arglist>( qint64 pos )</arglist>
    </member>
    <member kind="function">
      <name>setErrorString</name>
      <anchor>setErrorString</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>setOpenMode</name>
      <anchor>setOpenMode</anchor>
      <arglist>( OpenMode openMode )</arglist>
    </member>
    <member kind="function">
      <name>setTextModeEnabled</name>
      <anchor>setTextModeEnabled</anchor>
      <arglist>( bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ungetChar</name>
      <anchor>ungetChar</anchor>
      <arglist>( char c )</arglist>
    </member>
    <member kind="function">
      <name>waitForBytesWritten</name>
      <anchor>waitForBytesWritten</anchor>
      <arglist>( int msecs )</arglist>
    </member>
    <member kind="function">
      <name>waitForReadyRead</name>
      <anchor>waitForReadyRead</anchor>
      <arglist>( int msecs )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( const char * data, qint64 maxSize )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write-2</anchor>
      <arglist>( const QByteArray &amp; byteArray )</arglist>
    </member>
    <member kind="function">
      <name>writeData</name>
      <anchor>writeData</anchor>
      <arglist>( const char * data, qint64 maxSize )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QItemDelegate</name>
    <filename>qitemdelegate.html</filename>
    <member kind="function">
      <name>QItemDelegate</name>
      <anchor>QItemDelegate</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>( QWidget * parent, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>drawCheck</name>
      <anchor>drawCheck</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QRect &amp; rect, Qt::CheckState state )</arglist>
    </member>
    <member kind="function">
      <name>drawDecoration</name>
      <anchor>drawDecoration</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QRect &amp; rect, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>drawDisplay</name>
      <anchor>drawDisplay</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QRect &amp; rect, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>drawFocus</name>
      <anchor>drawFocus</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>eventFilter</name>
      <anchor>eventFilter</anchor>
      <arglist>( QObject * object, QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>itemEditorFactory</name>
      <anchor>itemEditorFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paint</name>
      <anchor>paint</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setEditorData</name>
      <anchor>setEditorData</anchor>
      <arglist>( QWidget * editor, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setItemEditorFactory</name>
      <anchor>setItemEditorFactory</anchor>
      <arglist>( QItemEditorFactory * factory )</arglist>
    </member>
    <member kind="function">
      <name>setModelData</name>
      <anchor>setModelData</anchor>
      <arglist>( QWidget * editor, QAbstractItemModel * model, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>( const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>updateEditorGeometry</name>
      <anchor>updateEditorGeometry</anchor>
      <arglist>( QWidget * editor, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QItemEditorFactory</name>
    <filename>qitemeditorfactory.html</filename>
    <member kind="function">
      <name>QItemEditorFactory</name>
      <anchor>QItemEditorFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createEditor</name>
      <anchor>createEditor</anchor>
      <arglist>( QVariant::Type type, QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>defaultFactory</name>
      <anchor>defaultFactory</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>registerEditor</name>
      <anchor>registerEditor</anchor>
      <arglist>( QVariant::Type type, QItemEditorCreatorBase * creator )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultFactory</name>
      <anchor>setDefaultFactory</anchor>
      <arglist>( QItemEditorFactory * factory )</arglist>
    </member>
    <member kind="function">
      <name>valuePropertyName</name>
      <anchor>valuePropertyName</anchor>
      <arglist>( QVariant::Type type )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QItemSelection</name>
    <filename>qitemselection.html</filename>
    <member kind="function">
      <name>QItemSelection</name>
      <anchor>QItemSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QItemSelection</name>
      <anchor>QItemSelection-2</anchor>
      <arglist>( const QModelIndex &amp; topLeft, const QModelIndex &amp; bottomRight )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>indexes</name>
      <anchor>indexes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>merge</name>
      <anchor>merge</anchor>
      <arglist>( const QItemSelection &amp; other, QItemSelectionModel::SelectionFlags command )</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select</anchor>
      <arglist>( const QModelIndex &amp; topLeft, const QModelIndex &amp; bottomRight )</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split</anchor>
      <arglist>( const QItemSelectionRange &amp; range, const QItemSelectionRange &amp; other, QItemSelection * result )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QItemSelectionModel</name>
    <filename>qitemselectionmodel.html</filename>
    <member kind="function">
      <name>QItemSelectionModel</name>
      <anchor>QItemSelectionModel</anchor>
      <arglist>( QAbstractItemModel * model )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnIntersectsSelection</name>
      <anchor>columnIntersectsSelection</anchor>
      <arglist>( int column, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( const QModelIndex &amp; current, const QModelIndex &amp; previous )</arglist>
    </member>
    <member kind="function">
      <name>currentColumnChanged</name>
      <anchor>currentColumnChanged</anchor>
      <arglist>( const QModelIndex &amp; current, const QModelIndex &amp; previous )</arglist>
    </member>
    <member kind="function">
      <name>currentIndex</name>
      <anchor>currentIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentRowChanged</name>
      <anchor>currentRowChanged</anchor>
      <arglist>( const QModelIndex &amp; current, const QModelIndex &amp; previous )</arglist>
    </member>
    <member kind="function">
      <name>emitSelectionChanged</name>
      <anchor>emitSelectionChanged</anchor>
      <arglist>( const QItemSelection &amp; newSelection, const QItemSelection &amp; oldSelection )</arglist>
    </member>
    <member kind="function">
      <name>isColumnSelected</name>
      <anchor>isColumnSelected</anchor>
      <arglist>( int column, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>isRowSelected</name>
      <anchor>isRowSelected</anchor>
      <arglist>( int row, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>isSelected</name>
      <anchor>isSelected</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowIntersectsSelection</name>
      <anchor>rowIntersectsSelection</anchor>
      <arglist>( int row, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select</anchor>
      <arglist>( const QModelIndex &amp; index, SelectionFlags command )</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select-2</anchor>
      <arglist>( const QItemSelection &amp; selection, SelectionFlags command )</arglist>
    </member>
    <member kind="function">
      <name>selectedIndexes</name>
      <anchor>selectedIndexes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selection</name>
      <anchor>selection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>( const QItemSelection &amp; selected, const QItemSelection &amp; deselected )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentIndex</name>
      <anchor>setCurrentIndex</anchor>
      <arglist>( const QModelIndex &amp; index, SelectionFlags command )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QItemSelectionRange</name>
    <filename>qitemselectionrange.html</filename>
    <member kind="function">
      <name>QItemSelectionRange</name>
      <anchor>QItemSelectionRange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QItemSelectionRange</name>
      <anchor>QItemSelectionRange-2</anchor>
      <arglist>( const QItemSelectionRange &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QItemSelectionRange</name>
      <anchor>QItemSelectionRange-3</anchor>
      <arglist>( const QModelIndex &amp; parent, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>QItemSelectionRange</name>
      <anchor>QItemSelectionRange-4</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>bottom</name>
      <anchor>bottom</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomRight</name>
      <anchor>bottomRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexes</name>
      <anchor>indexes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intersect</name>
      <anchor>intersect</anchor>
      <arglist>( const QItemSelectionRange &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>intersects</anchor>
      <arglist>( const QItemSelectionRange &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>left</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>right</name>
      <anchor>right</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topLeft</name>
      <anchor>topLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QItemSelectionRange &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QItemSelectionRange &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QKbdDriverFactory</name>
    <filename>qkbddriverfactory.html</filename>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key, const QString &amp; device )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QKbdDriverPlugin</name>
    <filename>qkbddriverplugin.html</filename>
    <member kind="function">
      <name>QKbdDriverPlugin</name>
      <anchor>QKbdDriverPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; driver, const QString &amp; device )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QKeyEvent</name>
      <anchor>QKeyEvent-2</anchor>
      <arglist>( Type type, int key, int ascii, int modifiers, const QString &amp; text = QString()</arglist>
    </member>
    <member kind="function">
      <name>ascii</name>
      <anchor>ascii</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>state</anchor>
      <arglist> QKeyEvent::state()</arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>stateAfter</anchor>
      <arglist> QKeyEvent::stateAfter()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QKeyEvent</name>
    <filename>qkeyevent.html</filename>
    <member kind="function">
      <name>QKeyEvent</name>
      <anchor>QKeyEvent</anchor>
      <arglist>( Type type, int key, Qt::KeyboardModifiers modifiers, const QString &amp; text = QString()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAutoRepeat</name>
      <anchor>isAutoRepeat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>KeyboardModifiers</name>
      <anchor>modifiers</anchor>
      <arglist> QKeyEvent::modifiers()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-int</anchor>
      <arglist> int()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QKeySequence</name>
    <filename>qkeysequence.html</filename>
    <member kind="enum">
      <name>SequenceMatch</name>
      <anchor>SequenceMatch-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QKeySequence</name>
      <anchor>QKeySequence</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QKeySequence</name>
      <anchor>QKeySequence-2</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>QKeySequence</name>
      <anchor>QKeySequence-3</anchor>
      <arglist>( int k1, int k2 = 0, int k3 = 0, int k4 = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QKeySequence</name>
      <anchor>QKeySequence-4</anchor>
      <arglist>( const QKeySequence &amp; keysequence )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>matches</name>
      <anchor>matches</anchor>
      <arglist>( const QKeySequence &amp; seq )</arglist>
    </member>
    <member kind="function">
      <name>mnemonic</name>
      <anchor>mnemonic</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QString</anchor>
      <arglist> QString()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QKeySequence &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( uint index )</arglist>
    </member>
    <member kind="function">
      <name>QLabel</name>
      <anchor>QLabel-3</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLabel</name>
      <anchor>QLabel-4</anchor>
      <arglist>( const QString &amp; text, QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLabel</name>
      <anchor>QLabel-5</anchor>
      <arglist>( QWidget * buddy, const QString &amp; text, QWidget * parent = 0, const char * name = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment-2</anchor>
      <arglist>( int alignment )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLabel</name>
    <filename>qlabel.html</filename>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextFormat</name>
      <anchor>textFormat</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLabel</name>
      <anchor>QLabel</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLabel</name>
      <anchor>QLabel-2</anchor>
      <arglist>( const QString &amp; text, QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>buddy</name>
      <anchor>buddy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>movie</name>
      <anchor>movie</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>picture</name>
      <anchor>picture</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBuddy</name>
      <anchor>setBuddy</anchor>
      <arglist>( QWidget * buddy )</arglist>
    </member>
    <member kind="function">
      <name>setMovie</name>
      <anchor>setMovie</anchor>
      <arglist>( QMovie * movie )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum</anchor>
      <arglist>( int num )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-2</anchor>
      <arglist>( double num )</arglist>
    </member>
    <member kind="function">
      <name>setPicture</name>
      <anchor>setPicture</anchor>
      <arglist>( const QPicture &amp; picture )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLatin1Char</name>
    <filename>qlatin1char.html</filename>
    <member kind="function">
      <name>QLatin1Char</name>
      <anchor>QLatin1Char</anchor>
      <arglist>( char c )</arglist>
    </member>
    <member kind="function">
      <name>toLatin1</name>
      <anchor>toLatin1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unicode</name>
      <anchor>unicode</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLatin1String</name>
    <filename>qlatin1string.html</filename>
    <member kind="function">
      <name>QLatin1String</name>
      <anchor>QLatin1String</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>latin1</name>
      <anchor>latin1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QLayout</name>
      <anchor>QLayout-4</anchor>
      <arglist>( QWidget * parent, int margin, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLayout</name>
      <anchor>QLayout-5</anchor>
      <arglist>( QLayout * parentLayout, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLayout</name>
      <anchor>QLayout-6</anchor>
      <arglist>( int spacing, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>autoAdd</name>
      <anchor>autoAdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultBorder</name>
      <anchor>defaultBorder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteAllItems</name>
      <anchor>deleteAllItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>freeze</name>
      <anchor>freeze</anchor>
      <arglist>( int w = 0, int h = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isTopLevel</name>
      <anchor>isTopLevel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mainWidget</name>
      <anchor>mainWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>resizeMode</name>
      <anchor>resizeMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoAdd</name>
      <anchor>setAutoAdd</anchor>
      <arglist>( bool a )</arglist>
    </member>
    <member kind="function">
      <name>setResizeMode</name>
      <anchor>setResizeMode</anchor>
      <arglist>( SizeConstraint constraint )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLayout</name>
    <filename>qlayout.html</filename>
    <member kind="enum">
      <name>SizeConstraint</name>
      <anchor>SizeConstraint-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLayout</name>
      <anchor>QLayout</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>QLayout</name>
      <anchor>QLayout-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activate</name>
      <anchor>activate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addChildLayout</name>
      <anchor>addChildLayout</anchor>
      <arglist>( QLayout * l )</arglist>
    </member>
    <member kind="function">
      <name>addChildWidget</name>
      <anchor>addChildWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem</anchor>
      <arglist>( QLayoutItem * item )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>alignmentRect</name>
      <anchor>alignmentRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>closestAcceptableSize</name>
      <anchor>closestAcceptableSize</anchor>
      <arglist>( const QWidget * w, QSize s )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientations</name>
      <anchor>expandingDirections</anchor>
      <arglist> QLayout::expandingDirections()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>invalidate</name>
      <anchor>invalidate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>isEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>maximumSize</name>
      <anchor>maximumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menuBar</name>
      <anchor>menuBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumSize</name>
      <anchor>minimumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentWidget</name>
      <anchor>parentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( QLayoutItem * item )</arglist>
    </member>
    <member kind="function">
      <name>removeWidget</name>
      <anchor>removeWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( QWidget * w, Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment-2</anchor>
      <arglist>( QLayout * l, Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>setEnabled</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setMenuBar</name>
      <anchor>setMenuBar</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>takeAt</name>
      <anchor>takeAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLayoutItem</name>
    <filename>qlayoutitem.html</filename>
    <member kind="function">
      <name>QLayoutItem</name>
      <anchor>QLayoutItem</anchor>
      <arglist>( Qt::Alignment alignment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist> QLayoutItem::alignment()</arglist>
    </member>
    <member kind="function">
      <name>Orientations</name>
      <anchor>expandingDirections</anchor>
      <arglist> QLayoutItem::expandingDirections()</arglist>
    </member>
    <member kind="function">
      <name>geometry</name>
      <anchor>geometry</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasHeightForWidth</name>
      <anchor>hasHeightForWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>heightForWidth</name>
      <anchor>heightForWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>invalidate</name>
      <anchor>invalidate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>layout</name>
      <anchor>layout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximumSize</name>
      <anchor>maximumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumHeightForWidth</name>
      <anchor>minimumHeightForWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>minimumSize</name>
      <anchor>minimumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>spacerItem</name>
      <anchor>spacerItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QLCDNumber</name>
      <anchor>QLCDNumber-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QLCDNumber</name>
      <anchor>QLCDNumber-4</anchor>
      <arglist>( uint numDigits, QWidget * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLCDNumber</name>
    <filename>qlcdnumber.html</filename>
    <member kind="enum">
      <name>Mode</name>
      <anchor>Mode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SegmentStyle</name>
      <anchor>SegmentStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLCDNumber</name>
      <anchor>QLCDNumber</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLCDNumber</name>
      <anchor>QLCDNumber-2</anchor>
      <arglist>( uint numDigits, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>checkOverflow</name>
      <anchor>checkOverflow</anchor>
      <arglist>( double num )</arglist>
    </member>
    <member kind="function">
      <name>checkOverflow</name>
      <anchor>checkOverflow-2</anchor>
      <arglist>( int num )</arglist>
    </member>
    <member kind="function">
      <name>overflow</name>
      <anchor>overflow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBinMode</name>
      <anchor>setBinMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDecMode</name>
      <anchor>setDecMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHexMode</name>
      <anchor>setHexMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setOctMode</name>
      <anchor>setOctMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>library</name>
      <anchor>library</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoUnload</name>
      <anchor>setAutoUnload</anchor>
      <arglist>( bool b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLibrary</name>
    <filename>qlibrary.html</filename>
    <member kind="function">
      <name>QLibrary</name>
      <anchor>QLibrary</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLibrary</name>
      <anchor>QLibrary-2</anchor>
      <arglist>( const QString &amp; fileName, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isLoaded</name>
      <anchor>isLoaded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resolve</name>
      <anchor>resolve</anchor>
      <arglist>( const char * symbol )</arglist>
    </member>
    <member kind="function">
      <name>resolve</name>
      <anchor>resolve-2</anchor>
      <arglist>( const QString &amp; fileName, const char * symbol )</arglist>
    </member>
    <member kind="function">
      <name>unload</name>
      <anchor>unload</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLibraryInfo</name>
    <filename>qlibraryinfo.html</filename>
    <member kind="enum">
      <name>LibraryLocation</name>
      <anchor>LibraryLocation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>buildKey</name>
      <anchor>buildKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>configuration</name>
      <anchor>configuration</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>licensedProducts</name>
      <anchor>licensedProducts</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>licensee</name>
      <anchor>licensee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>location</name>
      <anchor>location</anchor>
      <arglist>( LibraryLocation loc )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLine</name>
    <filename>qline.html</filename>
    <member kind="function">
      <name>QLine</name>
      <anchor>QLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QLine</name>
      <anchor>QLine-2</anchor>
      <arglist>( const QPoint &amp; pt1, const QPoint &amp; pt2 )</arglist>
    </member>
    <member kind="function">
      <name>QLine</name>
      <anchor>QLine-3</anchor>
      <arglist>( int x1, int y1, int x2, int y2 )</arglist>
    </member>
    <member kind="function">
      <name>dx</name>
      <anchor>dx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dy</name>
      <anchor>dy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>p1</name>
      <anchor>p1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>p2</name>
      <anchor>p2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>x1</name>
      <anchor>x1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x2</name>
      <anchor>x2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y1</name>
      <anchor>y1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y2</name>
      <anchor>y2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QLine &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QLine &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLinearGradient</name>
    <filename>qlineargradient.html</filename>
    <member kind="function">
      <name>QLinearGradient</name>
      <anchor>QLinearGradient</anchor>
      <arglist>( const QPointF &amp; start, const QPointF &amp; finalStop )</arglist>
    </member>
    <member kind="function">
      <name>QLinearGradient</name>
      <anchor>QLinearGradient-2</anchor>
      <arglist>( qreal xStart, qreal yStart, qreal xFinalStop, qreal yFinalStop )</arglist>
    </member>
    <member kind="function">
      <name>finalStop</name>
      <anchor>finalStop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QLineEdit</name>
      <anchor>QLineEdit-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QLineEdit</name>
      <anchor>QLineEdit-4</anchor>
      <arglist>( const QString &amp; contents, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QLineEdit</name>
      <anchor>QLineEdit-5</anchor>
      <arglist>( const QString &amp; contents, const QString &amp; inputMask, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>characterAt</name>
      <anchor>characterAt</anchor>
      <arglist>( int xpos, QChar * chr )</arglist>
    </member>
    <member kind="function">
      <name>clearModified</name>
      <anchor>clearModified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearValidator</name>
      <anchor>clearValidator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorLeft</name>
      <anchor>cursorLeft</anchor>
      <arglist>( bool mark, int steps = 1 )</arglist>
    </member>
    <member kind="function">
      <name>cursorRight</name>
      <anchor>cursorRight</anchor>
      <arglist>( bool mark, int steps = 1 )</arglist>
    </member>
    <member kind="function">
      <name>edited</name>
      <anchor>edited</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frame</name>
      <anchor>frame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getSelection</name>
      <anchor>getSelection</anchor>
      <arglist>( int * start, int * end )</arglist>
    </member>
    <member kind="function">
      <name>hasMarkedText</name>
      <anchor>hasMarkedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lostFocus</name>
      <anchor>lostFocus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>markedText</name>
      <anchor>markedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>repaintArea</name>
      <anchor>repaintArea</anchor>
      <arglist>( int a, int b )</arglist>
    </member>
    <member kind="function">
      <name>setEdited</name>
      <anchor>setEdited</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>validateAndSet</name>
      <anchor>validateAndSet</anchor>
      <arglist>( const QString &amp; newText, int newPos, int newMarkAnchor, int newMarkDrag )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLineEdit</name>
    <filename>qlineedit.html</filename>
    <member kind="enum">
      <name>EchoMode</name>
      <anchor>EchoMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLineEdit</name>
      <anchor>QLineEdit</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QLineEdit</name>
      <anchor>QLineEdit-2</anchor>
      <arglist>( const QString &amp; contents, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>backspace</name>
      <anchor>backspace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contextMenuEvent</name>
      <anchor>contextMenuEvent</anchor>
      <arglist>( QContextMenuEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createStandardContextMenu</name>
      <anchor>createStandardContextMenu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorBackward</name>
      <anchor>cursorBackward</anchor>
      <arglist>( bool mark, int steps = 1 )</arglist>
    </member>
    <member kind="function">
      <name>cursorForward</name>
      <anchor>cursorForward</anchor>
      <arglist>( bool mark, int steps = 1 )</arglist>
    </member>
    <member kind="function">
      <name>cursorPositionAt</name>
      <anchor>cursorPositionAt</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>cursorPositionChanged</name>
      <anchor>cursorPositionChanged</anchor>
      <arglist>( int old, int new )</arglist>
    </member>
    <member kind="function">
      <name>cursorWordBackward</name>
      <anchor>cursorWordBackward</anchor>
      <arglist>( bool mark )</arglist>
    </member>
    <member kind="function">
      <name>cursorWordForward</name>
      <anchor>cursorWordForward</anchor>
      <arglist>( bool mark )</arglist>
    </member>
    <member kind="function">
      <name>cut</name>
      <anchor>cut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>del</name>
      <anchor>del</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deselect</name>
      <anchor>deselect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>editingFinished</name>
      <anchor>editingFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>( bool mark )</arglist>
    </member>
    <member kind="function">
      <name>home</name>
      <anchor>home</anchor>
      <arglist>( bool mark )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; newText )</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>minimumSizeHint</name>
      <anchor>minimumSizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paste</name>
      <anchor>paste</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>redo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>returnPressed</name>
      <anchor>returnPressed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionStart</name>
      <anchor>selectionStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setSelection</name>
      <anchor>setSelection</anchor>
      <arglist>( int start, int length )</arglist>
    </member>
    <member kind="function">
      <name>setValidator</name>
      <anchor>setValidator</anchor>
      <arglist>( const QValidator * v )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textChanged</name>
      <anchor>textChanged</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>undo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>validator</name>
      <anchor>validator</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLineF</name>
    <filename>qlinef.html</filename>
    <member kind="enum">
      <name>IntersectType</name>
      <anchor>IntersectType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLineF</name>
      <anchor>QLineF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QLineF</name>
      <anchor>QLineF-2</anchor>
      <arglist>( const QPointF &amp; pt1, const QPointF &amp; pt2 )</arglist>
    </member>
    <member kind="function">
      <name>QLineF</name>
      <anchor>QLineF-3</anchor>
      <arglist>( qreal x1, qreal y1, qreal x2, qreal y2 )</arglist>
    </member>
    <member kind="function">
      <name>QLineF</name>
      <anchor>QLineF-4</anchor>
      <arglist>( const QLine &amp; line )</arglist>
    </member>
    <member kind="function">
      <name>angle</name>
      <anchor>angle</anchor>
      <arglist>( const QLineF &amp; line )</arglist>
    </member>
    <member kind="function">
      <name>dx</name>
      <anchor>dx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dy</name>
      <anchor>dy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intersect</name>
      <anchor>intersect</anchor>
      <arglist>( const QLineF &amp; other, QPointF * intersectionPoint )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>normalVector</name>
      <anchor>normalVector</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>p2</name>
      <anchor>p2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointAt</name>
      <anchor>pointAt</anchor>
      <arglist>( qreal t )</arglist>
    </member>
    <member kind="function">
      <name>setLength</name>
      <anchor>setLength</anchor>
      <arglist>( qreal length )</arglist>
    </member>
    <member kind="function">
      <name>toLine</name>
      <anchor>toLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( const QPointF &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>unitVector</name>
      <anchor>unitVector</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x1</name>
      <anchor>x1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x2</name>
      <anchor>x2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y1</name>
      <anchor>y1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y2</name>
      <anchor>y2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QLineF &amp; d )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QLineF &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLinkedList::const_iterator</name>
    <filename>qlinkedlist-const-iterator.html</filename>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-3</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-4</anchor>
      <arglist>( iterator other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLinkedList::iterator</name>
    <filename>qlinkedlist-iterator.html</filename>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-3</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( iterator from, const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-3</anchor>
      <arglist>( const_iterator from, const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-4</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>findIndex</name>
      <anchor>findIndex</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLinkedList</name>
    <filename>qlinkedlist.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_pointer</name>
      <anchor>const_pointer-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_reference</name>
      <anchor>const_reference-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pointer</name>
      <anchor>pointer-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>reference</name>
      <anchor>reference-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>value_type</name>
      <anchor>value_type-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLinkedList</name>
      <anchor>QLinkedList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QLinkedList</name>
      <anchor>QLinkedList-2</anchor>
      <arglist>( const QLinkedList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constBegin</name>
      <anchor>constBegin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constEnd</name>
      <anchor>constEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>empty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-2</anchor>
      <arglist>( iterator begin, iterator end )</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>front</name>
      <anchor>front</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>front</name>
      <anchor>front-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( iterator before, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop_back</name>
      <anchor>pop_back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop_front</name>
      <anchor>pop_front</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>removeAll</name>
      <anchor>removeAll</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>removeFirst</name>
      <anchor>removeFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeLast</name>
      <anchor>removeLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>takeFirst</name>
      <anchor>takeFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>takeLast</name>
      <anchor>takeLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QLinkedList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QLinkedList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QLinkedList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-2</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-2</anchor>
      <arglist>( const QLinkedList &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QLinkedList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QLinkedList &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLinkedListIterator</name>
    <filename>qlinkedlistiterator.html</filename>
    <member kind="function">
      <name>QLinkedListIterator</name>
      <anchor>QLinkedListIterator</anchor>
      <arglist>( const QLinkedList&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QLinkedList&lt;T&gt; &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QList::const_iterator</name>
    <filename>qlist-const-iterator.html</filename>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-3</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-4</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator--2</anchor>
      <arglist>( const_iterator other )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int j )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QList::iterator</name>
    <filename>qlist-iterator.html</filename>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-3</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator--2</anchor>
      <arglist>( iterator other )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-3</anchor>
      <arglist>( iterator from, const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-4</anchor>
      <arglist>( const_iterator from, const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>findIndex</name>
      <anchor>findIndex</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QList</name>
    <filename>qlist.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_pointer</name>
      <anchor>const_pointer-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_reference</name>
      <anchor>const_reference-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pointer</name>
      <anchor>pointer-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>reference</name>
      <anchor>reference-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>value_type</name>
      <anchor>value_type-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QList</name>
      <anchor>QList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QList</name>
      <anchor>QList-2</anchor>
      <arglist>( const QList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constBegin</name>
      <anchor>constBegin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constEnd</name>
      <anchor>constEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>empty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-2</anchor>
      <arglist>( iterator begin, iterator end )</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromSet</name>
      <anchor>fromSet</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; set )</arglist>
    </member>
    <member kind="function">
      <name>fromStdList</name>
      <anchor>fromStdList</anchor>
      <arglist>( const std::list&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>fromVector</name>
      <anchor>fromVector</anchor>
      <arglist>( const QVector&lt;T&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>front</name>
      <anchor>front</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>front</name>
      <anchor>front-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( const T &amp; value, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( int i, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( iterator before, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf</anchor>
      <arglist>( const T &amp; value, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>mid</name>
      <anchor>mid</anchor>
      <arglist>( int pos, int length = -1 )</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move</anchor>
      <arglist>( int from, int to )</arglist>
    </member>
    <member kind="function">
      <name>pop_back</name>
      <anchor>pop_back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop_front</name>
      <anchor>pop_front</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>removeAll</name>
      <anchor>removeAll</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>removeAt</name>
      <anchor>removeAt</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>removeFirst</name>
      <anchor>removeFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeLast</name>
      <anchor>removeLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( int i, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>swap</name>
      <anchor>swap</anchor>
      <arglist>( int i, int j )</arglist>
    </member>
    <member kind="function">
      <name>takeAt</name>
      <anchor>takeAt</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>takeFirst</name>
      <anchor>takeFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>takeLast</name>
      <anchor>takeLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toSet</name>
      <anchor>toSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>list</name>
      <anchor>toStdList</anchor>
      <arglist>&lt;T&gt; QList::toStdList()</arglist>
    </member>
    <member kind="function">
      <name>toVector</name>
      <anchor>toVector</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( int i, const T &amp; defaultValue )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-2</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-2</anchor>
      <arglist>( const QList &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( int i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QListIterator</name>
    <filename>qlistiterator.html</filename>
    <member kind="function">
      <name>QListIterator</name>
      <anchor>QListIterator</anchor>
      <arglist>( const QList&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QList&lt;T&gt; &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QListView</name>
    <filename>qlistview.html</filename>
    <member kind="enum">
      <name>Flow</name>
      <anchor>Flow-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>LayoutMode</name>
      <anchor>LayoutMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Movement</name>
      <anchor>Movement-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ResizeMode</name>
      <anchor>ResizeMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ViewMode</name>
      <anchor>ViewMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QListView</name>
      <anchor>QListView</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clearPropertyFlags</name>
      <anchor>clearPropertyFlags</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>internalDrag</name>
      <anchor>internalDrag</anchor>
      <arglist>( Qt::DropActions supportedActions )</arglist>
    </member>
    <member kind="function">
      <name>internalDrop</name>
      <anchor>internalDrop</anchor>
      <arglist>( QDropEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>isRowHidden</name>
      <anchor>isRowHidden</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>rectForIndex</name>
      <anchor>rectForIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>setRowHidden</name>
      <anchor>setRowHidden</anchor>
      <arglist>( int row, bool hide )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QListWidget</name>
    <filename>qlistwidget.html</filename>
    <member kind="function">
      <name>QListWidget</name>
      <anchor>QListWidget</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem</anchor>
      <arglist>( const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem-2</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>addItems</name>
      <anchor>addItems</anchor>
      <arglist>( const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closePersistentEditor</name>
      <anchor>closePersistentEditor</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentItemChanged</name>
      <anchor>currentItemChanged</anchor>
      <arglist>( QListWidgetItem * current, QListWidgetItem * previous )</arglist>
    </member>
    <member kind="function">
      <name>currentRowChanged</name>
      <anchor>currentRowChanged</anchor>
      <arglist>( int currentRow )</arglist>
    </member>
    <member kind="function">
      <name>currentTextChanged</name>
      <anchor>currentTextChanged</anchor>
      <arglist>( const QString &amp; currentText )</arglist>
    </member>
    <member kind="function">
      <name>dropMimeData</name>
      <anchor>dropMimeData</anchor>
      <arglist>( int index, const QMimeData * data, Qt::DropAction action )</arglist>
    </member>
    <member kind="function">
      <name>editItem</name>
      <anchor>editItem</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>findItems</name>
      <anchor>findItems</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>indexFromItem</name>
      <anchor>indexFromItem</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( int row, QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-2</anchor>
      <arglist>( int row, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>insertItems</name>
      <anchor>insertItems</anchor>
      <arglist>( int row, const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>isItemHidden</name>
      <anchor>isItemHidden</anchor>
      <arglist>( const QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>isItemSelected</name>
      <anchor>isItemSelected</anchor>
      <arglist>( const QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>itemActivated</name>
      <anchor>itemActivated</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt-2</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>itemChanged</name>
      <anchor>itemChanged</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemClicked</name>
      <anchor>itemClicked</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemDoubleClicked</name>
      <anchor>itemDoubleClicked</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemEntered</name>
      <anchor>itemEntered</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemFromIndex</name>
      <anchor>itemFromIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>itemPressed</name>
      <anchor>itemPressed</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemSelectionChanged</name>
      <anchor>itemSelectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>items</name>
      <anchor>items</anchor>
      <arglist>( const QMimeData * data )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( const QList&lt;QListWidgetItem *&gt; items )</arglist>
    </member>
    <member kind="function">
      <name>mimeTypes</name>
      <anchor>mimeTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openPersistentEditor</name>
      <anchor>openPersistentEditor</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>( const QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>scrollToItem</name>
      <anchor>scrollToItem</anchor>
      <arglist>( const QListWidgetItem * item, ScrollHint hint = EnsureVisible )</arglist>
    </member>
    <member kind="function">
      <name>selectedItems</name>
      <anchor>selectedItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( QListWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setItemHidden</name>
      <anchor>setItemHidden</anchor>
      <arglist>( const QListWidgetItem * item, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setItemSelected</name>
      <anchor>setItemSelected</anchor>
      <arglist>( const QListWidgetItem * item, bool select )</arglist>
    </member>
    <member kind="function">
      <name>sortItems</name>
      <anchor>sortItems</anchor>
      <arglist>( Qt::SortOrder order = Qt::AscendingOrder )</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>supportedDropActions</anchor>
      <arglist> QListWidget::supportedDropActions()</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>visualItemRect</name>
      <anchor>visualItemRect</anchor>
      <arglist>( const QListWidgetItem * item )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QListWidgetItem</name>
    <filename>qlistwidgetitem.html</filename>
    <member kind="function">
      <name>QListWidgetItem</name>
      <anchor>QListWidgetItem</anchor>
      <arglist>( QListWidget * parent = 0, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>QListWidgetItem</name>
      <anchor>QListWidgetItem-2</anchor>
      <arglist>( const QString &amp; text, QListWidget * parent = 0, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>backgroundColor</name>
      <anchor>backgroundColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CheckState</name>
      <anchor>checkState</anchor>
      <arglist> QListWidgetItem::checkState()</arglist>
    </member>
    <member kind="function">
      <name>clone</name>
      <anchor>clone</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( int role )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QListWidgetItem::flags()</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>icon</name>
      <anchor>icon</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listWidget</name>
      <anchor>listWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; in )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setCheckState</name>
      <anchor>setCheckState</anchor>
      <arglist>( Qt::CheckState state )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( int role, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setFlags</name>
      <anchor>setFlags</anchor>
      <arglist>( Qt::ItemFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setIcon</name>
      <anchor>setIcon</anchor>
      <arglist>( const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setStatusTip</name>
      <anchor>setStatusTip</anchor>
      <arglist>( const QString &amp; statusTip )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTextAlignment</name>
      <anchor>setTextAlignment</anchor>
      <arglist>( int alignment )</arglist>
    </member>
    <member kind="function">
      <name>setTextColor</name>
      <anchor>setTextColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setToolTip</name>
      <anchor>setToolTip</anchor>
      <arglist>( const QString &amp; toolTip )</arglist>
    </member>
    <member kind="function">
      <name>setWhatsThis</name>
      <anchor>setWhatsThis</anchor>
      <arglist>( const QString &amp; whatsThis )</arglist>
    </member>
    <member kind="function">
      <name>statusTip</name>
      <anchor>statusTip</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textAlignment</name>
      <anchor>textAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textColor</name>
      <anchor>textColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toolTip</name>
      <anchor>toolTip</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; out )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QListWidgetItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QLocale</name>
    <filename>qlocale.html</filename>
    <member kind="enum">
      <name>Country</name>
      <anchor>Country-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Language</name>
      <anchor>Language-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QLocale</name>
      <anchor>QLocale</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QLocale</name>
      <anchor>QLocale-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>QLocale</name>
      <anchor>QLocale-3</anchor>
      <arglist>( Language language, Country country = AnyCountry )</arglist>
    </member>
    <member kind="function">
      <name>QLocale</name>
      <anchor>QLocale-4</anchor>
      <arglist>( const QLocale &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>c</name>
      <anchor>c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>country</name>
      <anchor>country</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>countryToString</name>
      <anchor>countryToString</anchor>
      <arglist>( Country country )</arglist>
    </member>
    <member kind="function">
      <name>language</name>
      <anchor>language</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>languageToString</name>
      <anchor>languageToString</anchor>
      <arglist>( Language language )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDefault</name>
      <anchor>setDefault</anchor>
      <arglist>( const QLocale &amp; locale )</arglist>
    </member>
    <member kind="function">
      <name>system</name>
      <anchor>system</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDouble</name>
      <anchor>toDouble</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toFloat</name>
      <anchor>toFloat</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toInt</name>
      <anchor>toInt</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toLongLong</name>
      <anchor>toLongLong</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toShort</name>
      <anchor>toShort</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( qlonglong i )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-2</anchor>
      <arglist>( qulonglong i )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-3</anchor>
      <arglist>( double i, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-4</anchor>
      <arglist>( short i )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-5</anchor>
      <arglist>( ushort i )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-6</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-7</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-8</anchor>
      <arglist>( float i, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>toUInt</name>
      <anchor>toUInt</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toULongLong</name>
      <anchor>toULongLong</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toUShort</name>
      <anchor>toUShort</anchor>
      <arglist>( const QString &amp; s, bool * ok = 0, int base = 0 )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QLocale &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QLocale &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QLocale &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMacMime</name>
    <filename>qmacmime.html</filename>
    <member kind="function">
      <name>QMacMime</name>
      <anchor>QMacMime</anchor>
      <arglist>( char t )</arglist>
    </member>
    <member kind="function">
      <name>all</name>
      <anchor>all</anchor>
      <arglist>( QMacMimeType t )</arglist>
    </member>
    <member kind="function">
      <name>canConvert</name>
      <anchor>canConvert</anchor>
      <arglist>( const QString &amp; mime, int flav )</arglist>
    </member>
    <member kind="function">
      <name>convertFromMime</name>
      <anchor>convertFromMime</anchor>
      <arglist>( const QString &amp; mime, QVariant data, int flav )</arglist>
    </member>
    <member kind="function">
      <name>convertToMime</name>
      <anchor>convertToMime</anchor>
      <arglist>( const QString &amp; mime, QList&lt;QByteArray&gt; data, int flav )</arglist>
    </member>
    <member kind="function">
      <name>convertor</name>
      <anchor>convertor</anchor>
      <arglist>( QMacMimeType t, const QString &amp; mime, int flav )</arglist>
    </member>
    <member kind="function">
      <name>convertorName</name>
      <anchor>convertorName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>countFlavors</name>
      <anchor>countFlavors</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flavor</name>
      <anchor>flavor</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>flavorFor</name>
      <anchor>flavorFor</anchor>
      <arglist>( const QString &amp; mime )</arglist>
    </member>
    <member kind="function">
      <name>flavorToMime</name>
      <anchor>flavorToMime</anchor>
      <arglist>( QMacMimeType t, int flav )</arglist>
    </member>
    <member kind="function">
      <name>mimeFor</name>
      <anchor>mimeFor</anchor>
      <arglist>( int flav )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMacStyle</name>
    <filename>qmacstyle.html</filename>
    <member kind="enum">
      <name>FocusRectPolicy</name>
      <anchor>FocusRectPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WidgetSizePolicy</name>
      <anchor>WidgetSizePolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMacStyle</name>
      <anchor>QMacStyle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusRectPolicy</name>
      <anchor>focusRectPolicy</anchor>
      <arglist>( const QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setFocusRectPolicy</name>
      <anchor>setFocusRectPolicy</anchor>
      <arglist>( QWidget * w, FocusRectPolicy policy )</arglist>
    </member>
    <member kind="function">
      <name>setWidgetSizePolicy</name>
      <anchor>setWidgetSizePolicy</anchor>
      <arglist>( const QWidget * w, WidgetSizePolicy policy )</arglist>
    </member>
    <member kind="function">
      <name>standardPalette</name>
      <anchor>standardPalette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widgetSizePolicy</name>
      <anchor>widgetSizePolicy</anchor>
      <arglist>( const QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>QMainWindow</name>
      <anchor>QMainWindow-2</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags flags = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMainWindow</name>
    <filename>qmainwindow.html</filename>
    <member kind="function">
      <name>ToolButtonStyle</name>
      <anchor>toolButtonStyle</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMainWindow</name>
      <anchor>QMainWindow</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags flags = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addDockWidget</name>
      <anchor>addDockWidget</anchor>
      <arglist>( Qt::DockWidgetArea area, QDockWidget * dockwidget )</arglist>
    </member>
    <member kind="function">
      <name>addDockWidget</name>
      <anchor>addDockWidget-2</anchor>
      <arglist>( Qt::DockWidgetArea area, QDockWidget * dockwidget, Qt::Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>addToolBar</name>
      <anchor>addToolBar</anchor>
      <arglist>( Qt::ToolBarArea area, QToolBar * toolbar )</arglist>
    </member>
    <member kind="function">
      <name>addToolBar</name>
      <anchor>addToolBar-2</anchor>
      <arglist>( QToolBar * toolbar )</arglist>
    </member>
    <member kind="function">
      <name>addToolBar</name>
      <anchor>addToolBar-3</anchor>
      <arglist>( const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>addToolBarBreak</name>
      <anchor>addToolBarBreak</anchor>
      <arglist>( Qt::ToolBarArea area = Qt::TopToolBarArea )</arglist>
    </member>
    <member kind="function">
      <name>centralWidget</name>
      <anchor>centralWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DockWidgetArea</name>
      <anchor>corner</anchor>
      <arglist> QMainWindow::corner( Qt::Corner corner )</arglist>
    </member>
    <member kind="function">
      <name>createPopupMenu</name>
      <anchor>createPopupMenu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DockWidgetArea</name>
      <anchor>dockWidgetArea</anchor>
      <arglist> QMainWindow::dockWidgetArea( QDockWidget * dockwidget )</arglist>
    </member>
    <member kind="function">
      <name>iconSizeChanged</name>
      <anchor>iconSizeChanged</anchor>
      <arglist>( const QSize &amp; iconSize )</arglist>
    </member>
    <member kind="function">
      <name>insertToolBar</name>
      <anchor>insertToolBar</anchor>
      <arglist>( QToolBar * before, QToolBar * toolbar )</arglist>
    </member>
    <member kind="function">
      <name>insertToolBarBreak</name>
      <anchor>insertToolBarBreak</anchor>
      <arglist>( QToolBar * before )</arglist>
    </member>
    <member kind="function">
      <name>menuBar</name>
      <anchor>menuBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeDockWidget</name>
      <anchor>removeDockWidget</anchor>
      <arglist>( QDockWidget * dockwidget )</arglist>
    </member>
    <member kind="function">
      <name>removeToolBar</name>
      <anchor>removeToolBar</anchor>
      <arglist>( QToolBar * toolbar )</arglist>
    </member>
    <member kind="function">
      <name>restoreState</name>
      <anchor>restoreState</anchor>
      <arglist>( const QByteArray &amp; state, int version = 0 )</arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>saveState</anchor>
      <arglist>( int version = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setCentralWidget</name>
      <anchor>setCentralWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setCorner</name>
      <anchor>setCorner</anchor>
      <arglist>( Qt::Corner corner, Qt::DockWidgetArea area )</arglist>
    </member>
    <member kind="function">
      <name>setMenuBar</name>
      <anchor>setMenuBar</anchor>
      <arglist>( QMenuBar * menuBar )</arglist>
    </member>
    <member kind="function">
      <name>setStatusBar</name>
      <anchor>setStatusBar</anchor>
      <arglist>( QStatusBar * statusbar )</arglist>
    </member>
    <member kind="function">
      <name>splitDockWidget</name>
      <anchor>splitDockWidget</anchor>
      <arglist>( QDockWidget * first, QDockWidget * second, Qt::Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>statusBar</name>
      <anchor>statusBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ToolBarArea</name>
      <anchor>toolBarArea</anchor>
      <arglist> QMainWindow::toolBarArea( QToolBar * toolbar )</arglist>
    </member>
    <member kind="function">
      <name>toolButtonStyleChanged</name>
      <anchor>toolButtonStyleChanged</anchor>
      <arglist>( Qt::ToolButtonStyle toolButtonStyle )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMap::const_iterator</name>
    <filename>qmap-const-iterator.html</filename>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-3</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMap::iterator</name>
    <filename>qmap-iterator.html</filename>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( const Key &amp; key, const T &amp; value, bool overwrite )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( iterator it )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMap</name>
    <filename>qmap.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMap</name>
      <anchor>QMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QMap</name>
      <anchor>QMap-2</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QMap</name>
      <anchor>QMap-3</anchor>
      <arglist>( const std::map&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constBegin</name>
      <anchor>constBegin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constEnd</name>
      <anchor>constEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>empty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>insertMulti</name>
      <anchor>insertMulti</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys-2</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>lowerBound</name>
      <anchor>lowerBound</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>lowerBound</name>
      <anchor>lowerBound-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>take</name>
      <anchor>take</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>toStdMap</anchor>
      <arglist>&lt;Key, T&gt; QMap::toStdMap()</arglist>
    </member>
    <member kind="function">
      <name>unite</name>
      <anchor>unite</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>upperBound</name>
      <anchor>upperBound</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>upperBound</name>
      <anchor>upperBound-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( const Key &amp; key, const T &amp; defaultValue )</arglist>
    </member>
    <member kind="function">
      <name>values</name>
      <anchor>values</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>values</name>
      <anchor>values-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( const Key &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMapIterator</name>
    <filename>qmapiterator.html</filename>
    <member kind="function">
      <name>QMapIterator</name>
      <anchor>QMapIterator</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; map )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; map )</arglist>
    </member>
    <member kind="function">
      <name>invert</name>
      <anchor>invert</anchor>
      <arglist>( bool * invertible = 0 )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-3</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>mapToRegion</name>
      <anchor>mapToRegion</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMatrix</name>
    <filename>qmatrix.html</filename>
    <member kind="function">
      <name>QMatrix</name>
      <anchor>QMatrix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QMatrix</name>
      <anchor>QMatrix-2</anchor>
      <arglist>( qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>QMatrix</name>
      <anchor>QMatrix-3</anchor>
      <arglist>( const QMatrix &amp; matrix )</arglist>
    </member>
    <member kind="function">
      <name>det</name>
      <anchor>det</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dx</name>
      <anchor>dx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dy</name>
      <anchor>dy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inverted</name>
      <anchor>inverted</anchor>
      <arglist>( bool * invertible = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isIdentity</name>
      <anchor>isIdentity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInvertible</name>
      <anchor>isInvertible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>m11</name>
      <anchor>m11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>m12</name>
      <anchor>m12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>m21</name>
      <anchor>m21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>m22</name>
      <anchor>m22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map</anchor>
      <arglist>( qreal x, qreal y, qreal * tx, qreal * ty )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-2</anchor>
      <arglist>( const QPainterPath &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-4</anchor>
      <arglist>( int x, int y, int * tx, int * ty )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-5</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-6</anchor>
      <arglist>( const QPointF &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-7</anchor>
      <arglist>( const QLineF &amp; line )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-8</anchor>
      <arglist>( const QLine &amp; line )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-9</anchor>
      <arglist>( const QPolygon &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-10</anchor>
      <arglist>( const QPolygonF &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-11</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>mapRect</name>
      <anchor>mapRect</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>mapRect</name>
      <anchor>mapRect-2</anchor>
      <arglist>( const QRectF &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>mapToPolygon</name>
      <anchor>mapToPolygon</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rotate</name>
      <anchor>rotate</anchor>
      <arglist>( qreal a )</arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>scale</anchor>
      <arglist>( qreal sx, qreal sy )</arglist>
    </member>
    <member kind="function">
      <name>setMatrix</name>
      <anchor>setMatrix</anchor>
      <arglist>( qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>shear</name>
      <anchor>shear</anchor>
      <arglist>( qreal sh, qreal sv )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QMatrix &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>( const QMatrix &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator*=</name>
      <anchor>operator-2a-eq</anchor>
      <arglist>( const QMatrix &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QMatrix &amp; matrix )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QMatrix &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>aboutToHide</name>
      <anchor>aboutToHide</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>accel</name>
      <anchor>accel</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>activateItemAt</name>
      <anchor>activateItemAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( int itemId )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem</anchor>
      <arglist>( int id, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-2</anchor>
      <arglist>( int id, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-3</anchor>
      <arglist>( int id, const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>columns</name>
      <anchor>columns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectItem</name>
      <anchor>connectItem</anchor>
      <arglist>( int id, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disconnectItem</name>
      <anchor>disconnectItem</anchor>
      <arglist>( int id, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>findPopup</name>
      <anchor>findPopup</anchor>
      <arglist>( QMenu * popup, int * index )</arglist>
    </member>
    <member kind="function">
      <name>frameWidth</name>
      <anchor>frameWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted</anchor>
      <arglist>( int itemId )</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>idAt</name>
      <anchor>idAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-3</anchor>
      <arglist>( const QPixmap &amp; pixmap, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-4</anchor>
      <arglist>( const QString &amp; text, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-5</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-6</anchor>
      <arglist>( const QString &amp; text, QMenu * popup, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-7</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, QMenu * popup, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-8</anchor>
      <arglist>( const QPixmap &amp; pixmap, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-9</anchor>
      <arglist>( const QPixmap &amp; pixmap, QMenu * popup, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertSeparator</name>
      <anchor>insertSeparator-2</anchor>
      <arglist>( int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertTearOffHandle</name>
      <anchor>insertTearOffHandle</anchor>
      <arglist>( int a = 0, int b = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isCheckable</name>
      <anchor>isCheckable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isItemActive</name>
      <anchor>isItemActive</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>isItemChecked</name>
      <anchor>isItemChecked</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>isItemEnabled</name>
      <anchor>isItemEnabled</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>isItemVisible</name>
      <anchor>isItemVisible</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>itemAtPos</name>
      <anchor>itemAtPos</anchor>
      <arglist>( const QPoint &amp; p, bool ignoreSeparator = true )</arglist>
    </member>
    <member kind="function">
      <name>itemFont</name>
      <anchor>itemFont</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>itemGeometry</name>
      <anchor>itemGeometry</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemHeight</name>
      <anchor>itemHeight</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemHeight</name>
      <anchor>itemHeight-2</anchor>
      <arglist>( QMenuItem * mi )</arglist>
    </member>
    <member kind="function">
      <name>itemParameter</name>
      <anchor>itemParameter</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>popup</name>
      <anchor>popup-2</anchor>
      <arglist>( const QPoint &amp; pos, int indexAtPoint )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>removeItemAt</name>
      <anchor>removeItemAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setAccel</name>
      <anchor>setAccel</anchor>
      <arglist>( const QKeySequence &amp; key, int id )</arglist>
    </member>
    <member kind="function">
      <name>setCheckable</name>
      <anchor>setCheckable</anchor>
      <arglist>( bool checkable )</arglist>
    </member>
    <member kind="function">
      <name>setItemChecked</name>
      <anchor>setItemChecked</anchor>
      <arglist>( int id, bool check )</arglist>
    </member>
    <member kind="function">
      <name>setItemEnabled</name>
      <anchor>setItemEnabled</anchor>
      <arglist>( int id, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setItemFont</name>
      <anchor>setItemFont</anchor>
      <arglist>( int id, const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setItemParameter</name>
      <anchor>setItemParameter</anchor>
      <arglist>( int id, int param )</arglist>
    </member>
    <member kind="function">
      <name>setItemVisible</name>
      <anchor>setItemVisible</anchor>
      <arglist>( int id, bool visible )</arglist>
    </member>
    <member kind="function">
      <name>setWhatsThis</name>
      <anchor>setWhatsThis</anchor>
      <arglist>( int id, const QString &amp; w )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>( int id )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMenu</name>
    <filename>qmenu.html</filename>
    <member kind="function">
      <name>QMenu</name>
      <anchor>QMenu</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QMenu</name>
      <anchor>QMenu-2</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>aboutToShow</name>
      <anchor>aboutToShow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeAction</name>
      <anchor>activeAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-3</anchor>
      <arglist>( const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-4</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addMenu</name>
      <anchor>addMenu</anchor>
      <arglist>( QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>addMenu</name>
      <anchor>addMenu-2</anchor>
      <arglist>( const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>addMenu</name>
      <anchor>addMenu-3</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>addSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultAction</name>
      <anchor>defaultAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec-2</anchor>
      <arglist>( const QPoint &amp; p, QAction * action = 0 )</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec-3</anchor>
      <arglist>( QList&lt;QAction *&gt; actions, const QPoint &amp; pos, QAction * at = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hideTearOffMenu</name>
      <anchor>hideTearOffMenu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hovered</name>
      <anchor>hovered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>insertMenu</name>
      <anchor>insertMenu</anchor>
      <arglist>( QAction * before, QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>insertSeparator</name>
      <anchor>insertSeparator</anchor>
      <arglist>( QAction * before )</arglist>
    </member>
    <member kind="function">
      <name>isTearOffMenuVisible</name>
      <anchor>isTearOffMenuVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menuAction</name>
      <anchor>menuAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>popup</name>
      <anchor>popup</anchor>
      <arglist>( const QPoint &amp; p, QAction * atAction = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setActiveAction</name>
      <anchor>setActiveAction</anchor>
      <arglist>( QAction * act )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultAction</name>
      <anchor>setDefaultAction</anchor>
      <arglist>( QAction * act )</arglist>
    </member>
    <member kind="function">
      <name>triggered</name>
      <anchor>triggered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="enum">
      <name>Separator</name>
      <anchor>Separator-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMenuBar</name>
      <anchor>QMenuBar-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>accel</name>
      <anchor>accel</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>activateItemAt</name>
      <anchor>activateItemAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( int itemId )</arglist>
    </member>
    <member kind="function">
      <name>autoGeometry</name>
      <anchor>autoGeometry</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem</anchor>
      <arglist>( int id, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-2</anchor>
      <arglist>( int id, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>changeItem</name>
      <anchor>changeItem-3</anchor>
      <arglist>( int id, const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>connectItem</name>
      <anchor>connectItem</anchor>
      <arglist>( int id, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disconnectItem</name>
      <anchor>disconnectItem</anchor>
      <arglist>( int id, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>findItem</name>
      <anchor>findItem</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>frameWidth</name>
      <anchor>frameWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted</anchor>
      <arglist>( int itemId )</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>idAt</name>
      <anchor>idAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-3</anchor>
      <arglist>( const QPixmap &amp; pixmap, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut = 0, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-4</anchor>
      <arglist>( const QString &amp; text, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-5</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-6</anchor>
      <arglist>( const QString &amp; text, QMenu * popup, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-7</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, QMenu * popup, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-8</anchor>
      <arglist>( const QPixmap &amp; pixmap, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-9</anchor>
      <arglist>( const QPixmap &amp; pixmap, QMenu * popup, int id = -1, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertSeparator</name>
      <anchor>insertSeparator</anchor>
      <arglist>( int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>isItemActive</name>
      <anchor>isItemActive</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>isItemChecked</name>
      <anchor>isItemChecked</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>isItemEnabled</name>
      <anchor>isItemEnabled</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>isItemVisible</name>
      <anchor>isItemVisible</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>itemAtPos</name>
      <anchor>itemAtPos</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>itemParameter</name>
      <anchor>itemParameter</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>itemRect</name>
      <anchor>itemRect</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>removeItemAt</name>
      <anchor>removeItemAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>separator</name>
      <anchor>separator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAccel</name>
      <anchor>setAccel</anchor>
      <arglist>( const QKeySequence &amp; key, int id )</arglist>
    </member>
    <member kind="function">
      <name>setAutoGeometry</name>
      <anchor>setAutoGeometry</anchor>
      <arglist>( bool )</arglist>
    </member>
    <member kind="function">
      <name>setItemChecked</name>
      <anchor>setItemChecked</anchor>
      <arglist>( int id, bool check )</arglist>
    </member>
    <member kind="function">
      <name>setItemEnabled</name>
      <anchor>setItemEnabled</anchor>
      <arglist>( int id, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setItemParameter</name>
      <anchor>setItemParameter</anchor>
      <arglist>( int id, int param )</arglist>
    </member>
    <member kind="function">
      <name>setItemVisible</name>
      <anchor>setItemVisible</anchor>
      <arglist>( int id, bool visible )</arglist>
    </member>
    <member kind="function">
      <name>setSeparator</name>
      <anchor>setSeparator</anchor>
      <arglist>( Separator sep )</arglist>
    </member>
    <member kind="function">
      <name>setWhatsThis</name>
      <anchor>setWhatsThis</anchor>
      <arglist>( int id, const QString &amp; w )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>( int id )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMenuBar</name>
    <filename>qmenubar.html</filename>
    <member kind="function">
      <name>QMenuBar</name>
      <anchor>QMenuBar</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activeAction</name>
      <anchor>activeAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-2</anchor>
      <arglist>( const QString &amp; text, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>addMenu</name>
      <anchor>addMenu</anchor>
      <arglist>( QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>addMenu</name>
      <anchor>addMenu-2</anchor>
      <arglist>( const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>addMenu</name>
      <anchor>addMenu-3</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; title )</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>addSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hovered</name>
      <anchor>hovered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>insertMenu</name>
      <anchor>insertMenu</anchor>
      <arglist>( QAction * before, QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>triggered</name>
      <anchor>triggered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>QMenuItem</name>
      <anchor>QMenuItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>id</name>
      <anchor>id</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>signalValue</name>
      <anchor>signalValue</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMenuItem</name>
    <filename>qmenuitem.html</filename>
    <member kind="function">
      <name>QMessageBox</name>
      <anchor>QMessageBox-3</anchor>
      <arglist>( const QString &amp; caption, const QString &amp; text, Icon icon, int button0, int button1, int button2, QWidget * parent, const char * name, bool modal, Qt::WFlags f = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint )</arglist>
    </member>
    <member kind="function">
      <name>QMessageBox</name>
      <anchor>QMessageBox-4</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>message</name>
      <anchor>message</anchor>
      <arglist>( const QString &amp; caption, const QString &amp; text, const QString &amp; buttonText = QString()</arglist>
    </member>
    <member kind="function">
      <name>query</name>
      <anchor>query</anchor>
      <arglist>( const QString &amp; caption, const QString &amp; text, const QString &amp; yesButtonText = QString()</arglist>
    </member>
    <member kind="function">
      <name>standardIcon</name>
      <anchor>standardIcon</anchor>
      <arglist>( Icon icon, Qt::GUIStyle style )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMessageBox</name>
    <filename>qmessagebox.html</filename>
    <member kind="enum">
      <name>Icon</name>
      <anchor>Icon-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextFormat</name>
      <anchor>textFormat</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMessageBox</name>
      <anchor>QMessageBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QMessageBox</name>
      <anchor>QMessageBox-2</anchor>
      <arglist>( const QString &amp; caption, const QString &amp; text, Icon icon, int button0, int button1, int button2, QWidget * parent = 0, Qt::WFlags f = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint )</arglist>
    </member>
    <member kind="function">
      <name>about</name>
      <anchor>about</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>aboutQt</name>
      <anchor>aboutQt</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption = QString()</arglist>
    </member>
    <member kind="function">
      <name>buttonText</name>
      <anchor>buttonText</anchor>
      <arglist>( int button )</arglist>
    </member>
    <member kind="function">
      <name>critical</name>
      <anchor>critical</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, int button0, int button1, int button2 = 0 )</arglist>
    </member>
    <member kind="function">
      <name>critical</name>
      <anchor>critical-2</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, const QString &amp; button0Text = QString()</arglist>
    </member>
    <member kind="function">
      <name>information</name>
      <anchor>information</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, int button0, int button1 = 0, int button2 = 0 )</arglist>
    </member>
    <member kind="function">
      <name>information</name>
      <anchor>information-2</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, const QString &amp; button0Text = QString()</arglist>
    </member>
    <member kind="function">
      <name>question</name>
      <anchor>question</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, int button0, int button1 = 0, int button2 = 0 )</arglist>
    </member>
    <member kind="function">
      <name>question</name>
      <anchor>question-2</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, const QString &amp; button0Text = QString()</arglist>
    </member>
    <member kind="function">
      <name>setButtonText</name>
      <anchor>setButtonText</anchor>
      <arglist>( int button, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>standardIcon</name>
      <anchor>standardIcon-2</anchor>
      <arglist>( Icon icon )</arglist>
    </member>
    <member kind="function">
      <name>warning</name>
      <anchor>warning</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, int button0, int button1, int button2 = 0 )</arglist>
    </member>
    <member kind="function">
      <name>warning</name>
      <anchor>warning-2</anchor>
      <arglist>( QWidget * parent, const QString &amp; caption, const QString &amp; text, const QString &amp; button0Text = QString()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaClassInfo</name>
    <filename>qmetaclassinfo.html</filename>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaEnum</name>
    <filename>qmetaenum.html</filename>
    <member kind="function">
      <name>isFlag</name>
      <anchor>isFlag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>keyCount</name>
      <anchor>keyCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyToValue</name>
      <anchor>keyToValue</anchor>
      <arglist>( const char * key )</arglist>
    </member>
    <member kind="function">
      <name>keysToValue</name>
      <anchor>keysToValue</anchor>
      <arglist>( const char * keys )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scope</name>
      <anchor>scope</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>valueToKey</name>
      <anchor>valueToKey</anchor>
      <arglist>( int value )</arglist>
    </member>
    <member kind="function">
      <name>valueToKeys</name>
      <anchor>valueToKeys</anchor>
      <arglist>( int value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaMember</name>
    <filename>qmetamember.html</filename>
    <member kind="enum">
      <name>Attributes</name>
      <anchor>Attributes-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>MemberType</name>
      <anchor>MemberType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>access</name>
      <anchor>access</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>memberType</name>
      <anchor>memberType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parameterNames</name>
      <anchor>parameterNames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parameterTypes</name>
      <anchor>parameterTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>signature</name>
      <anchor>signature</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tag</name>
      <anchor>tag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>typeName</name>
      <anchor>typeName</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaMethod</name>
    <filename>qmetamethod.html</filename>
    <member kind="enum">
      <name>Attributes</name>
      <anchor>Attributes-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>MethodType</name>
      <anchor>MethodType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>access</name>
      <anchor>access</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>memberType</name>
      <anchor>memberType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>methodType</name>
      <anchor>methodType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parameterNames</name>
      <anchor>parameterNames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parameterTypes</name>
      <anchor>parameterTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>signature</name>
      <anchor>signature</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tag</name>
      <anchor>tag</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>typeName</name>
      <anchor>typeName</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaObject</name>
    <filename>qmetaobject.html</filename>
    <member kind="function">
      <name>checkConnectArgs</name>
      <anchor>checkConnectArgs</anchor>
      <arglist>( const char * signal, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>classInfo</name>
      <anchor>classInfo</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>classInfoCount</name>
      <anchor>classInfoCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>classInfoOffset</name>
      <anchor>classInfoOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>className</name>
      <anchor>className</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enumerator</name>
      <anchor>enumerator</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>enumeratorCount</name>
      <anchor>enumeratorCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enumeratorOffset</name>
      <anchor>enumeratorOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOfClassInfo</name>
      <anchor>indexOfClassInfo</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>indexOfEnumerator</name>
      <anchor>indexOfEnumerator</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>indexOfMember</name>
      <anchor>indexOfMember</anchor>
      <arglist>( const char * member )</arglist>
    </member>
    <member kind="function">
      <name>indexOfProperty</name>
      <anchor>indexOfProperty</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>indexOfSignal</name>
      <anchor>indexOfSignal</anchor>
      <arglist>( const char * signal )</arglist>
    </member>
    <member kind="function">
      <name>indexOfSlot</name>
      <anchor>indexOfSlot</anchor>
      <arglist>( const char * slot )</arglist>
    </member>
    <member kind="function">
      <name>invokeMember</name>
      <anchor>invokeMember</anchor>
      <arglist>( QObject * obj, const char * member, Qt::ConnectionType type, QGenericReturnArgument ret, QGenericArgument val0 = QGenericArgument( 0 )</arglist>
    </member>
    <member kind="function">
      <name>invokeMember</name>
      <anchor>invokeMember-2</anchor>
      <arglist>( QObject * obj, const char * member, QGenericArgument val0 = QGenericArgument( 0 )</arglist>
    </member>
    <member kind="function">
      <name>invokeMember</name>
      <anchor>invokeMember-3</anchor>
      <arglist>( QObject * obj, const char * member, QGenericReturnArgument ret, QGenericArgument val0 = QGenericArgument( 0 )</arglist>
    </member>
    <member kind="function">
      <name>invokeMember</name>
      <anchor>invokeMember-4</anchor>
      <arglist>( QObject * obj, const char * member, Qt::ConnectionType type, QGenericArgument val0 = QGenericArgument( 0 )</arglist>
    </member>
    <member kind="function">
      <name>member</name>
      <anchor>member</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>memberCount</name>
      <anchor>memberCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>memberOffset</name>
      <anchor>memberOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>normalizedSignature</name>
      <anchor>normalizedSignature</anchor>
      <arglist>( const char * member )</arglist>
    </member>
    <member kind="function">
      <name>property</name>
      <anchor>property</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>propertyCount</name>
      <anchor>propertyCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>propertyOffset</name>
      <anchor>propertyOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>superClass</name>
      <anchor>superClass</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaProperty</name>
    <filename>qmetaproperty.html</filename>
    <member kind="function">
      <name>enumerator</name>
      <anchor>enumerator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDesignable</name>
      <anchor>isDesignable</anchor>
      <arglist>( const QObject * object = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isEditable</name>
      <anchor>isEditable</anchor>
      <arglist>( const QObject * object = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isEnumType</name>
      <anchor>isEnumType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFlagType</name>
      <anchor>isFlagType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isReadable</name>
      <anchor>isReadable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isScriptable</name>
      <anchor>isScriptable</anchor>
      <arglist>( const QObject * object = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isStored</name>
      <anchor>isStored</anchor>
      <arglist>( const QObject * object = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isWritable</name>
      <anchor>isWritable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( const QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>type</anchor>
      <arglist> QMetaProperty::type()</arglist>
    </member>
    <member kind="function">
      <name>typeName</name>
      <anchor>typeName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QObject * object, const QVariant &amp; value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMetaType</name>
    <filename>qmetatype.html</filename>
    <member kind="function">
      <name>construct</name>
      <anchor>construct</anchor>
      <arglist>( int type, const void * copy )</arglist>
    </member>
    <member kind="function">
      <name>destroy</name>
      <anchor>destroy</anchor>
      <arglist>( int type, void * data )</arglist>
    </member>
    <member kind="function">
      <name>isRegistered</name>
      <anchor>isRegistered</anchor>
      <arglist>( int type )</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>( const char * typeName )</arglist>
    </member>
    <member kind="function">
      <name>typeName</name>
      <anchor>typeName</anchor>
      <arglist>( int type )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMimeData</name>
    <filename>qmimedata.html</filename>
    <member kind="function">
      <name>QMimeData</name>
      <anchor>QMimeData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colorData</name>
      <anchor>colorData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QString &amp; mimetype )</arglist>
    </member>
    <member kind="function">
      <name>formats</name>
      <anchor>formats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasColor</name>
      <anchor>hasColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasFormat</name>
      <anchor>hasFormat</anchor>
      <arglist>( const QString &amp; mimetype )</arglist>
    </member>
    <member kind="function">
      <name>hasHtml</name>
      <anchor>hasHtml</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasImage</name>
      <anchor>hasImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasText</name>
      <anchor>hasText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasUrls</name>
      <anchor>hasUrls</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>html</name>
      <anchor>html</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>imageData</name>
      <anchor>imageData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>retrieveData</name>
      <anchor>retrieveData</anchor>
      <arglist>( const QString &amp; mimetype, QVariant::Type type )</arglist>
    </member>
    <member kind="function">
      <name>setColorData</name>
      <anchor>setColorData</anchor>
      <arglist>( const QVariant &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QString &amp; mimetype, const QByteArray &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>setHtml</name>
      <anchor>setHtml</anchor>
      <arglist>( const QString &amp; html )</arglist>
    </member>
    <member kind="function">
      <name>setImageData</name>
      <anchor>setImageData</anchor>
      <arglist>( const QVariant &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setUrls</name>
      <anchor>setUrls</anchor>
      <arglist>( const QList&lt;QUrl&gt; &amp; urls )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>urls</name>
      <anchor>urls</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QModelIndex</name>
    <filename>qmodelindex.html</filename>
    <member kind="function">
      <name>QModelIndex</name>
      <anchor>QModelIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QModelIndex</name>
      <anchor>QModelIndex-2</anchor>
      <arglist>( const QModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>child</name>
      <anchor>child</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>column</name>
      <anchor>column</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>internalId</name>
      <anchor>internalId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>internalPointer</name>
      <anchor>internalPointer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sibling</name>
      <anchor>sibling</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QModelIndex &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMotifStyle</name>
    <filename>qmotifstyle.html</filename>
    <member kind="function">
      <name>QMotifStyle</name>
      <anchor>QMotifStyle</anchor>
      <arglist>( bool useHighlightCols = false )</arglist>
    </member>
    <member kind="function">
      <name>setUseHighlightColors</name>
      <anchor>setUseHighlightColors</anchor>
      <arglist>( bool arg )</arglist>
    </member>
    <member kind="function">
      <name>useHighlightColors</name>
      <anchor>useHighlightColors</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMouseDriverFactory</name>
    <filename>qmousedriverfactory.html</filename>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key, const QString &amp; device )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMouseDriverPlugin</name>
    <filename>qmousedriverplugin.html</filename>
    <member kind="function">
      <name>QMouseDriverPlugin</name>
      <anchor>QMouseDriverPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; driver, const QString &amp; device )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QMouseEvent</name>
      <anchor>QMouseEvent-3</anchor>
      <arglist>( Type type, const QPoint &amp; pos, Qt::ButtonState button, int state )</arglist>
    </member>
    <member kind="function">
      <name>QMouseEvent</name>
      <anchor>QMouseEvent-4</anchor>
      <arglist>( Type type, const QPoint &amp; pos, const QPoint &amp; globalPos, Qt::ButtonState button, int state )</arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>state</anchor>
      <arglist> QMouseEvent::state()</arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>stateAfter</anchor>
      <arglist> QMouseEvent::stateAfter()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMouseEvent</name>
    <filename>qmouseevent.html</filename>
    <member kind="function">
      <name>QMouseEvent</name>
      <anchor>QMouseEvent</anchor>
      <arglist>( Type type, const QPoint &amp; position, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers )</arglist>
    </member>
    <member kind="function">
      <name>QMouseEvent</name>
      <anchor>QMouseEvent-2</anchor>
      <arglist>( Type type, const QPoint &amp; pos, const QPoint &amp; globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers )</arglist>
    </member>
    <member kind="function">
      <name>MouseButton</name>
      <anchor>button</anchor>
      <arglist> QMouseEvent::button()</arglist>
    </member>
    <member kind="function">
      <name>MouseButtons</name>
      <anchor>buttons</anchor>
      <arglist> QMouseEvent::buttons()</arglist>
    </member>
    <member kind="function">
      <name>globalPos</name>
      <anchor>globalPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalX</name>
      <anchor>globalX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalY</name>
      <anchor>globalY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMoveEvent</name>
    <filename>qmoveevent.html</filename>
    <member kind="function">
      <name>QMoveEvent</name>
      <anchor>QMoveEvent</anchor>
      <arglist>( const QPoint &amp; pos, const QPoint &amp; oldPos )</arglist>
    </member>
    <member kind="function">
      <name>oldPos</name>
      <anchor>oldPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameImage</name>
      <anchor>frameImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameNumber</name>
      <anchor>frameNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>framePixmap</name>
      <anchor>framePixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pause</name>
      <anchor>pause</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paused</name>
      <anchor>paused</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restart</name>
      <anchor>restart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>running</name>
      <anchor>running</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>step</name>
      <anchor>step</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unpause</name>
      <anchor>unpause</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMovie</name>
    <filename>qmovie.html</filename>
    <member kind="enum">
      <name>MovieState</name>
      <anchor>MovieState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMovie</name>
      <anchor>QMovie</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QMovie</name>
      <anchor>QMovie-2</anchor>
      <arglist>( QIODevice * device, const QByteArray &amp; format = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>QMovie</name>
      <anchor>QMovie-3</anchor>
      <arglist>( const QString &amp; fileName, const QByteArray &amp; format = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>backgroundColor</name>
      <anchor>backgroundColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentFrameNumber</name>
      <anchor>currentFrameNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentImage</name>
      <anchor>currentImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentPixmap</name>
      <anchor>currentPixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>( QImageReader::ImageReaderError error )</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameCount</name>
      <anchor>frameCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameRect</name>
      <anchor>frameRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>jumpToFrame</name>
      <anchor>jumpToFrame</anchor>
      <arglist>( int frameNumber )</arglist>
    </member>
    <member kind="function">
      <name>jumpToNextFrame</name>
      <anchor>jumpToNextFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loopCount</name>
      <anchor>loopCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextFrameDelay</name>
      <anchor>nextFrameDelay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resized</name>
      <anchor>resized</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setDevice</name>
      <anchor>setDevice</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QByteArray &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setPaused</name>
      <anchor>setPaused</anchor>
      <arglist>( bool paused )</arglist>
    </member>
    <member kind="function">
      <name>setSpeed</name>
      <anchor>setSpeed</anchor>
      <arglist>( int percentSpeed )</arglist>
    </member>
    <member kind="function">
      <name>speed</name>
      <anchor>speed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>started</name>
      <anchor>started</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>state</name>
      <anchor>state</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( MovieState state )</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>stop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updated</name>
      <anchor>updated</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMultiHash</name>
    <filename>qmultihash.html</filename>
    <member kind="function">
      <name>QMultiHash</name>
      <anchor>QMultiHash</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QMultiHash</name>
      <anchor>QMultiHash-2</anchor>
      <arglist>( const QHash&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QMultiHash &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QMultiHash &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMultiMap</name>
    <filename>qmultimap.html</filename>
    <member kind="function">
      <name>QMultiMap</name>
      <anchor>QMultiMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QMultiMap</name>
      <anchor>QMultiMap-2</anchor>
      <arglist>( const QMap&lt;Key, T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( const Key &amp; key, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QMultiMap &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QMultiMap &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutableHashIterator</name>
    <filename>qmutablehashiterator.html</filename>
    <member kind="function">
      <name>QMutableHashIterator</name>
      <anchor>QMutableHashIterator</anchor>
      <arglist>( QHash&lt;Key, T&gt; &amp; hash )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( QHash&lt;Key, T&gt; &amp; hash )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutableLinkedListIterator</name>
    <filename>qmutablelinkedlistiterator.html</filename>
    <member kind="function">
      <name>QMutableLinkedListIterator</name>
      <anchor>QMutableLinkedListIterator</anchor>
      <arglist>( QLinkedList&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( QLinkedList&lt;T&gt; &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutableListIterator</name>
    <filename>qmutablelistiterator.html</filename>
    <member kind="function">
      <name>QMutableListIterator</name>
      <anchor>QMutableListIterator</anchor>
      <arglist>( QList&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( QList&lt;T&gt; &amp; list )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutableMapIterator</name>
    <filename>qmutablemapiterator.html</filename>
    <member kind="function">
      <name>QMutableMapIterator</name>
      <anchor>QMutableMapIterator</anchor>
      <arglist>( QMap&lt;Key, T&gt; &amp; map )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>key</name>
      <anchor>key</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( QMap&lt;Key, T&gt; &amp; map )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutableVectorIterator</name>
    <filename>qmutablevectoriterator.html</filename>
    <member kind="function">
      <name>QMutableVectorIterator</name>
      <anchor>QMutableVectorIterator</anchor>
      <arglist>( QVector&lt;T&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( QVector&lt;T&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>QMutex</name>
      <anchor>QMutex-2</anchor>
      <arglist>( bool recursive )</arglist>
    </member>
    <member kind="function">
      <name>locked</name>
      <anchor>locked</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutex</name>
    <filename>qmutex.html</filename>
    <member kind="enum">
      <name>RecursionMode</name>
      <anchor>RecursionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QMutex</name>
      <anchor>QMutex</anchor>
      <arglist>( RecursionMode mode = NonRecursive )</arglist>
    </member>
    <member kind="function">
      <name>lock</name>
      <anchor>lock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tryLock</name>
      <anchor>tryLock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unlock</name>
      <anchor>unlock</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMutexLocker</name>
    <filename>qmutexlocker.html</filename>
    <member kind="function">
      <name>QMutexLocker</name>
      <anchor>QMutexLocker</anchor>
      <arglist>( QMutex * mutex )</arglist>
    </member>
    <member kind="function">
      <name>mutex</name>
      <anchor>mutex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>relock</name>
      <anchor>relock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unlock</name>
      <anchor>unlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QObject</name>
      <anchor>QObject-3</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>checkConnectArgs</name>
      <anchor>checkConnectArgs</anchor>
      <arglist>( const char * signal, const QObject * object, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>child</name>
      <anchor>child</anchor>
      <arglist>( const char * objName, const char * inheritsClass = 0, bool recursiveSearch = true )</arglist>
    </member>
    <member kind="function">
      <name>className</name>
      <anchor>className</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertChild</name>
      <anchor>insertChild</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>isA</name>
      <anchor>isA</anchor>
      <arglist>( const char * classname )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name-2</anchor>
      <arglist>( const char * defaultName )</arglist>
    </member>
    <member kind="function">
      <name>normalizeSignalSlot</name>
      <anchor>normalizeSignalSlot</anchor>
      <arglist>( const char * signalSlot )</arglist>
    </member>
    <member kind="function">
      <name>removeChild</name>
      <anchor>removeChild</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QObject</name>
    <filename>qobject.html</filename>
    <member kind="function">
      <name>QObject</name>
      <anchor>QObject</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>blockSignals</name>
      <anchor>blockSignals</anchor>
      <arglist>( bool block )</arglist>
    </member>
    <member kind="function">
      <name>childEvent</name>
      <anchor>childEvent</anchor>
      <arglist>( QChildEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>children</name>
      <anchor>children</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>connect</anchor>
      <arglist>( const QObject * sender, const char * signal, const QObject * receiver, const char * member, Qt::ConnectionType type = Qt::AutoCompatConnection )</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>connect-2</anchor>
      <arglist>( const QObject * sender, const char * signal, const char * member, Qt::ConnectionType type = Qt::AutoCompatConnection )</arglist>
    </member>
    <member kind="function">
      <name>connectNotify</name>
      <anchor>connectNotify</anchor>
      <arglist>( const char * signal )</arglist>
    </member>
    <member kind="function">
      <name>customEvent</name>
      <anchor>customEvent</anchor>
      <arglist>( QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>deleteLater</name>
      <anchor>deleteLater</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>destroyed</name>
      <anchor>destroyed</anchor>
      <arglist>( QObject * obj = 0 )</arglist>
    </member>
    <member kind="function">
      <name>disconnect</name>
      <anchor>disconnect</anchor>
      <arglist>( const QObject * sender, const char * signal, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>disconnect</name>
      <anchor>disconnect-2</anchor>
      <arglist>( const char * signal = 0, const QObject * receiver = 0, const char * member = 0 )</arglist>
    </member>
    <member kind="function">
      <name>disconnect</name>
      <anchor>disconnect-3</anchor>
      <arglist>( const QObject * receiver, const char * member = 0 )</arglist>
    </member>
    <member kind="function">
      <name>disconnectNotify</name>
      <anchor>disconnectNotify</anchor>
      <arglist>( const char * signal )</arglist>
    </member>
    <member kind="function">
      <name>dumpObjectInfo</name>
      <anchor>dumpObjectInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dumpObjectTree</name>
      <anchor>dumpObjectTree</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>event</name>
      <anchor>event</anchor>
      <arglist>( QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>eventFilter</name>
      <anchor>eventFilter</anchor>
      <arglist>( QObject * watched, QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>findChild</name>
      <anchor>findChild</anchor>
      <arglist>( const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>findChildren</name>
      <anchor>findChildren</anchor>
      <arglist>( const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>findChildren</name>
      <anchor>findChildren-2</anchor>
      <arglist>( const QRegExp &amp; re )</arglist>
    </member>
    <member kind="function">
      <name>inherits</name>
      <anchor>inherits</anchor>
      <arglist>( const char * clname )</arglist>
    </member>
    <member kind="function">
      <name>installEventFilter</name>
      <anchor>installEventFilter</anchor>
      <arglist>( QObject * filterObj )</arglist>
    </member>
    <member kind="function">
      <name>isWidgetType</name>
      <anchor>isWidgetType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>killTimer</name>
      <anchor>killTimer</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>metaObject</name>
      <anchor>metaObject</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveToThread</name>
      <anchor>moveToThread</anchor>
      <arglist>( QThread * targetThread )</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>property</name>
      <anchor>property</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>receivers</name>
      <anchor>receivers</anchor>
      <arglist>( const char * signal )</arglist>
    </member>
    <member kind="function">
      <name>removeEventFilter</name>
      <anchor>removeEventFilter</anchor>
      <arglist>( QObject * obj )</arglist>
    </member>
    <member kind="function">
      <name>sender</name>
      <anchor>sender</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setParent</name>
      <anchor>setParent</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>setProperty</anchor>
      <arglist>( const char * name, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>signalsBlocked</name>
      <anchor>signalsBlocked</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startTimer</name>
      <anchor>startTimer</anchor>
      <arglist>( int interval )</arglist>
    </member>
    <member kind="function">
      <name>thread</name>
      <anchor>thread</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerEvent</name>
      <anchor>timerEvent</anchor>
      <arglist>( QTimerEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>tr</name>
      <anchor>tr</anchor>
      <arglist>( const char * sourceText, const char * comment )</arglist>
    </member>
    <member kind="function">
      <name>trUtf8</name>
      <anchor>trUtf8</anchor>
      <arglist>( const char * sourceText, const char * comment )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QObjectCleanupHandler</name>
    <filename>qobjectcleanuphandler.html</filename>
    <member kind="function">
      <name>QObjectCleanupHandler</name>
      <anchor>QObjectCleanupHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QObject * object )</arglist>
    </member>
    <member kind="function">
      <name>x11AppCells</name>
      <anchor>x11AppCells</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>x11AppColormap</anchor>
      <arglist> QPaintDevice::x11AppColormap( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11AppDefaultColormap</name>
      <anchor>x11AppDefaultColormap</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11AppDefaultVisual</name>
      <anchor>x11AppDefaultVisual</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11AppDepth</name>
      <anchor>x11AppDepth</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11AppDisplay</name>
      <anchor>x11AppDisplay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11AppDpiX</name>
      <anchor>x11AppDpiX</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11AppDpiY</name>
      <anchor>x11AppDpiY</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>x11AppRootWindow</anchor>
      <arglist> QPaintDevice::x11AppRootWindow( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11AppScreen</name>
      <anchor>x11AppScreen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11AppVisual</name>
      <anchor>x11AppVisual</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>x11Cells</name>
      <anchor>x11Cells</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>x11Colormap</anchor>
      <arglist> QPaintDevice::x11Colormap()</arglist>
    </member>
    <member kind="function">
      <name>x11DefaultColormap</name>
      <anchor>x11DefaultColormap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11DefaultVisual</name>
      <anchor>x11DefaultVisual</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11Depth</name>
      <anchor>x11Depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11Display</name>
      <anchor>x11Display</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11Screen</name>
      <anchor>x11Screen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11SetAppDpiX</name>
      <anchor>x11SetAppDpiX</anchor>
      <arglist>( int dpi, int screen )</arglist>
    </member>
    <member kind="function">
      <name>x11SetAppDpiY</name>
      <anchor>x11SetAppDpiY</anchor>
      <arglist>( int dpi, int screen )</arglist>
    </member>
    <member kind="function">
      <name>x11Visual</name>
      <anchor>x11Visual</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPaintDevice</name>
    <filename>qpaintdevice.html</filename>
    <member kind="function">
      <name>QPaintDevice</name>
      <anchor>QPaintDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>heightMM</name>
      <anchor>heightMM</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalDpiX</name>
      <anchor>logicalDpiX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>logicalDpiY</name>
      <anchor>logicalDpiY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numColors</name>
      <anchor>numColors</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEngine</name>
      <anchor>paintEngine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintingActive</name>
      <anchor>paintingActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widthMM</name>
      <anchor>widthMM</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPaintEngine</name>
    <filename>qpaintengine.html</filename>
    <member kind="enum">
      <name>PolygonDrawMode</name>
      <anchor>PolygonDrawMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPaintEngine</name>
      <anchor>QPaintEngine</anchor>
      <arglist>( PaintEngineFeatures caps = 0 )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>( QPaintDevice * pdev )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse</anchor>
      <arglist>( const QRectF &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse-2</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage</anchor>
      <arglist>( const QRectF &amp; rectangle, const QImage &amp; image, const QRectF &amp; sr, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines</anchor>
      <arglist>( const QLineF * lines, int lineCount )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-2</anchor>
      <arglist>( const QLine * lines, int lineCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPath</name>
      <anchor>drawPath</anchor>
      <arglist>( const QPainterPath &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap</anchor>
      <arglist>( const QRectF &amp; r, const QPixmap &amp; pm, const QRectF &amp; sr )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints</anchor>
      <arglist>( const QPointF * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints-2</anchor>
      <arglist>( const QPoint * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon</anchor>
      <arglist>( const QPointF * points, int pointCount, PolygonDrawMode mode )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon-2</anchor>
      <arglist>( const QPoint * points, int pointCount, PolygonDrawMode mode )</arglist>
    </member>
    <member kind="function">
      <name>drawRects</name>
      <anchor>drawRects</anchor>
      <arglist>( const QRectF * rects, int rectCount )</arglist>
    </member>
    <member kind="function">
      <name>drawRects</name>
      <anchor>drawRects-2</anchor>
      <arglist>( const QRect * rects, int rectCount )</arglist>
    </member>
    <member kind="function">
      <name>drawTextItem</name>
      <anchor>drawTextItem</anchor>
      <arglist>( const QPointF &amp; p, const QTextItem &amp; textItem )</arglist>
    </member>
    <member kind="function">
      <name>drawTiledPixmap</name>
      <anchor>drawTiledPixmap</anchor>
      <arglist>( const QRectF &amp; rect, const QPixmap &amp; pixmap, const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasFeature</name>
      <anchor>hasFeature</anchor>
      <arglist>( PaintEngineFeatures feature )</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintDevice</name>
      <anchor>paintDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>painter</name>
      <anchor>painter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActive</name>
      <anchor>setActive</anchor>
      <arglist>( bool state )</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateState</name>
      <anchor>updateState</anchor>
      <arglist>( const QPaintEngineState &amp; state )</arglist>
    </member>
    <member kind="function">
      <name>backgroundColor</name>
      <anchor>backgroundColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>( QPaintDevice * pdev, const QWidget * init )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-3</anchor>
      <arglist>( const QRect &amp; rect, int flags, const QString &amp; text, int len )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-4</anchor>
      <arglist>( int x, int y, int w, int h, int flags, const QString &amp; text, int len )</arglist>
    </member>
    <member kind="function">
      <name>drawConvexPolygon</name>
      <anchor>drawConvexPolygon-5</anchor>
      <arglist>( const QPolygonF &amp; polygon, int index, int npoints = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawConvexPolygon</name>
      <anchor>drawConvexPolygon-6</anchor>
      <arglist>( const QPolygon &amp; polygon, int index, int npoints = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawCubicBezier</name>
      <anchor>drawCubicBezier</anchor>
      <arglist>( const QPolygon &amp; a, int index = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawLineSegments</name>
      <anchor>drawLineSegments</anchor>
      <arglist>( const QPolygon &amp; a, int index = 0, int nlines = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints-2</anchor>
      <arglist>( const QPolygon &amp; points, int index, int npoints = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon-2</anchor>
      <arglist>( const QPolygon &amp; pa, bool winding, int index = 0, int npoints = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon-5</anchor>
      <arglist>( const QPolygonF &amp; polygon, bool winding, int index = 0, int npoints = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawPolyline</name>
      <anchor>drawPolyline-2</anchor>
      <arglist>( const QPolygon &amp; pa, int index, int npoints = -1 )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-3</anchor>
      <arglist>( int x, int y, const QString &amp; text, int pos, int len )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-4</anchor>
      <arglist>( const QPoint &amp; p, const QString &amp; text, int pos, int len )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-5</anchor>
      <arglist>( int x, int y, const QString &amp; text, int len )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-6</anchor>
      <arglist>( const QPoint &amp; p, const QString &amp; s, int len )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-7</anchor>
      <arglist>( const QRect &amp; r, int flags, const QString &amp; str, int len, QRect * br = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-8</anchor>
      <arglist>( int x, int y, int w, int h, int flags, const QString &amp; str, int len, QRect * br = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasViewXForm</name>
      <anchor>hasViewXForm</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasWorldXForm</name>
      <anchor>hasWorldXForm</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redirect</name>
      <anchor>redirect</anchor>
      <arglist>( QPaintDevice * pdev, QPaintDevice * replacement )</arglist>
    </member>
    <member kind="function">
      <name>redirect</name>
      <anchor>redirect-2</anchor>
      <arglist>( QPaintDevice * pdev )</arglist>
    </member>
    <member kind="function">
      <name>resetXForm</name>
      <anchor>resetXForm</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setViewXForm</name>
      <anchor>setViewXForm</anchor>
      <arglist>( bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>setWorldMatrix</name>
      <anchor>setWorldMatrix</anchor>
      <arglist>( const QMatrix &amp; wm, bool combine = false )</arglist>
    </member>
    <member kind="function">
      <name>setWorldXForm</name>
      <anchor>setWorldXForm</anchor>
      <arglist>( bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>worldMatrix</name>
      <anchor>worldMatrix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm-3</anchor>
      <arglist>( const QPolygon &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm-4</anchor>
      <arglist>( const QPolygon &amp; av, int index, int npoints )</arglist>
    </member>
    <member kind="function">
      <name>xFormDev</name>
      <anchor>xFormDev</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>xFormDev</name>
      <anchor>xFormDev-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>xFormDev</name>
      <anchor>xFormDev-3</anchor>
      <arglist>( const QPolygon &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>xFormDev</name>
      <anchor>xFormDev-4</anchor>
      <arglist>( const QPolygon &amp; ad, int index, int npoints )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPainter</name>
    <filename>qpainter.html</filename>
    <member kind="enum">
      <name>CompositionMode</name>
      <anchor>CompositionMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPainter</name>
      <anchor>QPainter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPainter</name>
      <anchor>QPainter-2</anchor>
      <arglist>( QPaintDevice * pd )</arglist>
    </member>
    <member kind="function">
      <name>background</name>
      <anchor>background</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BGMode</name>
      <anchor>backgroundMode</anchor>
      <arglist> QPainter::backgroundMode()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>( QPaintDevice * pd )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>( const QRectF &amp; rect, int flags, const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-2</anchor>
      <arglist>( const QRectF &amp; rectangle, const QString &amp; text, const QTextOption &amp; option = QTextOption()</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-5</anchor>
      <arglist>( int x, int y, int w, int h, int flags, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect-6</anchor>
      <arglist>( const QRect &amp; rect, int flags, const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>brush</name>
      <anchor>brush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>brushOrigin</name>
      <anchor>brushOrigin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clipPath</name>
      <anchor>clipPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clipRegion</name>
      <anchor>clipRegion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compositionMode</name>
      <anchor>compositionMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deviceMatrix</name>
      <anchor>deviceMatrix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawArc</name>
      <anchor>drawArc</anchor>
      <arglist>( const QRectF &amp; r, int a, int alen )</arglist>
    </member>
    <member kind="function">
      <name>drawArc</name>
      <anchor>drawArc-2</anchor>
      <arglist>( const QRect &amp; r, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawArc</name>
      <anchor>drawArc-3</anchor>
      <arglist>( int x, int y, int w, int h, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawChord</name>
      <anchor>drawChord</anchor>
      <arglist>( const QRectF &amp; r, int a, int alen )</arglist>
    </member>
    <member kind="function">
      <name>drawChord</name>
      <anchor>drawChord-2</anchor>
      <arglist>( const QRect &amp; r, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawChord</name>
      <anchor>drawChord-3</anchor>
      <arglist>( int x, int y, int w, int h, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawConvexPolygon</name>
      <anchor>drawConvexPolygon</anchor>
      <arglist>( const QPointF * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawConvexPolygon</name>
      <anchor>drawConvexPolygon-2</anchor>
      <arglist>( const QPoint * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawConvexPolygon</name>
      <anchor>drawConvexPolygon-3</anchor>
      <arglist>( const QPolygonF &amp; polygon )</arglist>
    </member>
    <member kind="function">
      <name>drawConvexPolygon</name>
      <anchor>drawConvexPolygon-4</anchor>
      <arglist>( const QPolygon &amp; polygon )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse</anchor>
      <arglist>( const QRectF &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>drawEllipse</name>
      <anchor>drawEllipse-3</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage</anchor>
      <arglist>( const QRectF &amp; targetRect, const QImage &amp; image, const QRectF &amp; sourceRect, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-2</anchor>
      <arglist>( const QPointF &amp; p, const QImage &amp; image, const QRectF &amp; sr, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-3</anchor>
      <arglist>( const QRectF &amp; rectangle, const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-4</anchor>
      <arglist>( const QPoint &amp; p, const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-5</anchor>
      <arglist>( const QPointF &amp; p, const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-6</anchor>
      <arglist>( const QPoint &amp; p, const QImage &amp; image, const QRect &amp; sr, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-7</anchor>
      <arglist>( const QRect &amp; rectangle, const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-8</anchor>
      <arglist>( int x, int y, const QImage &amp; image, int sx = 0, int sy = 0, int sw = -1, int sh = -1, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>drawImage</name>
      <anchor>drawImage-9</anchor>
      <arglist>( const QRect &amp; targetRect, const QImage &amp; image, const QRect &amp; sourceRect, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>drawLine</anchor>
      <arglist>( const QLineF &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>drawLine-2</anchor>
      <arglist>( const QLine &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>drawLine-3</anchor>
      <arglist>( int x1, int y1, int x2, int y2 )</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>drawLine-4</anchor>
      <arglist>( const QPoint &amp; p1, const QPoint &amp; p2 )</arglist>
    </member>
    <member kind="function">
      <name>drawLine</name>
      <anchor>drawLine-5</anchor>
      <arglist>( const QPointF &amp; p1, const QPointF &amp; p2 )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines</anchor>
      <arglist>( const QLineF * lines, int lineCount )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-2</anchor>
      <arglist>( const QVector&lt;QLineF&gt; &amp; lines )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-3</anchor>
      <arglist>( const QLine * lines, int lineCount )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-4</anchor>
      <arglist>( const QVector&lt;QLine&gt; &amp; lines )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-5</anchor>
      <arglist>( const QVector&lt;QPoint&gt; &amp; pointPairs )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-6</anchor>
      <arglist>( const QVector&lt;QPointF&gt; &amp; pointPairs )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-7</anchor>
      <arglist>( const QPointF * pointPairs, int lineCount )</arglist>
    </member>
    <member kind="function">
      <name>drawLines</name>
      <anchor>drawLines-8</anchor>
      <arglist>( const QPoint * pointPairs, int lineCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPath</name>
      <anchor>drawPath</anchor>
      <arglist>( const QPainterPath &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>drawPicture</name>
      <anchor>drawPicture</anchor>
      <arglist>( const QPointF &amp; p, const QPicture &amp; picture )</arglist>
    </member>
    <member kind="function">
      <name>drawPicture</name>
      <anchor>drawPicture-2</anchor>
      <arglist>( int x, int y, const QPicture &amp; picture )</arglist>
    </member>
    <member kind="function">
      <name>drawPicture</name>
      <anchor>drawPicture-3</anchor>
      <arglist>( const QPoint &amp; p, const QPicture &amp; picture )</arglist>
    </member>
    <member kind="function">
      <name>drawPie</name>
      <anchor>drawPie</anchor>
      <arglist>( const QRectF &amp; r, int a, int alen )</arglist>
    </member>
    <member kind="function">
      <name>drawPie</name>
      <anchor>drawPie-2</anchor>
      <arglist>( const QRect &amp; rect, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawPie</name>
      <anchor>drawPie-3</anchor>
      <arglist>( int x, int y, int w, int h, int startAngle, int spanAngle )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap</anchor>
      <arglist>( const QRectF &amp; r, const QPixmap &amp; pm, const QRectF &amp; sr )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-2</anchor>
      <arglist>( const QRect &amp; targetRect, const QPixmap &amp; pixmap, const QRect &amp; sourceRect )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-3</anchor>
      <arglist>( const QPointF &amp; p, const QPixmap &amp; pixmap, const QRectF &amp; sourceRect )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-4</anchor>
      <arglist>( const QPointF &amp; p, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-5</anchor>
      <arglist>( int x, int y, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-6</anchor>
      <arglist>( int x, int y, int width, int height, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-7</anchor>
      <arglist>( int x, int y, int w, int h, const QPixmap &amp; pm, int sx, int sy, int sw, int sh )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-8</anchor>
      <arglist>( int x, int y, const QPixmap &amp; pixmap, int sx, int sy, int sw, int sh )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-9</anchor>
      <arglist>( const QPoint &amp; p, const QPixmap &amp; pm, const QRect &amp; sr )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-10</anchor>
      <arglist>( const QPoint &amp; p, const QPixmap &amp; pm )</arglist>
    </member>
    <member kind="function">
      <name>drawPixmap</name>
      <anchor>drawPixmap-11</anchor>
      <arglist>( const QRect &amp; r, const QPixmap &amp; pm )</arglist>
    </member>
    <member kind="function">
      <name>drawPoint</name>
      <anchor>drawPoint</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>drawPoint</name>
      <anchor>drawPoint-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>drawPoint</name>
      <anchor>drawPoint-3</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints</anchor>
      <arglist>( const QPointF * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints-3</anchor>
      <arglist>( const QPolygonF &amp; points )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints-4</anchor>
      <arglist>( const QPoint * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPoints</name>
      <anchor>drawPoints-5</anchor>
      <arglist>( const QPolygon &amp; points )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon</anchor>
      <arglist>( const QPointF * points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon-3</anchor>
      <arglist>( const QPolygon &amp; pa, Qt::FillRule fillRule = Qt::OddEvenFill )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon-4</anchor>
      <arglist>( const QPolygonF &amp; pa, Qt::FillRule fillRule = Qt::OddEvenFill )</arglist>
    </member>
    <member kind="function">
      <name>drawPolygon</name>
      <anchor>drawPolygon-6</anchor>
      <arglist>( const QPoint * points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill )</arglist>
    </member>
    <member kind="function">
      <name>drawPolyline</name>
      <anchor>drawPolyline</anchor>
      <arglist>( const QPointF * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawPolyline</name>
      <anchor>drawPolyline-3</anchor>
      <arglist>( const QPolygon &amp; pa )</arglist>
    </member>
    <member kind="function">
      <name>drawPolyline</name>
      <anchor>drawPolyline-4</anchor>
      <arglist>( const QPolygonF &amp; pa )</arglist>
    </member>
    <member kind="function">
      <name>drawPolyline</name>
      <anchor>drawPolyline-5</anchor>
      <arglist>( const QPoint * points, int pointCount )</arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>drawRect</anchor>
      <arglist>( const QRectF &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>drawRect-2</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>drawRect</name>
      <anchor>drawRect-3</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>drawRects</name>
      <anchor>drawRects</anchor>
      <arglist>( const QRectF * rects, int rectCount )</arglist>
    </member>
    <member kind="function">
      <name>drawRects</name>
      <anchor>drawRects-2</anchor>
      <arglist>( const QVector&lt;QRectF&gt; &amp; rectangles )</arglist>
    </member>
    <member kind="function">
      <name>drawRects</name>
      <anchor>drawRects-3</anchor>
      <arglist>( const QRect * rects, int rectCount )</arglist>
    </member>
    <member kind="function">
      <name>drawRects</name>
      <anchor>drawRects-4</anchor>
      <arglist>( const QVector&lt;QRect&gt; &amp; rectangles )</arglist>
    </member>
    <member kind="function">
      <name>drawRoundRect</name>
      <anchor>drawRoundRect</anchor>
      <arglist>( const QRectF &amp; r, int xRnd = 25, int yRnd = 25 )</arglist>
    </member>
    <member kind="function">
      <name>drawRoundRect</name>
      <anchor>drawRoundRect-2</anchor>
      <arglist>( int x, int y, int w, int h, int xRnd = 25, int yRnd = 25 )</arglist>
    </member>
    <member kind="function">
      <name>drawRoundRect</name>
      <anchor>drawRoundRect-3</anchor>
      <arglist>( const QRect &amp; r, int xRnd = 25, int yRnd = 25 )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText</anchor>
      <arglist>( const QPointF &amp; p, const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-2</anchor>
      <arglist>( const QRectF &amp; rectangle, const QString &amp; text, const QTextOption &amp; option = QTextOption()</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-9</anchor>
      <arglist>( int x, int y, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-10</anchor>
      <arglist>( int x, int y, int w, int h, int flags, const QString &amp; text, QRect * br = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-11</anchor>
      <arglist>( const QRect &amp; r, int flags, const QString &amp; str, QRect * br = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-12</anchor>
      <arglist>( const QPoint &amp; p, const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-13</anchor>
      <arglist>( const QRectF &amp; r, int flags, const QString &amp; str, QRectF * br = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawTiledPixmap</name>
      <anchor>drawTiledPixmap</anchor>
      <arglist>( int x, int y, int w, int h, const QPixmap &amp; pixmap, int sx = 0, int sy = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawTiledPixmap</name>
      <anchor>drawTiledPixmap-2</anchor>
      <arglist>( const QRect &amp; rect, const QPixmap &amp; pixmap, const QPoint &amp; sp = QPoint()</arglist>
    </member>
    <member kind="function">
      <name>drawTiledPixmap</name>
      <anchor>drawTiledPixmap-3</anchor>
      <arglist>( const QRectF &amp; r, const QPixmap &amp; pixmap, const QPointF &amp; sp = QPointF()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>eraseRect</name>
      <anchor>eraseRect</anchor>
      <arglist>( const QRectF &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>eraseRect</name>
      <anchor>eraseRect-2</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>eraseRect</name>
      <anchor>eraseRect-3</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>fillPath</name>
      <anchor>fillPath</anchor>
      <arglist>( const QPainterPath &amp; path, const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>fillRect</anchor>
      <arglist>( const QRectF &amp; r, const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>fillRect-2</anchor>
      <arglist>( const QRect &amp; rect, const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>fillRect</name>
      <anchor>fillRect-3</anchor>
      <arglist>( int x, int y, int w, int h, const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontInfo</name>
      <anchor>fontInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontMetrics</name>
      <anchor>fontMetrics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasClipping</name>
      <anchor>hasClipping</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initFrom</name>
      <anchor>initFrom</anchor>
      <arglist>( const QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>layoutDirection</anchor>
      <arglist> QPainter::layoutDirection()</arglist>
    </member>
    <member kind="function">
      <name>matrix</name>
      <anchor>matrix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>matrixEnabled</name>
      <anchor>matrixEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEngine</name>
      <anchor>paintEngine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pen</name>
      <anchor>pen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>renderHints</name>
      <anchor>renderHints</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resetMatrix</name>
      <anchor>resetMatrix</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restore</name>
      <anchor>restore</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rotate</name>
      <anchor>rotate</anchor>
      <arglist>( qreal a )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>scale</anchor>
      <arglist>( qreal sx, qreal sy )</arglist>
    </member>
    <member kind="function">
      <name>setBackground</name>
      <anchor>setBackground</anchor>
      <arglist>( const QBrush &amp; bg )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundMode</name>
      <anchor>setBackgroundMode</anchor>
      <arglist>( Qt::BGMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setBrush</name>
      <anchor>setBrush</anchor>
      <arglist>( Qt::BrushStyle style )</arglist>
    </member>
    <member kind="function">
      <name>setBrush</name>
      <anchor>setBrush-2</anchor>
      <arglist>( const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>setBrushOrigin</name>
      <anchor>setBrushOrigin</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setBrushOrigin</name>
      <anchor>setBrushOrigin-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setBrushOrigin</name>
      <anchor>setBrushOrigin-3</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>setClipPath</name>
      <anchor>setClipPath</anchor>
      <arglist>( const QPainterPath &amp; path, Qt::ClipOperation op = Qt::ReplaceClip )</arglist>
    </member>
    <member kind="function">
      <name>setClipRect</name>
      <anchor>setClipRect</anchor>
      <arglist>( const QRect &amp; rect, Qt::ClipOperation op = Qt::ReplaceClip )</arglist>
    </member>
    <member kind="function">
      <name>setClipRect</name>
      <anchor>setClipRect-2</anchor>
      <arglist>( int x, int y, int w, int h, Qt::ClipOperation op = Qt::ReplaceClip )</arglist>
    </member>
    <member kind="function">
      <name>setClipRect</name>
      <anchor>setClipRect-3</anchor>
      <arglist>( const QRectF &amp; rect, Qt::ClipOperation op = Qt::ReplaceClip )</arglist>
    </member>
    <member kind="function">
      <name>setClipRegion</name>
      <anchor>setClipRegion</anchor>
      <arglist>( const QRegion &amp; r, Qt::ClipOperation op = Qt::ReplaceClip )</arglist>
    </member>
    <member kind="function">
      <name>setClipping</name>
      <anchor>setClipping</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setCompositionMode</name>
      <anchor>setCompositionMode</anchor>
      <arglist>( CompositionMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setLayoutDirection</name>
      <anchor>setLayoutDirection</anchor>
      <arglist>( Qt::LayoutDirection direction )</arglist>
    </member>
    <member kind="function">
      <name>setMatrix</name>
      <anchor>setMatrix</anchor>
      <arglist>( const QMatrix &amp; matrix, bool combine = false )</arglist>
    </member>
    <member kind="function">
      <name>setMatrixEnabled</name>
      <anchor>setMatrixEnabled</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setPen</name>
      <anchor>setPen</anchor>
      <arglist>( const QPen &amp; pen )</arglist>
    </member>
    <member kind="function">
      <name>setPen</name>
      <anchor>setPen-2</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setPen</name>
      <anchor>setPen-3</anchor>
      <arglist>( Qt::PenStyle style )</arglist>
    </member>
    <member kind="function">
      <name>setRenderHint</name>
      <anchor>setRenderHint</anchor>
      <arglist>( RenderHint hint, bool on = true )</arglist>
    </member>
    <member kind="function">
      <name>setViewTransformEnabled</name>
      <anchor>setViewTransformEnabled</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setViewport</name>
      <anchor>setViewport</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>setViewport</name>
      <anchor>setViewport-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setWindow</name>
      <anchor>setWindow</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>setWindow</name>
      <anchor>setWindow-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>shear</name>
      <anchor>shear</anchor>
      <arglist>( qreal sh, qreal sv )</arglist>
    </member>
    <member kind="function">
      <name>strokePath</name>
      <anchor>strokePath</anchor>
      <arglist>( const QPainterPath &amp; path, const QPen &amp; pen )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( const QPointF &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-3</anchor>
      <arglist>( const QPoint &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>viewTransformEnabled</name>
      <anchor>viewTransformEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>viewport</name>
      <anchor>viewport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>window</name>
      <anchor>window</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPainterPath</name>
    <filename>qpainterpath.html</filename>
    <member kind="function">
      <name>QPainterPath</name>
      <anchor>QPainterPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPainterPath</name>
      <anchor>QPainterPath-2</anchor>
      <arglist>( const QPointF &amp; startPoint )</arglist>
    </member>
    <member kind="function">
      <name>QPainterPath</name>
      <anchor>QPainterPath-3</anchor>
      <arglist>( const QPainterPath &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>addEllipse</name>
      <anchor>addEllipse</anchor>
      <arglist>( const QRectF &amp; boundingRect )</arglist>
    </member>
    <member kind="function">
      <name>addEllipse</name>
      <anchor>addEllipse-2</anchor>
      <arglist>( qreal x, qreal y, qreal width, qreal height )</arglist>
    </member>
    <member kind="function">
      <name>addPath</name>
      <anchor>addPath</anchor>
      <arglist>( const QPainterPath &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>addPolygon</name>
      <anchor>addPolygon</anchor>
      <arglist>( const QPolygonF &amp; polygon )</arglist>
    </member>
    <member kind="function">
      <name>addRect</name>
      <anchor>addRect</anchor>
      <arglist>( const QRectF &amp; rectangle )</arglist>
    </member>
    <member kind="function">
      <name>addRect</name>
      <anchor>addRect-2</anchor>
      <arglist>( qreal x, qreal y, qreal width, qreal height )</arglist>
    </member>
    <member kind="function">
      <name>addRegion</name>
      <anchor>addRegion</anchor>
      <arglist>( const QRegion &amp; region )</arglist>
    </member>
    <member kind="function">
      <name>addText</name>
      <anchor>addText</anchor>
      <arglist>( const QPointF &amp; point, const QFont &amp; font, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addText</name>
      <anchor>addText-2</anchor>
      <arglist>( qreal x, qreal y, const QFont &amp; font, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>arcTo</name>
      <anchor>arcTo</anchor>
      <arglist>( const QRectF &amp; rectangle, qreal startAngle, qreal sweepLength )</arglist>
    </member>
    <member kind="function">
      <name>arcTo</name>
      <anchor>arcTo-2</anchor>
      <arglist>( qreal x, qreal y, qreal width, qreal height, qreal startAngle, qreal sweepLength )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeSubpath</name>
      <anchor>closeSubpath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectPath</name>
      <anchor>connectPath</anchor>
      <arglist>( const QPainterPath &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QPointF &amp; pt )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-2</anchor>
      <arglist>( const QRectF &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>controlPointRect</name>
      <anchor>controlPointRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cubicTo</name>
      <anchor>cubicTo</anchor>
      <arglist>( const QPointF &amp; c1, const QPointF &amp; c2, const QPointF &amp; endPoint )</arglist>
    </member>
    <member kind="function">
      <name>cubicTo</name>
      <anchor>cubicTo-2</anchor>
      <arglist>( qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y, qreal endPtx, qreal endPty )</arglist>
    </member>
    <member kind="function">
      <name>currentPosition</name>
      <anchor>currentPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Element</name>
      <anchor>elementAt</anchor>
      <arglist> &amp; QPainterPath::elementAt( int index )</arglist>
    </member>
    <member kind="function">
      <name>elementCount</name>
      <anchor>elementCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FillRule</name>
      <anchor>fillRule</anchor>
      <arglist> QPainterPath::fillRule()</arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>intersects</anchor>
      <arglist>( const QRectF &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineTo</name>
      <anchor>lineTo</anchor>
      <arglist>( const QPointF &amp; endPoint )</arglist>
    </member>
    <member kind="function">
      <name>lineTo</name>
      <anchor>lineTo-2</anchor>
      <arglist>( qreal x, qreal y )</arglist>
    </member>
    <member kind="function">
      <name>moveTo</name>
      <anchor>moveTo</anchor>
      <arglist>( const QPointF &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>moveTo</name>
      <anchor>moveTo-2</anchor>
      <arglist>( qreal x, qreal y )</arglist>
    </member>
    <member kind="function">
      <name>quadTo</name>
      <anchor>quadTo</anchor>
      <arglist>( const QPointF &amp; c, const QPointF &amp; endPoint )</arglist>
    </member>
    <member kind="function">
      <name>quadTo</name>
      <anchor>quadTo-2</anchor>
      <arglist>( qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty )</arglist>
    </member>
    <member kind="function">
      <name>setFillRule</name>
      <anchor>setFillRule</anchor>
      <arglist>( Qt::FillRule fillRule )</arglist>
    </member>
    <member kind="function">
      <name>toFillPolygon</name>
      <anchor>toFillPolygon</anchor>
      <arglist>( const QMatrix &amp; matrix = QMatrix()</arglist>
    </member>
    <member kind="function">
      <name>toFillPolygons</name>
      <anchor>toFillPolygons</anchor>
      <arglist>( const QMatrix &amp; matrix = QMatrix()</arglist>
    </member>
    <member kind="function">
      <name>toReversed</name>
      <anchor>toReversed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toSubpathPolygons</name>
      <anchor>toSubpathPolygons</anchor>
      <arglist>( const QMatrix &amp; matrix = QMatrix()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QPainterPath &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPainterPath &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QPainterPath &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>erased</name>
      <anchor>erased</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPaintEvent</name>
    <filename>qpaintevent.html</filename>
    <member kind="function">
      <name>QPaintEvent</name>
      <anchor>QPaintEvent</anchor>
      <arglist>( const QRegion &amp; paintRegion )</arglist>
    </member>
    <member kind="function">
      <name>QPaintEvent</name>
      <anchor>QPaintEvent-2</anchor>
      <arglist>( const QRect &amp; paintRect )</arglist>
    </member>
    <member kind="function">
      <name>QPaintEvent</name>
      <anchor>QPaintEvent-3</anchor>
      <arglist>( const QRegion &amp; paintRegion, const QRect &amp; paintRect )</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>region</name>
      <anchor>region</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPair</name>
    <filename>qpair.html</filename>
    <member kind="function">
      <name>first_type</name>
      <anchor>first_type-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>second_type</name>
      <anchor>second_type-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPair</name>
      <anchor>QPair</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPair</name>
      <anchor>QPair-2</anchor>
      <arglist>( const T1 &amp; value1, const T2 &amp; value2 )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPair &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-6</anchor>
      <arglist>( const QColor &amp; foreground, const QColor &amp; background, const QColor &amp; light, const QColor &amp; dark, const QColor &amp; mid, const QColor &amp; text, const QColor &amp; base )</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-7</anchor>
      <arglist>( const QColorGroup &amp; active, const QColorGroup &amp; disabled, const QColorGroup &amp; inactive )</arglist>
    </member>
    <member kind="function">
      <name>active</name>
      <anchor>active</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disabled</name>
      <anchor>disabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inactive</name>
      <anchor>inactive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>normal</name>
      <anchor>normal</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActive</name>
      <anchor>setActive</anchor>
      <arglist>( const QColorGroup &amp; colorGroup )</arglist>
    </member>
    <member kind="function">
      <name>setDisabled</name>
      <anchor>setDisabled</anchor>
      <arglist>( const QColorGroup &amp; colorGroup )</arglist>
    </member>
    <member kind="function">
      <name>setInactive</name>
      <anchor>setInactive</anchor>
      <arglist>( const QColorGroup &amp; colorGroup )</arglist>
    </member>
    <member kind="function">
      <name>setNormal</name>
      <anchor>setNormal</anchor>
      <arglist>( const QColorGroup &amp; colorGroup )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPalette</name>
    <filename>qpalette.html</filename>
    <member kind="enum">
      <name>ColorGroup</name>
      <anchor>ColorGroup-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ColorRole</name>
      <anchor>ColorRole-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-2</anchor>
      <arglist>( const QColor &amp; button )</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-3</anchor>
      <arglist>( Qt::GlobalColor button )</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-4</anchor>
      <arglist>( const QColor &amp; button, const QColor &amp; background )</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-5</anchor>
      <arglist>( const QBrush &amp; foreground, const QBrush &amp; button, const QBrush &amp; light, const QBrush &amp; dark, const QBrush &amp; mid, const QBrush &amp; text, const QBrush &amp; bright_text, const QBrush &amp; base, const QBrush &amp; background )</arglist>
    </member>
    <member kind="function">
      <name>QPalette</name>
      <anchor>QPalette-8</anchor>
      <arglist>( const QPalette &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>alternateBase</name>
      <anchor>alternateBase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>background</name>
      <anchor>background</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>base</name>
      <anchor>base</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>brightText</name>
      <anchor>brightText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>brush</name>
      <anchor>brush</anchor>
      <arglist>( ColorGroup gr, ColorRole cr )</arglist>
    </member>
    <member kind="function">
      <name>brush</name>
      <anchor>brush-2</anchor>
      <arglist>( ColorRole r )</arglist>
    </member>
    <member kind="function">
      <name>button</name>
      <anchor>button</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>buttonText</name>
      <anchor>buttonText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>( ColorGroup gr, ColorRole r )</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color-2</anchor>
      <arglist>( ColorRole r )</arglist>
    </member>
    <member kind="function">
      <name>currentColorGroup</name>
      <anchor>currentColorGroup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dark</name>
      <anchor>dark</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>foreground</name>
      <anchor>foreground</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlight</name>
      <anchor>highlight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>highlightedText</name>
      <anchor>highlightedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCopyOf</name>
      <anchor>isCopyOf</anchor>
      <arglist>( const QPalette &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>isEqual</name>
      <anchor>isEqual</anchor>
      <arglist>( ColorGroup cg1, ColorGroup cg2 )</arglist>
    </member>
    <member kind="function">
      <name>light</name>
      <anchor>light</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>link</name>
      <anchor>link</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>linkVisited</name>
      <anchor>linkVisited</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mid</name>
      <anchor>mid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>midlight</name>
      <anchor>midlight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resolve</name>
      <anchor>resolve</anchor>
      <arglist>( const QPalette &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>serialNumber</name>
      <anchor>serialNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBrush</name>
      <anchor>setBrush</anchor>
      <arglist>( ColorRole cr, const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>setBrush</name>
      <anchor>setBrush-2</anchor>
      <arglist>( ColorGroup cg, ColorRole cr, const QBrush &amp; b )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( ColorGroup gr, ColorRole r, const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor-2</anchor>
      <arglist>( ColorRole r, const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setColorGroup</name>
      <anchor>setColorGroup</anchor>
      <arglist>( ColorGroup cg, const QBrush &amp; foreground, const QBrush &amp; button, const QBrush &amp; light, const QBrush &amp; dark, const QBrush &amp; mid, const QBrush &amp; text, const QBrush &amp; bright_text, const QBrush &amp; base, const QBrush &amp; background )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentColorGroup</name>
      <anchor>setCurrentColorGroup</anchor>
      <arglist>( ColorGroup cg )</arglist>
    </member>
    <member kind="function">
      <name>shadow</name>
      <anchor>shadow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QPalette &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPalette &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QPalette &amp; p )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPen</name>
    <filename>qpen.html</filename>
    <member kind="function">
      <name>QPen</name>
      <anchor>QPen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPen</name>
      <anchor>QPen-2</anchor>
      <arglist>( Qt::PenStyle style )</arglist>
    </member>
    <member kind="function">
      <name>QPen</name>
      <anchor>QPen-3</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>QPen</name>
      <anchor>QPen-4</anchor>
      <arglist>( const QBrush &amp; brush, qreal width, Qt::PenStyle s = Qt::SolidLine, Qt::PenCapStyle c = Qt::SquareCap, Qt::PenJoinStyle j = Qt::BevelJoin )</arglist>
    </member>
    <member kind="function">
      <name>QPen</name>
      <anchor>QPen-5</anchor>
      <arglist>( const QPen &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>brush</name>
      <anchor>brush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PenCapStyle</name>
      <anchor>capStyle</anchor>
      <arglist> QPen::capStyle()</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSolid</name>
      <anchor>isSolid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PenJoinStyle</name>
      <anchor>joinStyle</anchor>
      <arglist> QPen::joinStyle()</arglist>
    </member>
    <member kind="function">
      <name>setBrush</name>
      <anchor>setBrush</anchor>
      <arglist>( const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>setCapStyle</name>
      <anchor>setCapStyle</anchor>
      <arglist>( Qt::PenCapStyle c )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setJoinStyle</name>
      <anchor>setJoinStyle</anchor>
      <arglist>( Qt::PenJoinStyle j )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle</anchor>
      <arglist>( Qt::PenStyle s )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( int width )</arglist>
    </member>
    <member kind="function">
      <name>setWidthF</name>
      <anchor>setWidthF</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>PenStyle</name>
      <anchor>style</anchor>
      <arglist> QPen::style()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widthF</name>
      <anchor>widthF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QPen &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPen &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QPen &amp; p )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPersistentModelIndex</name>
    <filename>qpersistentmodelindex.html</filename>
    <member kind="function">
      <name>QPersistentModelIndex</name>
      <anchor>QPersistentModelIndex-2</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>QPersistentModelIndex</name>
      <anchor>QPersistentModelIndex-3</anchor>
      <arglist>( const QPersistentModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>child</name>
      <anchor>child</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>column</name>
      <anchor>column</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sibling</name>
      <anchor>sibling</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-QModelIndex--and</anchor>
      <arglist> const QModelIndex &amp;()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QPersistentModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPersistentModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QPersistentModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const QModelIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPicture</name>
    <filename>qpicture.html</filename>
    <member kind="function">
      <name>QPicture</name>
      <anchor>QPicture</anchor>
      <arglist>( int formatVersion = -1 )</arglist>
    </member>
    <member kind="function">
      <name>QPicture</name>
      <anchor>QPicture-2</anchor>
      <arglist>( const QPicture &amp; pic )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inputFormatList</name>
      <anchor>inputFormatList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inputFormats</name>
      <anchor>inputFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load-2</anchor>
      <arglist>( QIODevice * dev, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>metric</name>
      <anchor>metric</anchor>
      <arglist>( PaintDeviceMetric m )</arglist>
    </member>
    <member kind="function">
      <name>outputFormatList</name>
      <anchor>outputFormatList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>outputFormats</name>
      <anchor>outputFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pictureFormat</name>
      <anchor>pictureFormat</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>play</name>
      <anchor>play</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save-2</anchor>
      <arglist>( QIODevice * dev, const char * format = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setBoundingRect</name>
      <anchor>setBoundingRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const char * data, uint size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPicture &amp; p )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPictureFormatPlugin</name>
    <filename>qpictureformatplugin.html</filename>
    <member kind="function">
      <name>QPictureFormatPlugin</name>
      <anchor>QPictureFormatPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>installIOHandler</name>
      <anchor>installIOHandler</anchor>
      <arglist>( const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPictureIO</name>
    <filename>qpictureio.html</filename>
    <member kind="function">
      <name>QPictureIO</name>
      <anchor>QPictureIO</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPictureIO</name>
      <anchor>QPictureIO-2</anchor>
      <arglist>( QIODevice * ioDevice, const char * format )</arglist>
    </member>
    <member kind="function">
      <name>QPictureIO</name>
      <anchor>QPictureIO-3</anchor>
      <arglist>( const QString &amp; fileName, const char * format )</arglist>
    </member>
    <member kind="function">
      <name>defineIOHandler</name>
      <anchor>defineIOHandler</anchor>
      <arglist>( const char * format, const char * header, const char * flags, picture_io_handler readPicture, picture_io_handler writePicture )</arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>description</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>gamma</name>
      <anchor>gamma</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inputFormats</name>
      <anchor>inputFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ioDevice</name>
      <anchor>ioDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>outputFormats</name>
      <anchor>outputFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parameters</name>
      <anchor>parameters</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>picture</name>
      <anchor>picture</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pictureFormat</name>
      <anchor>pictureFormat</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>pictureFormat</name>
      <anchor>pictureFormat-2</anchor>
      <arglist>( QIODevice * d )</arglist>
    </member>
    <member kind="function">
      <name>quality</name>
      <anchor>quality</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDescription</name>
      <anchor>setDescription</anchor>
      <arglist>( const QString &amp; description )</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const char * format )</arglist>
    </member>
    <member kind="function">
      <name>setGamma</name>
      <anchor>setGamma</anchor>
      <arglist>( float gamma )</arglist>
    </member>
    <member kind="function">
      <name>setIODevice</name>
      <anchor>setIODevice</anchor>
      <arglist>( QIODevice * ioDevice )</arglist>
    </member>
    <member kind="function">
      <name>setParameters</name>
      <anchor>setParameters</anchor>
      <arglist>( const char * parameters )</arglist>
    </member>
    <member kind="function">
      <name>setPicture</name>
      <anchor>setPicture</anchor>
      <arglist>( const QPicture &amp; picture )</arglist>
    </member>
    <member kind="function">
      <name>setQuality</name>
      <anchor>setQuality</anchor>
      <arglist>( int q )</arglist>
    </member>
    <member kind="function">
      <name>setStatus</name>
      <anchor>setStatus</anchor>
      <arglist>( int status )</arglist>
    </member>
    <member kind="function">
      <name>status</name>
      <anchor>status</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enum">
      <name>ColorMode</name>
      <anchor>ColorMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-6</anchor>
      <arglist>( const QString &amp; fileName, const char * format, ColorMode mode )</arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-7</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
    <member kind="function">
      <name>convertFromImage</name>
      <anchor>convertFromImage</anchor>
      <arglist>( const QImage &amp; image, ColorMode mode )</arglist>
    </member>
    <member kind="function">
      <name>convertFromImage</name>
      <anchor>convertFromImage-2</anchor>
      <arglist>( const QImage &amp; image, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>convertToImage</name>
      <anchor>convertToImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load-2</anchor>
      <arglist>( const QString &amp; fileName, const char * format, ColorMode mode )</arglist>
    </member>
    <member kind="function">
      <name>loadFromData</name>
      <anchor>loadFromData-2</anchor>
      <arglist>( const uchar * buf, uint len, const char * format, ColorMode mode )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize-2</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>selfMask</name>
      <anchor>selfMask</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xForm</name>
      <anchor>xForm</anchor>
      <arglist>( const QMatrix &amp; matrix )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QImage</anchor>
      <arglist> QImage()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( const QImage &amp; image )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPixmap</name>
    <filename>qpixmap.html</filename>
    <member kind="enum">
      <name>HBitmapFormat</name>
      <anchor>HBitmapFormat-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-2</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-3</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-4</anchor>
      <arglist>( const char * const[] xpm )</arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-5</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>QPixmap</name>
      <anchor>QPixmap-9</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>alphaChannel</name>
      <anchor>alphaChannel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>( const QRect &amp; rect = QRect()</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy-2</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>createHeuristicMask</name>
      <anchor>createHeuristicMask</anchor>
      <arglist>( bool clipTight = true )</arglist>
    </member>
    <member kind="function">
      <name>createMaskFromColor</name>
      <anchor>createMaskFromColor</anchor>
      <arglist>( const QColor &amp; maskColor )</arglist>
    </member>
    <member kind="function">
      <name>defaultDepth</name>
      <anchor>defaultDepth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>detach</name>
      <anchor>detach</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( const QColor &amp; fillColor = Qt::white )</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill-2</anchor>
      <arglist>( const QWidget * widget, const QPoint &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill-3</anchor>
      <arglist>( const QWidget * widget, int xoff, int yoff )</arglist>
    </member>
    <member kind="function">
      <name>fromImage</name>
      <anchor>fromImage</anchor>
      <arglist>( const QImage &amp; img, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>fromWinHBITMAP</name>
      <anchor>fromWinHBITMAP</anchor>
      <arglist>( HBITMAP bitmap, HBitmapFormat format = NoAlpha )</arglist>
    </member>
    <member kind="function">
      <name>grabWidget</name>
      <anchor>grabWidget</anchor>
      <arglist>( QWidget * widget, int x = 0, int y = 0, int w = -1, int h = -1 )</arglist>
    </member>
    <member kind="function">
      <name>grabWidget</name>
      <anchor>grabWidget-2</anchor>
      <arglist>( QWidget * widget, const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>grabWindow</name>
      <anchor>grabWindow</anchor>
      <arglist>( WId window, int x = 0, int y = 0, int w = -1, int h = -1 )</arglist>
    </member>
    <member kind="function">
      <name>hasAlpha</name>
      <anchor>hasAlpha</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasAlphaChannel</name>
      <anchor>hasAlphaChannel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isQBitmap</name>
      <anchor>isQBitmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>( const QString &amp; fileName, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>loadFromData</name>
      <anchor>loadFromData</anchor>
      <arglist>( const uchar * buf, uint len, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>loadFromData</name>
      <anchor>loadFromData-3</anchor>
      <arglist>( const QByteArray &amp; buf, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )</arglist>
    </member>
    <member kind="function">
      <name>mask</name>
      <anchor>mask</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>metric</name>
      <anchor>metric</anchor>
      <arglist>( PaintDeviceMetric m )</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>( const QString &amp; fileName, const char * format, int quality = -1 )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save-2</anchor>
      <arglist>( QIODevice * device, const char * format, int quality = -1 )</arglist>
    </member>
    <member kind="function">
      <name>scaled</name>
      <anchor>scaled</anchor>
      <arglist>( int w, int h, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scaled</name>
      <anchor>scaled-2</anchor>
      <arglist>( const QSize &amp; size, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scaledToHeight</name>
      <anchor>scaledToHeight</anchor>
      <arglist>( int h, Qt::TransformationMode mode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>scaledToWidth</name>
      <anchor>scaledToWidth</anchor>
      <arglist>( int w, Qt::TransformationMode mode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>serialNumber</name>
      <anchor>serialNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlphaChannel</name>
      <anchor>setAlphaChannel</anchor>
      <arglist>( const QPixmap &amp; alpha )</arglist>
    </member>
    <member kind="function">
      <name>setMask</name>
      <anchor>setMask</anchor>
      <arglist>( const QBitmap &amp; newmask )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toImage</name>
      <anchor>toImage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toWinHBITMAP</name>
      <anchor>toWinHBITMAP</anchor>
      <arglist>( HBitmapFormat format = NoAlpha )</arglist>
    </member>
    <member kind="function">
      <name>transformed</name>
      <anchor>transformed</anchor>
      <arglist>( const QMatrix &amp; matrix, Qt::TransformationMode mode = Qt::FastTransformation )</arglist>
    </member>
    <member kind="function">
      <name>trueMatrix</name>
      <anchor>trueMatrix</anchor>
      <arglist>( const QMatrix &amp; m, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x11Info</name>
      <anchor>x11Info</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>x11PictureHandle</anchor>
      <arglist> QPixmap::x11PictureHandle()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!</name>
      <anchor>operator-not</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPixmapCache</name>
    <filename>qpixmapcache.html</filename>
    <member kind="function">
      <name>cacheLimit</name>
      <anchor>cacheLimit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; key, QPixmap &amp; pm )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; key, const QPixmap &amp; pm )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setCacheLimit</name>
      <anchor>setCacheLimit</anchor>
      <arglist>( int n )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPlastiqueStyle</name>
    <filename>qplastiquestyle.html</filename>
    <member kind="function">
      <name>QPlastiqueStyle</name>
      <anchor>QPlastiqueStyle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unpolish</name>
      <anchor>unpolish-2</anchor>
      <arglist>( QApplication * app )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPluginLoader</name>
    <filename>qpluginloader.html</filename>
    <member kind="function">
      <name>QPluginLoader</name>
      <anchor>QPluginLoader</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QPluginLoader</name>
      <anchor>QPluginLoader-2</anchor>
      <arglist>( const QString &amp; fileName, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>instance</name>
      <anchor>instance</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isLoaded</name>
      <anchor>isLoaded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>staticInstances</name>
      <anchor>staticInstances</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unload</name>
      <anchor>unload</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPoint</name>
    <filename>qpoint.html</filename>
    <member kind="function">
      <name>QPoint</name>
      <anchor>QPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPoint</name>
      <anchor>QPoint-2</anchor>
      <arglist>( int xpos, int ypos )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>manhattanLength</name>
      <anchor>manhattanLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rx</name>
      <anchor>rx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ry</name>
      <anchor>ry</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setX</name>
      <anchor>setX</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>setY</name>
      <anchor>setY</anchor>
      <arglist>( int y )</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*=</name>
      <anchor>operator-2a-eq</anchor>
      <arglist>( qreal c )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>operator-2f-eq</anchor>
      <arglist>( qreal c )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPointer</name>
    <filename>qpointer.html</filename>
    <member kind="function">
      <name>QPointer</name>
      <anchor>QPointer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPointer</name>
      <anchor>QPointer-2</anchor>
      <arglist>( T * p )</arglist>
    </member>
    <member kind="function">
      <name>QPointer</name>
      <anchor>QPointer-3</anchor>
      <arglist>( const QPointer&lt;T&gt; &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-T--2a</anchor>
      <arglist> T *()</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QPointer&lt;T&gt; &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( T * p )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPointF</name>
    <filename>qpointf.html</filename>
    <member kind="function">
      <name>QPointF</name>
      <anchor>QPointF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPointF</name>
      <anchor>QPointF-2</anchor>
      <arglist>( const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>QPointF</name>
      <anchor>QPointF-3</anchor>
      <arglist>( qreal x, qreal y )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rx</name>
      <anchor>rx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ry</name>
      <anchor>ry</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setX</name>
      <anchor>setX</anchor>
      <arglist>( qreal x )</arglist>
    </member>
    <member kind="function">
      <name>setY</name>
      <anchor>setY</anchor>
      <arglist>( qreal y )</arglist>
    </member>
    <member kind="function">
      <name>toPoint</name>
      <anchor>toPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*=</name>
      <anchor>operator-2a-eq</anchor>
      <arglist>( qreal factor )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QPointF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( const QPointF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>operator-2f-eq</anchor>
      <arglist>( qreal factor )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPolygon</name>
    <filename>qpolygon.html</filename>
    <member kind="function">
      <name>QPolygon</name>
      <anchor>QPolygon</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPolygon</name>
      <anchor>QPolygon-2</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>QPolygon</name>
      <anchor>QPolygon-3</anchor>
      <arglist>( const QPolygon &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>QPolygon</name>
      <anchor>QPolygon-4</anchor>
      <arglist>( const QVector&lt;QPoint&gt; &amp; pts )</arglist>
    </member>
    <member kind="function">
      <name>QPolygon</name>
      <anchor>QPolygon-5</anchor>
      <arglist>( const QRect &amp; r, bool closed = false )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>point</name>
      <anchor>point</anchor>
      <arglist>( int index, int * x, int * y )</arglist>
    </member>
    <member kind="function">
      <name>point</name>
      <anchor>point-2</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>putPoints</name>
      <anchor>putPoints</anchor>
      <arglist>( int index, int nPoints, int firstx, int firsty, ... )</arglist>
    </member>
    <member kind="function">
      <name>putPoints</name>
      <anchor>putPoints-3</anchor>
      <arglist>( int index, int nPoints, const QPolygon &amp; from, int fromIndex = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setPoint</name>
      <anchor>setPoint</anchor>
      <arglist>( int index, int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>setPoint</name>
      <anchor>setPoint-2</anchor>
      <arglist>( int i, const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setPoints</name>
      <anchor>setPoints</anchor>
      <arglist>( int nPoints, const int * points )</arglist>
    </member>
    <member kind="function">
      <name>setPoints</name>
      <anchor>setPoints-2</anchor>
      <arglist>( int nPoints, int firstx, int firsty, ... )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( const QPoint &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPolygonF</name>
    <filename>qpolygonf.html</filename>
    <member kind="function">
      <name>QPolygonF</name>
      <anchor>QPolygonF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QPolygonF</name>
      <anchor>QPolygonF-2</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>QPolygonF</name>
      <anchor>QPolygonF-3</anchor>
      <arglist>( const QPolygonF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QPolygonF</name>
      <anchor>QPolygonF-4</anchor>
      <arglist>( const QVector&lt;QPointF&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>QPolygonF</name>
      <anchor>QPolygonF-5</anchor>
      <arglist>( const QRectF &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>QPolygonF</name>
      <anchor>QPolygonF-6</anchor>
      <arglist>( const QPolygon &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isClosed</name>
      <anchor>isClosed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toPolygon</name>
      <anchor>toPolygon</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( const QPointF &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( qreal dx, qreal dy )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPrintEngine</name>
    <filename>qprintengine.html</filename>
    <member kind="enum">
      <name>PrintEnginePropertyKey</name>
      <anchor>PrintEnginePropertyKey-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>metric</name>
      <anchor>metric</anchor>
      <arglist>( QPaintDevice::PaintDeviceMetric id )</arglist>
    </member>
    <member kind="function">
      <name>newPage</name>
      <anchor>newPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PrinterState</name>
      <anchor>printerState</anchor>
      <arglist> QPrintEngine::printerState()</arglist>
    </member>
    <member kind="function">
      <name>property</name>
      <anchor>property</anchor>
      <arglist>( PrintEnginePropertyKey key )</arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>setProperty</anchor>
      <arglist>( PrintEnginePropertyKey key, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>aborted</name>
      <anchor>aborted</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromPage</name>
      <anchor>fromPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOptionEnabled</name>
      <anchor>isOptionEnabled</anchor>
      <arglist>( PrinterOption option )</arglist>
    </member>
    <member kind="function">
      <name>margins</name>
      <anchor>margins</anchor>
      <arglist>( uint * top, uint * left, uint * bottom, uint * right )</arglist>
    </member>
    <member kind="function">
      <name>margins</name>
      <anchor>margins-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maxPage</name>
      <anchor>maxPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minPage</name>
      <anchor>minPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>outputToFile</name>
      <anchor>outputToFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageSetup</name>
      <anchor>pageSetup</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>printRange</name>
      <anchor>printRange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>printSetup</name>
      <anchor>printSetup</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setFromTo</name>
      <anchor>setFromTo</anchor>
      <arglist>( int from, int to )</arglist>
    </member>
    <member kind="function">
      <name>setMinMax</name>
      <anchor>setMinMax</anchor>
      <arglist>( int minPage, int maxPage )</arglist>
    </member>
    <member kind="function">
      <name>setOptionEnabled</name>
      <anchor>setOptionEnabled</anchor>
      <arglist>( PrinterOption option, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setOutputToFile</name>
      <anchor>setOutputToFile</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setPrintRange</name>
      <anchor>setPrintRange</anchor>
      <arglist>( PrintRange range )</arglist>
    </member>
    <member kind="function">
      <name>setup</name>
      <anchor>setup</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toPage</name>
      <anchor>toPage</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPrinter</name>
    <filename>qprinter.html</filename>
    <member kind="enum">
      <name>ColorMode</name>
      <anchor>ColorMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Orientation</name>
      <anchor>Orientation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PageOrder</name>
      <anchor>PageOrder-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PageSize</name>
      <anchor>PageSize-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PaperSource</name>
      <anchor>PaperSource-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PrintRange</name>
      <anchor>PrintRange-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PrinterMode</name>
      <anchor>PrinterMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PrinterOption</name>
      <anchor>PrinterOption-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PrinterState</name>
      <anchor>PrinterState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QPrinter</name>
      <anchor>QPrinter</anchor>
      <arglist>( PrinterMode mode = ScreenResolution )</arglist>
    </member>
    <member kind="function">
      <name>abort</name>
      <anchor>abort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>colorMode</name>
      <anchor>colorMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>creator</name>
      <anchor>creator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>devType</name>
      <anchor>devType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>docName</name>
      <anchor>docName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fullPage</name>
      <anchor>fullPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newPage</name>
      <anchor>newPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numCopies</name>
      <anchor>numCopies</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>orientation</name>
      <anchor>orientation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>outputFileName</name>
      <anchor>outputFileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageOrder</name>
      <anchor>pageOrder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageRect</name>
      <anchor>pageRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pageSize</name>
      <anchor>pageSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEngine</name>
      <anchor>paintEngine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paperRect</name>
      <anchor>paperRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paperSource</name>
      <anchor>paperSource</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>printProgram</name>
      <anchor>printProgram</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>printerName</name>
      <anchor>printerName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>printerState</name>
      <anchor>printerState</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resolution</name>
      <anchor>resolution</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColorMode</name>
      <anchor>setColorMode</anchor>
      <arglist>( ColorMode newColorMode )</arglist>
    </member>
    <member kind="function">
      <name>setCreator</name>
      <anchor>setCreator</anchor>
      <arglist>( const QString &amp; creator )</arglist>
    </member>
    <member kind="function">
      <name>setDocName</name>
      <anchor>setDocName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setFullPage</name>
      <anchor>setFullPage</anchor>
      <arglist>( bool fp )</arglist>
    </member>
    <member kind="function">
      <name>setNumCopies</name>
      <anchor>setNumCopies</anchor>
      <arglist>( int numCopies )</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>setOrientation</anchor>
      <arglist>( Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>setOutputFileName</name>
      <anchor>setOutputFileName</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>setPageOrder</name>
      <anchor>setPageOrder</anchor>
      <arglist>( PageOrder pageOrder )</arglist>
    </member>
    <member kind="function">
      <name>setPageSize</name>
      <anchor>setPageSize</anchor>
      <arglist>( PageSize newPageSize )</arglist>
    </member>
    <member kind="function">
      <name>setPaperSource</name>
      <anchor>setPaperSource</anchor>
      <arglist>( PaperSource source )</arglist>
    </member>
    <member kind="function">
      <name>setPrintProgram</name>
      <anchor>setPrintProgram</anchor>
      <arglist>( const QString &amp; printProg )</arglist>
    </member>
    <member kind="function">
      <name>setPrinterName</name>
      <anchor>setPrinterName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setResolution</name>
      <anchor>setResolution</anchor>
      <arglist>( int dpi )</arglist>
    </member>
    <member kind="function">
      <name>setWinPageSize</name>
      <anchor>setWinPageSize</anchor>
      <arglist>( int pageSize )</arglist>
    </member>
    <member kind="function">
      <name>supportedResolutions</name>
      <anchor>supportedResolutions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>winPageSize</name>
      <anchor>winPageSize</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QProcess</name>
    <filename>qprocess.html</filename>
    <member kind="enum">
      <name>ProcessChannel</name>
      <anchor>ProcessChannel-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ProcessChannelMode</name>
      <anchor>ProcessChannelMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ProcessError</name>
      <anchor>ProcessError-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ProcessState</name>
      <anchor>ProcessState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QProcess</name>
      <anchor>QProcess</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeReadChannel</name>
      <anchor>closeReadChannel</anchor>
      <arglist>( ProcessChannel channel )</arglist>
    </member>
    <member kind="function">
      <name>closeWriteChannel</name>
      <anchor>closeWriteChannel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>environment</name>
      <anchor>environment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ProcessError</name>
      <anchor>error</anchor>
      <arglist> QProcess::error()</arglist>
    </member>
    <member kind="function">
      <name>error</name>
      <anchor>error-2</anchor>
      <arglist>( ProcessError error )</arglist>
    </member>
    <member kind="function">
      <name>execute</name>
      <anchor>execute</anchor>
      <arglist>( const QString &amp; program, const QStringList &amp; arguments )</arglist>
    </member>
    <member kind="function">
      <name>execute</name>
      <anchor>execute-2</anchor>
      <arglist>( const QString &amp; program )</arglist>
    </member>
    <member kind="function">
      <name>exitCode</name>
      <anchor>exitCode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished</anchor>
      <arglist>( int exitCode )</arglist>
    </member>
    <member kind="function">
      <name>pid</name>
      <anchor>pid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readAllStandardError</name>
      <anchor>readAllStandardError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readAllStandardOutput</name>
      <anchor>readAllStandardOutput</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readChannel</name>
      <anchor>readChannel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readChannelMode</name>
      <anchor>readChannelMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readyReadStandardError</name>
      <anchor>readyReadStandardError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readyReadStandardOutput</name>
      <anchor>readyReadStandardOutput</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEnvironment</name>
      <anchor>setEnvironment</anchor>
      <arglist>( const QStringList &amp; environment )</arglist>
    </member>
    <member kind="function">
      <name>setProcessState</name>
      <anchor>setProcessState</anchor>
      <arglist>( ProcessState state )</arglist>
    </member>
    <member kind="function">
      <name>setReadChannel</name>
      <anchor>setReadChannel</anchor>
      <arglist>( ProcessChannel channel )</arglist>
    </member>
    <member kind="function">
      <name>setReadChannelMode</name>
      <anchor>setReadChannelMode</anchor>
      <arglist>( ProcessChannelMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setWorkingDirectory</name>
      <anchor>setWorkingDirectory</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>setupChildProcess</name>
      <anchor>setupChildProcess</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( const QString &amp; program, const QStringList &amp; arguments, OpenMode mode = ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start-2</anchor>
      <arglist>( const QString &amp; program, OpenMode mode = ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>startDetached</name>
      <anchor>startDetached</anchor>
      <arglist>( const QString &amp; program, const QStringList &amp; arguments )</arglist>
    </member>
    <member kind="function">
      <name>startDetached</name>
      <anchor>startDetached-2</anchor>
      <arglist>( const QString &amp; program )</arglist>
    </member>
    <member kind="function">
      <name>started</name>
      <anchor>started</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ProcessState</name>
      <anchor>state</anchor>
      <arglist> QProcess::state()</arglist>
    </member>
    <member kind="function">
      <name>stateChanged</name>
      <anchor>stateChanged</anchor>
      <arglist>( ProcessState newState )</arglist>
    </member>
    <member kind="function">
      <name>terminate</name>
      <anchor>terminate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>waitForFinished</name>
      <anchor>waitForFinished</anchor>
      <arglist>( int msecs = 30000 )</arglist>
    </member>
    <member kind="function">
      <name>waitForStarted</name>
      <anchor>waitForStarted</anchor>
      <arglist>( int msecs = 30000 )</arglist>
    </member>
    <member kind="function">
      <name>workingDirectory</name>
      <anchor>workingDirectory</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QProgressBar</name>
    <filename>qprogressbar.html</filename>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QProgressBar</name>
      <anchor>QProgressBar</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( int minimum, int maximum )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( int value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QProgressDialog</name>
    <filename>qprogressdialog.html</filename>
    <member kind="function">
      <name>QProgressDialog</name>
      <anchor>QProgressDialog</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QProgressDialog</name>
      <anchor>QProgressDialog-2</anchor>
      <arglist>( const QString &amp; labelText, const QString &amp; cancelButtonText, int minimum, int maximum, QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>cancel</name>
      <anchor>cancel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canceled</name>
      <anchor>canceled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>forceShow</name>
      <anchor>forceShow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBar</name>
      <anchor>setBar</anchor>
      <arglist>( QProgressBar * bar )</arglist>
    </member>
    <member kind="function">
      <name>setCancelButton</name>
      <anchor>setCancelButton</anchor>
      <arglist>( QPushButton * cancelButton )</arglist>
    </member>
    <member kind="function">
      <name>setCancelButtonText</name>
      <anchor>setCancelButtonText</anchor>
      <arglist>( const QString &amp; cancelButtonText )</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel</anchor>
      <arglist>( QLabel * label )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( int minimum, int maximum )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QProxyModel</name>
    <filename>qproxymodel.html</filename>
    <member kind="function">
      <name>QProxyModel</name>
      <anchor>QProxyModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>columnCount</name>
      <anchor>columnCount</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QModelIndex &amp; index, int role )</arglist>
    </member>
    <member kind="function">
      <name>dropMimeData</name>
      <anchor>dropMimeData</anchor>
      <arglist>( const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>fetchMore</name>
      <anchor>fetchMore</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QProxyModel::flags( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>hasChildren</name>
      <anchor>hasChildren</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>headerData</name>
      <anchor>headerData</anchor>
      <arglist>( int section, Qt::Orientation orientation, int role )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>insertColumns</name>
      <anchor>insertColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>match</name>
      <anchor>match</anchor>
      <arglist>( const QModelIndex &amp; start, int role, const QVariant &amp; value, int hits, QAbstractItemModel::MatchFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( const QModelIndexList &amp; indexes )</arglist>
    </member>
    <member kind="function">
      <name>mimeTypes</name>
      <anchor>mimeTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>model</name>
      <anchor>model</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>( const QModelIndex &amp; child )</arglist>
    </member>
    <member kind="function">
      <name>revert</name>
      <anchor>revert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowCount</name>
      <anchor>rowCount</anchor>
      <arglist>( const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role )</arglist>
    </member>
    <member kind="function">
      <name>setHeaderData</name>
      <anchor>setHeaderData</anchor>
      <arglist>( int section, Qt::Orientation orientation, const QVariant &amp; value, int role )</arglist>
    </member>
    <member kind="function">
      <name>setModel</name>
      <anchor>setModel</anchor>
      <arglist>( QAbstractItemModel * model )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>( int column, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>span</name>
      <anchor>span</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>submit</name>
      <anchor>submit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>supportedDropActions</anchor>
      <arglist> QProxyModel::supportedDropActions()</arglist>
    </member>
    <member kind="function">
      <name>QPushButton</name>
      <anchor>QPushButton-4</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QPushButton</name>
      <anchor>QPushButton-5</anchor>
      <arglist>( const QString &amp; text, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QPushButton</name>
      <anchor>QPushButton-6</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>isMenuButton</name>
      <anchor>isMenuButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openPopup</name>
      <anchor>openPopup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>popup</name>
      <anchor>popup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPopup</name>
      <anchor>setPopup</anchor>
      <arglist>( QMenu * popup )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QPushButton</name>
    <filename>qpushbutton.html</filename>
    <member kind="function">
      <name>QPushButton</name>
      <anchor>QPushButton</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QPushButton</name>
      <anchor>QPushButton-2</anchor>
      <arglist>( const QString &amp; text, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QPushButton</name>
      <anchor>QPushButton-3</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>menu</name>
      <anchor>menu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMenu</name>
      <anchor>setMenu</anchor>
      <arglist>( QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>showMenu</name>
      <anchor>showMenu</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QQueue</name>
    <filename>qqueue.html</filename>
    <member kind="function">
      <name>QQueue</name>
      <anchor>QQueue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dequeue</name>
      <anchor>dequeue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enqueue</name>
      <anchor>enqueue</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>head</name>
      <anchor>head</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>head</name>
      <anchor>head-2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRadialGradient</name>
    <filename>qradialgradient.html</filename>
    <member kind="function">
      <name>QRadialGradient</name>
      <anchor>QRadialGradient</anchor>
      <arglist>( const QPointF &amp; center, qreal radius, const QPointF &amp; focalPoint = QPointF()</arglist>
    </member>
    <member kind="function">
      <name>QRadialGradient</name>
      <anchor>QRadialGradient-2</anchor>
      <arglist>( qreal cx, qreal cy, qreal radius, qreal fx = 0, qreal fy = 0 )</arglist>
    </member>
    <member kind="function">
      <name>center</name>
      <anchor>center</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focalPoint</name>
      <anchor>focalPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>radius</name>
      <anchor>radius</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QRadioButton</name>
      <anchor>QRadioButton-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QRadioButton</name>
      <anchor>QRadioButton-4</anchor>
      <arglist>( const QString &amp; text, QWidget * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRadioButton</name>
    <filename>qradiobutton.html</filename>
    <member kind="function">
      <name>QRadioButton</name>
      <anchor>QRadioButton</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QRadioButton</name>
      <anchor>QRadioButton-2</anchor>
      <arglist>( const QString &amp; text, QWidget * parent = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QReadLocker</name>
    <filename>qreadlocker.html</filename>
    <member kind="function">
      <name>QReadLocker</name>
      <anchor>QReadLocker</anchor>
      <arglist>( QReadWriteLock * lock )</arglist>
    </member>
    <member kind="function">
      <name>readWriteLock</name>
      <anchor>readWriteLock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>relock</name>
      <anchor>relock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unlock</name>
      <anchor>unlock</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QReadWriteLock</name>
    <filename>qreadwritelock.html</filename>
    <member kind="function">
      <name>QReadWriteLock</name>
      <anchor>QReadWriteLock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lockForRead</name>
      <anchor>lockForRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lockForWrite</name>
      <anchor>lockForWrite</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tryLockForRead</name>
      <anchor>tryLockForRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tryLockForWrite</name>
      <anchor>tryLockForWrite</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unlock</name>
      <anchor>unlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addCoords</name>
      <anchor>addCoords</anchor>
      <arglist>( int xp1, int yp1, int xp2, int yp2 )</arglist>
    </member>
    <member kind="function">
      <name>coords</name>
      <anchor>coords</anchor>
      <arglist>( int * xp1, int * yp1, int * xp2, int * yp2 )</arglist>
    </member>
    <member kind="function">
      <name>moveBy</name>
      <anchor>moveBy</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>moveBy</name>
      <anchor>moveBy-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>normalize</name>
      <anchor>normalize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>normalized</name>
      <anchor>normalized</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rBottom</name>
      <anchor>rBottom</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rLeft</name>
      <anchor>rLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rRight</name>
      <anchor>rRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rTop</name>
      <anchor>rTop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>( int * x, int * y, int * w, int * h )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRect</name>
    <filename>qrect.html</filename>
    <member kind="function">
      <name>QRect</name>
      <anchor>QRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QRect</name>
      <anchor>QRect-2</anchor>
      <arglist>( const QPoint &amp; topLeft, const QPoint &amp; bottomRight )</arglist>
    </member>
    <member kind="function">
      <name>QRect</name>
      <anchor>QRect-3</anchor>
      <arglist>( const QPoint &amp; topLeft, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>QRect</name>
      <anchor>QRect-4</anchor>
      <arglist>( int left, int top, int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>adjust</name>
      <anchor>adjust</anchor>
      <arglist>( int xp1, int yp1, int xp2, int yp2 )</arglist>
    </member>
    <member kind="function">
      <name>adjusted</name>
      <anchor>adjusted</anchor>
      <arglist>( int xp1, int yp1, int xp2, int yp2 )</arglist>
    </member>
    <member kind="function">
      <name>bottom</name>
      <anchor>bottom</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomLeft</name>
      <anchor>bottomLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomRight</name>
      <anchor>bottomRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>center</name>
      <anchor>center</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QPoint &amp; p, bool proper = false )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-2</anchor>
      <arglist>( int x, int y, bool proper )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-3</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-4</anchor>
      <arglist>( const QRect &amp; r, bool proper = false )</arglist>
    </member>
    <member kind="function">
      <name>getCoords</name>
      <anchor>getCoords</anchor>
      <arglist>( int * xp1, int * yp1, int * xp2, int * yp2 )</arglist>
    </member>
    <member kind="function">
      <name>getRect</name>
      <anchor>getRect</anchor>
      <arglist>( int * x, int * y, int * w, int * h )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intersect</name>
      <anchor>intersect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>intersects</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>left</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveBottom</name>
      <anchor>moveBottom</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>moveBottomLeft</name>
      <anchor>moveBottomLeft</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveBottomRight</name>
      <anchor>moveBottomRight</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveCenter</name>
      <anchor>moveCenter</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveLeft</name>
      <anchor>moveLeft</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>moveRight</name>
      <anchor>moveRight</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>moveTo</name>
      <anchor>moveTo</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>moveTo</name>
      <anchor>moveTo-2</anchor>
      <arglist>( const QPoint &amp; pt )</arglist>
    </member>
    <member kind="function">
      <name>moveTop</name>
      <anchor>moveTop</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>moveTopLeft</name>
      <anchor>moveTopLeft</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveTopRight</name>
      <anchor>moveTopRight</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>right</name>
      <anchor>right</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBottom</name>
      <anchor>setBottom</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>setBottomLeft</name>
      <anchor>setBottomLeft</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setBottomRight</name>
      <anchor>setBottomRight</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setCoords</name>
      <anchor>setCoords</anchor>
      <arglist>( int xp1, int yp1, int xp2, int yp2 )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( int h )</arglist>
    </member>
    <member kind="function">
      <name>setLeft</name>
      <anchor>setLeft</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>setRect</name>
      <anchor>setRect</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>setRight</name>
      <anchor>setRight</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( const QSize &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setTop</name>
      <anchor>setTop</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>setTopLeft</name>
      <anchor>setTopLeft</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setTopRight</name>
      <anchor>setTopRight</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>setX</name>
      <anchor>setX</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>setY</name>
      <anchor>setY</anchor>
      <arglist>( int y )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topLeft</name>
      <anchor>topLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topRight</name>
      <anchor>topRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>translated</name>
      <anchor>translated</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>translated</name>
      <anchor>translated-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>unite</name>
      <anchor>unite</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and</anchor>
      <arglist>amp;( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and-eq</anchor>
      <arglist>amp;=( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator|</name>
      <anchor>operator-7c</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>operator-7c-eq</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRectF</name>
    <filename>qrectf.html</filename>
    <member kind="function">
      <name>QRectF</name>
      <anchor>QRectF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QRectF</name>
      <anchor>QRectF-2</anchor>
      <arglist>( const QPointF &amp; topLeft, const QSizeF &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>QRectF</name>
      <anchor>QRectF-3</anchor>
      <arglist>( qreal x, qreal y, qreal width, qreal height )</arglist>
    </member>
    <member kind="function">
      <name>QRectF</name>
      <anchor>QRectF-4</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>adjust</name>
      <anchor>adjust</anchor>
      <arglist>( qreal xp1, qreal yp1, qreal xp2, qreal yp2 )</arglist>
    </member>
    <member kind="function">
      <name>adjusted</name>
      <anchor>adjusted</anchor>
      <arglist>( qreal xp1, qreal yp1, qreal xp2, qreal yp2 )</arglist>
    </member>
    <member kind="function">
      <name>bottom</name>
      <anchor>bottom</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomLeft</name>
      <anchor>bottomLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bottomRight</name>
      <anchor>bottomRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>center</name>
      <anchor>center</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QPointF &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-2</anchor>
      <arglist>( qreal x, qreal y )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-3</anchor>
      <arglist>( const QRectF &amp; rectangle )</arglist>
    </member>
    <member kind="function">
      <name>getCoords</name>
      <anchor>getCoords</anchor>
      <arglist>( qreal * xp1, qreal * yp1, qreal * xp2, qreal * yp2 )</arglist>
    </member>
    <member kind="function">
      <name>getRect</name>
      <anchor>getRect</anchor>
      <arglist>( qreal * x, qreal * y, qreal * w, qreal * h )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intersect</name>
      <anchor>intersect</anchor>
      <arglist>( const QRectF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>intersects</name>
      <anchor>intersects</anchor>
      <arglist>( const QRectF &amp; rectangle )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>left</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveBottom</name>
      <anchor>moveBottom</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>moveBottomLeft</name>
      <anchor>moveBottomLeft</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveBottomRight</name>
      <anchor>moveBottomRight</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveCenter</name>
      <anchor>moveCenter</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveLeft</name>
      <anchor>moveLeft</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>moveRight</name>
      <anchor>moveRight</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>moveTo</name>
      <anchor>moveTo</anchor>
      <arglist>( qreal x, qreal y )</arglist>
    </member>
    <member kind="function">
      <name>moveTo</name>
      <anchor>moveTo-2</anchor>
      <arglist>( const QPointF &amp; pt )</arglist>
    </member>
    <member kind="function">
      <name>moveTop</name>
      <anchor>moveTop</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>moveTopLeft</name>
      <anchor>moveTopLeft</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>moveTopRight</name>
      <anchor>moveTopRight</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>normalized</name>
      <anchor>normalized</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>right</name>
      <anchor>right</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBottom</name>
      <anchor>setBottom</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>setBottomLeft</name>
      <anchor>setBottomLeft</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setBottomRight</name>
      <anchor>setBottomRight</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setCoords</name>
      <anchor>setCoords</anchor>
      <arglist>( qreal xp1, qreal yp1, qreal xp2, qreal yp2 )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( qreal height )</arglist>
    </member>
    <member kind="function">
      <name>setLeft</name>
      <anchor>setLeft</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>setRect</name>
      <anchor>setRect</anchor>
      <arglist>( qreal x, qreal y, qreal width, qreal height )</arglist>
    </member>
    <member kind="function">
      <name>setRight</name>
      <anchor>setRight</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( const QSizeF &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>setTop</name>
      <anchor>setTop</anchor>
      <arglist>( qreal pos )</arglist>
    </member>
    <member kind="function">
      <name>setTopLeft</name>
      <anchor>setTopLeft</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setTopRight</name>
      <anchor>setTopRight</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>setX</name>
      <anchor>setX</anchor>
      <arglist>( qreal x )</arglist>
    </member>
    <member kind="function">
      <name>setY</name>
      <anchor>setY</anchor>
      <arglist>( qreal y )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toRect</name>
      <anchor>toRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topLeft</name>
      <anchor>topLeft</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topRight</name>
      <anchor>topRight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>translated</name>
      <anchor>translated</anchor>
      <arglist>( qreal dx, qreal dy )</arglist>
    </member>
    <member kind="function">
      <name>translated</name>
      <anchor>translated-2</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>unite</name>
      <anchor>unite</anchor>
      <arglist>( const QRectF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and</anchor>
      <arglist>amp;( const QRectF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and-eq</anchor>
      <arglist>amp;=( const QRectF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator|</name>
      <anchor>operator-7c</anchor>
      <arglist>( const QRectF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>operator-7c-eq</anchor>
      <arglist>( const QRectF &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QRegExp</name>
      <anchor>QRegExp-4</anchor>
      <arglist>( const QString &amp; pattern, bool cs, bool wildcard = false )</arglist>
    </member>
    <member kind="function">
      <name>caseSensitive</name>
      <anchor>caseSensitive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimal</name>
      <anchor>minimal</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>search</name>
      <anchor>search</anchor>
      <arglist>( const QString &amp; str, int from = 0, CaretMode caretMode = CaretAtZero )</arglist>
    </member>
    <member kind="function">
      <name>searchRev</name>
      <anchor>searchRev</anchor>
      <arglist>( const QString &amp; str, int from = -1, CaretMode caretMode = CaretAtZero )</arglist>
    </member>
    <member kind="function">
      <name>setCaseSensitive</name>
      <anchor>setCaseSensitive</anchor>
      <arglist>( bool sensitive )</arglist>
    </member>
    <member kind="function">
      <name>setWildcard</name>
      <anchor>setWildcard</anchor>
      <arglist>( bool wildcard )</arglist>
    </member>
    <member kind="function">
      <name>wildcard</name>
      <anchor>wildcard</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRegExp</name>
    <filename>qregexp.html</filename>
    <member kind="enum">
      <name>CaretMode</name>
      <anchor>CaretMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PatternSyntax</name>
      <anchor>PatternSyntax-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QRegExp</name>
      <anchor>QRegExp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QRegExp</name>
      <anchor>QRegExp-2</anchor>
      <arglist>( const QString &amp; pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive, PatternSyntax syntax = RegExp )</arglist>
    </member>
    <member kind="function">
      <name>QRegExp</name>
      <anchor>QRegExp-3</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>cap</name>
      <anchor>cap</anchor>
      <arglist>( int nth = 0 )</arglist>
    </member>
    <member kind="function">
      <name>capturedTexts</name>
      <anchor>capturedTexts</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CaseSensitivity</name>
      <anchor>caseSensitivity</anchor>
      <arglist> QRegExp::caseSensitivity()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>escape</name>
      <anchor>escape</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>exactMatch</name>
      <anchor>exactMatch</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>indexIn</name>
      <anchor>indexIn</anchor>
      <arglist>( const QString &amp; str, int offset = 0, CaretMode caretMode = CaretAtZero )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isMinimal</name>
      <anchor>isMinimal</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastIndexIn</name>
      <anchor>lastIndexIn</anchor>
      <arglist>( const QString &amp; str, int offset = -1, CaretMode caretMode = CaretAtZero )</arglist>
    </member>
    <member kind="function">
      <name>matchedLength</name>
      <anchor>matchedLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numCaptures</name>
      <anchor>numCaptures</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pattern</name>
      <anchor>pattern</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>patternSyntax</name>
      <anchor>patternSyntax</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>( int nth = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setCaseSensitivity</name>
      <anchor>setCaseSensitivity</anchor>
      <arglist>( Qt::CaseSensitivity cs )</arglist>
    </member>
    <member kind="function">
      <name>setMinimal</name>
      <anchor>setMinimal</anchor>
      <arglist>( bool minimal )</arglist>
    </member>
    <member kind="function">
      <name>setPattern</name>
      <anchor>setPattern</anchor>
      <arglist>( const QString &amp; pattern )</arglist>
    </member>
    <member kind="function">
      <name>setPatternSyntax</name>
      <anchor>setPatternSyntax</anchor>
      <arglist>( PatternSyntax syntax )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>QRegExpValidator</name>
      <anchor>QRegExpValidator-3</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QRegExpValidator</name>
      <anchor>QRegExpValidator-4</anchor>
      <arglist>( const QRegExp &amp; rx, QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRegExpValidator</name>
    <filename>qregexpvalidator.html</filename>
    <member kind="function">
      <name>QRegExpValidator</name>
      <anchor>QRegExpValidator</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QRegExpValidator</name>
      <anchor>QRegExpValidator-2</anchor>
      <arglist>( const QRegExp &amp; rx, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>regExp</name>
      <anchor>regExp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setRegExp</name>
      <anchor>setRegExp</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>validate</anchor>
      <arglist> QRegExpValidator::validate( QString &amp; input, int &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion-5</anchor>
      <arglist>( const QPolygon &amp; pa, bool winding )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRegion</name>
    <filename>qregion.html</filename>
    <member kind="enum">
      <name>RegionType</name>
      <anchor>RegionType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion-2</anchor>
      <arglist>( int x, int y, int w, int h, RegionType t = Rectangle )</arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion-3</anchor>
      <arglist>( const QRect &amp; r, RegionType t = Rectangle )</arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion-4</anchor>
      <arglist>( const QPolygon &amp; a, Qt::FillRule fillRule = Qt::OddEvenFill )</arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion-6</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>QRegion</name>
      <anchor>QRegion-7</anchor>
      <arglist>( const QBitmap &amp; bm )</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-2</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>eor</name>
      <anchor>eor</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>intersect</name>
      <anchor>intersect</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rects</name>
      <anchor>rects</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>subtract</name>
      <anchor>subtract</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>translate</name>
      <anchor>translate-2</anchor>
      <arglist>( const QPoint &amp; point )</arglist>
    </member>
    <member kind="function">
      <name>unite</name>
      <anchor>unite</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QRegion &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and</anchor>
      <arglist>amp;( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and-eq</anchor>
      <arglist>amp;=( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator^</name>
      <anchor>operator-5e</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator^=</name>
      <anchor>operator-5e-eq</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator|</name>
      <anchor>operator-7c</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>operator-7c-eq</anchor>
      <arglist>( const QRegion &amp; r )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QResizeEvent</name>
    <filename>qresizeevent.html</filename>
    <member kind="function">
      <name>QResizeEvent</name>
      <anchor>QResizeEvent</anchor>
      <arglist>( const QSize &amp; size, const QSize &amp; oldSize )</arglist>
    </member>
    <member kind="function">
      <name>oldSize</name>
      <anchor>oldSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QRubberBand</name>
    <filename>qrubberband.html</filename>
    <member kind="enum">
      <name>Shape</name>
      <anchor>Shape-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QRubberBand</name>
      <anchor>QRubberBand</anchor>
      <arglist>( Shape s, QWidget * p = 0 )</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>move</name>
      <anchor>move-2</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int width, int height )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize-2</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry-2</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>shape</name>
      <anchor>shape</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QScreen</name>
    <filename>qscreen.html</filename>
    <member kind="enum">
      <name>PixelType</name>
      <anchor>PixelType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QScreen</name>
      <anchor>QScreen</anchor>
      <arglist>( int display_id )</arglist>
    </member>
    <member kind="function">
      <name>alloc</name>
      <anchor>alloc</anchor>
      <arglist>( unsigned int r, unsigned int g, unsigned int b )</arglist>
    </member>
    <member kind="function">
      <name>base</name>
      <anchor>base</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blank</name>
      <anchor>blank</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>cache</name>
      <anchor>cache</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>clut</name>
      <anchor>clut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connect</name>
      <anchor>connect</anchor>
      <arglist>( const QString &amp; displaySpec )</arglist>
    </member>
    <member kind="function">
      <name>createGfx</name>
      <anchor>createGfx</anchor>
      <arglist>( unsigned char * bytes, int w, int h, int d, int linestep )</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deviceHeight</name>
      <anchor>deviceHeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deviceWidth</name>
      <anchor>deviceWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>disconnect</name>
      <anchor>disconnect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initCursor</name>
      <anchor>initCursor</anchor>
      <arglist>( void * end_of_location, bool init = false )</arglist>
    </member>
    <member kind="function">
      <name>initDevice</name>
      <anchor>initDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInterlaced</name>
      <anchor>isInterlaced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTransformed</name>
      <anchor>isTransformed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastOp</name>
      <anchor>lastOp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>linestep</name>
      <anchor>linestepx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mapFromDevice</name>
      <anchor>mapFromDevice</anchor>
      <arglist>( const QSize &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>mapFromDevice</name>
      <anchor>mapFromDevice-2</anchor>
      <arglist>( const QPoint &amp; point, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>mapFromDevice</name>
      <anchor>mapFromDevice-3</anchor>
      <arglist>( const QRect &amp; rect, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>mapFromDevice</name>
      <anchor>mapFromDevice-4</anchor>
      <arglist>( const QImage &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>mapFromDevice</name>
      <anchor>mapFromDevice-5</anchor>
      <arglist>( const QRegion &amp; region, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>mapToDevice</name>
      <anchor>mapToDevice</anchor>
      <arglist>( const QSize &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>mapToDevice</name>
      <anchor>mapToDevice-2</anchor>
      <arglist>( const QPoint &amp; point, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>mapToDevice</name>
      <anchor>mapToDevice-3</anchor>
      <arglist>( const QRect &amp; rect, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>mapToDevice</name>
      <anchor>mapToDevice-4</anchor>
      <arglist>( const QImage &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>mapToDevice</name>
      <anchor>mapToDevice-5</anchor>
      <arglist>( const QRegion &amp; region, const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>numCols</name>
      <anchor>numCols</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>onCard</name>
      <anchor>onCard</anchor>
      <arglist>( const unsigned char * p )</arglist>
    </member>
    <member kind="function">
      <name>onCard</name>
      <anchor>onCard-2</anchor>
      <arglist>( const unsigned char * p, ulong &amp; offset )</arglist>
    </member>
    <member kind="function">
      <name>opType</name>
      <anchor>opType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixelType</name>
      <anchor>pixelType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmapDepth</name>
      <anchor>pixmapDepth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmapLinestepAlignment</name>
      <anchor>pixmapLinestepAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pixmapOffsetAlignment</name>
      <anchor>pixmapOffsetAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restore</name>
      <anchor>restore</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>screenGfx</name>
      <anchor>screenGfx</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>screenSize</name>
      <anchor>screenSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDirty</name>
      <anchor>setDirty</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>setMode</name>
      <anchor>setMode</anchor>
      <arglist>( int width, int height, int depth )</arglist>
    </member>
    <member kind="function">
      <name>shutdownDevice</name>
      <anchor>shutdownDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>supportsDepth</name>
      <anchor>supportsDepth</anchor>
      <arglist>( int d )</arglist>
    </member>
    <member kind="function">
      <name>totalSize</name>
      <anchor>totalSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>transformOrientation</name>
      <anchor>transformOrientation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QScrollArea</name>
    <filename>qscrollarea.html</filename>
    <member kind="function">
      <name>QScrollArea</name>
      <anchor>QScrollArea</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setWidget</name>
      <anchor>setWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>takeWidget</name>
      <anchor>takeWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QScrollBar</name>
      <anchor>QScrollBar-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QScrollBar</name>
      <anchor>QScrollBar-4</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QScrollBar</name>
      <anchor>QScrollBar-5</anchor>
      <arglist>( int minimum, int maximum, int lineStep, int pageStep, int value, Qt::Orientation orientation, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>draggingSlider</name>
      <anchor>draggingSlider</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QScrollBar</name>
    <filename>qscrollbar.html</filename>
    <member kind="function">
      <name>QScrollBar</name>
      <anchor>QScrollBar</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QScrollBar</name>
      <anchor>QScrollBar-2</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSemaphore</name>
    <filename>qsemaphore.html</filename>
    <member kind="function">
      <name>QSemaphore</name>
      <anchor>QSemaphore</anchor>
      <arglist>( int n = 0 )</arglist>
    </member>
    <member kind="function">
      <name>acquire</name>
      <anchor>acquire</anchor>
      <arglist>( int n = 1 )</arglist>
    </member>
    <member kind="function">
      <name>available</name>
      <anchor>available</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>release</name>
      <anchor>release</anchor>
      <arglist>( int n = 1 )</arglist>
    </member>
    <member kind="function">
      <name>tryAcquire</name>
      <anchor>tryAcquire</anchor>
      <arglist>( int n = 1 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSessionManager</name>
    <filename>qsessionmanager.html</filename>
    <member kind="enum">
      <name>RestartHint</name>
      <anchor>RestartHint-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>allowsErrorInteraction</name>
      <anchor>allowsErrorInteraction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>allowsInteraction</name>
      <anchor>allowsInteraction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cancel</name>
      <anchor>cancel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>discardCommand</name>
      <anchor>discardCommand</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPhase2</name>
      <anchor>isPhase2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>release</name>
      <anchor>release</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>requestPhase2</name>
      <anchor>requestPhase2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restartCommand</name>
      <anchor>restartCommand</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restartHint</name>
      <anchor>restartHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sessionId</name>
      <anchor>sessionId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sessionKey</name>
      <anchor>sessionKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDiscardCommand</name>
      <anchor>setDiscardCommand</anchor>
      <arglist>( const QStringList &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>setManagerProperty</name>
      <anchor>setManagerProperty</anchor>
      <arglist>( const QString &amp; name, const QStringList &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setManagerProperty</name>
      <anchor>setManagerProperty-2</anchor>
      <arglist>( const QString &amp; name, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setRestartCommand</name>
      <anchor>setRestartCommand</anchor>
      <arglist>( const QStringList &amp; command )</arglist>
    </member>
    <member kind="function">
      <name>setRestartHint</name>
      <anchor>setRestartHint</anchor>
      <arglist>( RestartHint hint )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSet::const_iterator</name>
    <filename>qset-const-iterator.html</filename>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-3</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( int j )</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const const_iterator &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSet</name>
    <filename>qset.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSet</name>
      <anchor>QSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSet</name>
      <anchor>QSet-2</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>capacity</name>
      <anchor>capacity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constBegin</name>
      <anchor>constBegin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constEnd</name>
      <anchor>constEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>empty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromList</name>
      <anchor>fromList</anchor>
      <arglist>( const QList&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>intersect</name>
      <anchor>intersect</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>reserve</name>
      <anchor>reserve</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>squeeze</name>
      <anchor>squeeze</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>subtract</name>
      <anchor>subtract</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>toList</name>
      <anchor>toList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unite</name>
      <anchor>unite</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>values</name>
      <anchor>values</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and</anchor>
      <arglist>amp;( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&amp;</name>
      <anchor>operator-and-eq</anchor>
      <arglist>amp;=( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>operator-</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator|</name>
      <anchor>operator-7c</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>operator-7c-eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSetIterator</name>
    <filename>qsetiterator.html</filename>
    <member kind="function">
      <name>QSetIterator</name>
      <anchor>QSetIterator</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; set )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSet&lt;T&gt; &amp; set )</arglist>
    </member>
    <member kind="enum">
      <name>System</name>
      <anchor>System-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>entryList</name>
      <anchor>entryList</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>insertSearchPath</name>
      <anchor>insertSearchPath</anchor>
      <arglist>( System system, const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>readBoolEntry</name>
      <anchor>readBoolEntry</anchor>
      <arglist>( const QString &amp; key, bool defaultValue = false, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>readDoubleEntry</name>
      <anchor>readDoubleEntry</anchor>
      <arglist>( const QString &amp; key, double defaultValue = 0, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>readEntry</name>
      <anchor>readEntry</anchor>
      <arglist>( const QString &amp; key, const QString &amp; defaultValue = QString()</arglist>
    </member>
    <member kind="function">
      <name>readListEntry</name>
      <anchor>readListEntry</anchor>
      <arglist>( const QString &amp; key, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>readListEntry</name>
      <anchor>readListEntry-2</anchor>
      <arglist>( const QString &amp; key, QChar separator, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>readNumEntry</name>
      <anchor>readNumEntry</anchor>
      <arglist>( const QString &amp; key, int defaultValue = 0, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>removeEntry</name>
      <anchor>removeEntry</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>removeSearchPath</name>
      <anchor>removeSearchPath</anchor>
      <arglist>( System system, const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>resetGroup</name>
      <anchor>resetGroup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPath</name>
      <anchor>setPath</anchor>
      <arglist>( const QString &amp; organization, const QString &amp; application, Scope scope = Global )</arglist>
    </member>
    <member kind="function">
      <name>subkeyList</name>
      <anchor>subkeyList</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry</anchor>
      <arglist>( const QString &amp; key, bool value )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry-2</anchor>
      <arglist>( const QString &amp; key, double value )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry-3</anchor>
      <arglist>( const QString &amp; key, int value )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry-4</anchor>
      <arglist>( const QString &amp; key, const char * value )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry-5</anchor>
      <arglist>( const QString &amp; key, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry-6</anchor>
      <arglist>( const QString &amp; key, const QStringList &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>writeEntry</name>
      <anchor>writeEntry-7</anchor>
      <arglist>( const QString &amp; key, const QStringList &amp; value, QChar separator )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSettings</name>
    <filename>qsettings.html</filename>
    <member kind="enum">
      <name>Format</name>
      <anchor>Format-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Scope</name>
      <anchor>Scope-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Status</name>
      <anchor>Status-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSettings</name>
      <anchor>QSettings</anchor>
      <arglist>( const QString &amp; organization, const QString &amp; application = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSettings</name>
      <anchor>QSettings-2</anchor>
      <arglist>( Scope scope, const QString &amp; organization, const QString &amp; application = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSettings</name>
      <anchor>QSettings-3</anchor>
      <arglist>( Format format, Scope scope, const QString &amp; organization, const QString &amp; application = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSettings</name>
      <anchor>QSettings-4</anchor>
      <arglist>( const QString &amp; fileName, Format format, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QSettings</name>
      <anchor>QSettings-5</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>allKeys</name>
      <anchor>allKeys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginGroup</name>
      <anchor>beginGroup</anchor>
      <arglist>( const QString &amp; prefix )</arglist>
    </member>
    <member kind="function">
      <name>beginReadArray</name>
      <anchor>beginReadArray</anchor>
      <arglist>( const QString &amp; prefix )</arglist>
    </member>
    <member kind="function">
      <name>beginWriteArray</name>
      <anchor>beginWriteArray</anchor>
      <arglist>( const QString &amp; prefix, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>childGroups</name>
      <anchor>childGroups</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childKeys</name>
      <anchor>childKeys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>endArray</name>
      <anchor>endArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endGroup</name>
      <anchor>endGroup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fallbacksEnabled</name>
      <anchor>fallbacksEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>group</name>
      <anchor>group</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isWritable</name>
      <anchor>isWritable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setArrayIndex</name>
      <anchor>setArrayIndex</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>setFallbacksEnabled</name>
      <anchor>setFallbacksEnabled</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setSystemIniPath</name>
      <anchor>setSystemIniPath</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>setUserIniPath</name>
      <anchor>setUserIniPath</anchor>
      <arglist>( const QString &amp; dir )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QString &amp; key, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>status</name>
      <anchor>status</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sync</name>
      <anchor>sync</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( const QString &amp; key, const QVariant &amp; defaultValue = QVariant()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSharedData</name>
    <filename>qshareddata.html</filename>
    <member kind="function">
      <name>QSharedData</name>
      <anchor>QSharedData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSharedData</name>
      <anchor>QSharedData-2</anchor>
      <arglist>( const QSharedData &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSharedDataPointer</name>
    <filename>qshareddatapointer.html</filename>
    <member kind="function">
      <name>QSharedDataPointer</name>
      <anchor>QSharedDataPointer</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSharedDataPointer</name>
      <anchor>QSharedDataPointer-2</anchor>
      <arglist>( T * sharedData )</arglist>
    </member>
    <member kind="function">
      <name>QSharedDataPointer</name>
      <anchor>QSharedDataPointer-3</anchor>
      <arglist>( const QSharedDataPointer &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>constData</name>
      <anchor>constData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>detach</name>
      <anchor>detach</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-T--2a</anchor>
      <arglist> T *()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-T--2a</anchor>
      <arglist> const T *()</arglist>
    </member>
    <member kind="function">
      <name>operator!</name>
      <anchor>operator-not</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QSharedDataPointer&lt;T&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*</name>
      <anchor>operator-2a-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator-&amp;</name>
      <anchor>operator--gt-2</anchor>
      <arglist>gt;()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSharedDataPointer &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-2</anchor>
      <arglist>( T * sharedData )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QSharedDataPointer&lt;T&gt; &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QShortcut</name>
    <filename>qshortcut.html</filename>
    <member kind="function">
      <name>ShortcutContext</name>
      <anchor>context</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QShortcut</name>
      <anchor>QShortcut</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>QShortcut</name>
      <anchor>QShortcut-2</anchor>
      <arglist>( const QKeySequence &amp; key, QWidget * parent, const char * member = 0, const char * ambiguousMember = 0, Qt::ShortcutContext context = Qt::WindowShortcut )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activatedAmbiguously</name>
      <anchor>activatedAmbiguously</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>id</name>
      <anchor>id</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentWidget</name>
      <anchor>parentWidget</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QShowEvent</name>
    <filename>qshowevent.html</filename>
    <member kind="function">
      <name>QShowEvent</name>
      <anchor>QShowEvent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSignalMapper</name>
      <anchor>QSignalMapper-3</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSignalMapper</name>
    <filename>qsignalmapper.html</filename>
    <member kind="function">
      <name>QSignalMapper</name>
      <anchor>QSignalMapper</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QSignalMapper</name>
      <anchor>QSignalMapper-2</anchor>
      <arglist>( QSignalMapperPrivate &amp; dd, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>map</name>
      <anchor>map-2</anchor>
      <arglist>( QObject * sender )</arglist>
    </member>
    <member kind="function">
      <name>mapped</name>
      <anchor>mapped</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>mapped</name>
      <anchor>mapped-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>mapped</name>
      <anchor>mapped-3</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>mapping</name>
      <anchor>mapping</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>mapping</name>
      <anchor>mapping-2</anchor>
      <arglist>( const QString &amp; id )</arglist>
    </member>
    <member kind="function">
      <name>mapping</name>
      <anchor>mapping-3</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>removeMappings</name>
      <anchor>removeMappings</anchor>
      <arglist>( QObject * sender )</arglist>
    </member>
    <member kind="function">
      <name>setMapping</name>
      <anchor>setMapping</anchor>
      <arglist>( QObject * sender, int id )</arglist>
    </member>
    <member kind="function">
      <name>setMapping</name>
      <anchor>setMapping-2</anchor>
      <arglist>( QObject * sender, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setMapping</name>
      <anchor>setMapping-3</anchor>
      <arglist>( QObject * sender, QWidget * widget )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSize</name>
    <filename>qsize.html</filename>
    <member kind="function">
      <name>QSize</name>
      <anchor>QSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSize</name>
      <anchor>QSize-2</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>boundedTo</name>
      <anchor>boundedTo</anchor>
      <arglist>( const QSize &amp; otherSize )</arglist>
    </member>
    <member kind="function">
      <name>expandedTo</name>
      <anchor>expandedTo</anchor>
      <arglist>( const QSize &amp; otherSize )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rheight</name>
      <anchor>rheight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rwidth</name>
      <anchor>rwidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>scale</anchor>
      <arglist>( int w, int h, Qt::AspectRatioMode mode )</arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>scale-2</anchor>
      <arglist>( const QSize &amp; s, Qt::AspectRatioMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( int h )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>transpose</name>
      <anchor>transpose</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*=</name>
      <anchor>operator-2a-eq</anchor>
      <arglist>( qreal coeff )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QSize &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( const QSize &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>operator-2f-eq</anchor>
      <arglist>( qreal coeff )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSizeF</name>
    <filename>qsizef.html</filename>
    <member kind="function">
      <name>QSizeF</name>
      <anchor>QSizeF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSizeF</name>
      <anchor>QSizeF-2</anchor>
      <arglist>( const QSize &amp; size )</arglist>
    </member>
    <member kind="function">
      <name>QSizeF</name>
      <anchor>QSizeF-3</anchor>
      <arglist>( qreal width, qreal height )</arglist>
    </member>
    <member kind="function">
      <name>boundedTo</name>
      <anchor>boundedTo</anchor>
      <arglist>( const QSizeF &amp; otherSize )</arglist>
    </member>
    <member kind="function">
      <name>expandedTo</name>
      <anchor>expandedTo</anchor>
      <arglist>( const QSizeF &amp; otherSize )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rheight</name>
      <anchor>rheight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rwidth</name>
      <anchor>rwidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>scale</anchor>
      <arglist>( qreal w, qreal h, Qt::AspectRatioMode mode )</arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>scale-2</anchor>
      <arglist>( const QSizeF &amp; s, Qt::AspectRatioMode mode )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( qreal height )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>toSize</name>
      <anchor>toSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>transpose</name>
      <anchor>transpose</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator*=</name>
      <anchor>operator-2a-eq</anchor>
      <arglist>( qreal coeff )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QSizeF &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>operator--eq</anchor>
      <arglist>( const QSizeF &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>operator-2f-eq</anchor>
      <arglist>( qreal divisor )</arglist>
    </member>
    <member kind="function">
      <name>QSizeGrip</name>
      <anchor>QSizeGrip-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSizeGrip</name>
    <filename>qsizegrip.html</filename>
    <member kind="function">
      <name>QSizeGrip</name>
      <anchor>QSizeGrip</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>mouseMoveEvent</name>
      <anchor>mouseMoveEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mousePressEvent</name>
      <anchor>mousePressEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enum">
      <name>ExpandData</name>
      <anchor>ExpandData-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeType</name>
      <anchor>SizeType-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSizePolicy</name>
      <anchor>QSizePolicy-3</anchor>
      <arglist>( Policy horizontal, Policy vertical, bool hfw )</arglist>
    </member>
    <member kind="function">
      <name>QSizePolicy</name>
      <anchor>QSizePolicy-4</anchor>
      <arglist>( Policy hPolicy, Policy vPolicy, uchar hStretch, uchar vStretch, bool hfw = false )</arglist>
    </member>
    <member kind="function">
      <name>Orientations</name>
      <anchor>expanding</anchor>
      <arglist> QSizePolicy::expanding()</arglist>
    </member>
    <member kind="function">
      <name>horData</name>
      <anchor>horData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horStretch</name>
      <anchor>horStretch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mayGrowHorizontally</name>
      <anchor>mayGrowHorizontally</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mayGrowVertically</name>
      <anchor>mayGrowVertically</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mayShrinkHorizontally</name>
      <anchor>mayShrinkHorizontally</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mayShrinkVertically</name>
      <anchor>mayShrinkVertically</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHorData</name>
      <anchor>setHorData</anchor>
      <arglist>( Policy policy )</arglist>
    </member>
    <member kind="function">
      <name>setHorStretch</name>
      <anchor>setHorStretch</anchor>
      <arglist>( uchar stretch )</arglist>
    </member>
    <member kind="function">
      <name>setVerData</name>
      <anchor>setVerData</anchor>
      <arglist>( Policy policy )</arglist>
    </member>
    <member kind="function">
      <name>setVerStretch</name>
      <anchor>setVerStretch</anchor>
      <arglist>( uchar stretch )</arglist>
    </member>
    <member kind="function">
      <name>verData</name>
      <anchor>verData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verStretch</name>
      <anchor>verStretch</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSizePolicy</name>
    <filename>qsizepolicy.html</filename>
    <member kind="enum">
      <name>Policy</name>
      <anchor>Policy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PolicyFlag</name>
      <anchor>PolicyFlag-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSizePolicy</name>
      <anchor>QSizePolicy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSizePolicy</name>
      <anchor>QSizePolicy-2</anchor>
      <arglist>( Policy horizontal, Policy vertical )</arglist>
    </member>
    <member kind="function">
      <name>Orientations</name>
      <anchor>expandingDirections</anchor>
      <arglist> QSizePolicy::expandingDirections()</arglist>
    </member>
    <member kind="function">
      <name>hasHeightForWidth</name>
      <anchor>hasHeightForWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalPolicy</name>
      <anchor>horizontalPolicy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalStretch</name>
      <anchor>horizontalStretch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHeightForWidth</name>
      <anchor>setHeightForWidth</anchor>
      <arglist>( bool hfw )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalPolicy</name>
      <anchor>setHorizontalPolicy</anchor>
      <arglist>( Policy policy )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalStretch</name>
      <anchor>setHorizontalStretch</anchor>
      <arglist>( uchar stretch )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalPolicy</name>
      <anchor>setVerticalPolicy</anchor>
      <arglist>( Policy policy )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalStretch</name>
      <anchor>setVerticalStretch</anchor>
      <arglist>( uchar stretch )</arglist>
    </member>
    <member kind="function">
      <name>transpose</name>
      <anchor>transpose</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalPolicy</name>
      <anchor>verticalPolicy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalStretch</name>
      <anchor>verticalStretch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QSizePolicy &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QSizePolicy &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QSlider</name>
      <anchor>QSlider-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QSlider</name>
      <anchor>QSlider-4</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QSlider</name>
      <anchor>QSlider-5</anchor>
      <arglist>( int minValue, int maxValue, int pageStep, int value, Qt::Orientation orientation, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addStep</name>
      <anchor>addStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setTickmarks</name>
      <anchor>setTickmarks</anchor>
      <arglist>( TickPosition position )</arglist>
    </member>
    <member kind="function">
      <name>subtractStep</name>
      <anchor>subtractStep</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tickmarks</name>
      <anchor>tickmarks</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSlider</name>
    <filename>qslider.html</filename>
    <member kind="enum">
      <name>TickPosition</name>
      <anchor>TickPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSlider</name>
      <anchor>QSlider</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QSlider</name>
      <anchor>QSlider-2</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QSocketNotifier</name>
      <anchor>QSocketNotifier-2</anchor>
      <arglist>( int socket, Type type, QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSocketNotifier</name>
    <filename>qsocketnotifier.html</filename>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSocketNotifier</name>
      <anchor>QSocketNotifier</anchor>
      <arglist>( int socket, Type type, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activated</name>
      <anchor>activated</anchor>
      <arglist>( int socket )</arglist>
    </member>
    <member kind="function">
      <name>isEnabled</name>
      <anchor>isEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEnabled</name>
      <anchor>setEnabled</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>socket</name>
      <anchor>socket</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSound</name>
      <anchor>QSound-2</anchor>
      <arglist>( const QString &amp; filename, QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>available</name>
      <anchor>available</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSound</name>
    <filename>qsound.html</filename>
    <member kind="function">
      <name>QSound</name>
      <anchor>QSound</anchor>
      <arglist>( const QString &amp; filename, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAvailable</name>
      <anchor>isAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFinished</name>
      <anchor>isFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loops</name>
      <anchor>loops</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loopsRemaining</name>
      <anchor>loopsRemaining</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>play</name>
      <anchor>play</anchor>
      <arglist>( const QString &amp; filename )</arglist>
    </member>
    <member kind="function">
      <name>play</name>
      <anchor>play-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLoops</name>
      <anchor>setLoops</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>stop</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSpacerItem</name>
    <filename>qspaceritem.html</filename>
    <member kind="function">
      <name>QSpacerItem</name>
      <anchor>QSpacerItem</anchor>
      <arglist>( int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum )</arglist>
    </member>
    <member kind="function">
      <name>changeSize</name>
      <anchor>changeSize</anchor>
      <arglist>( int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximumSize</name>
      <anchor>maximumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumSize</name>
      <anchor>minimumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSpinBox</name>
      <anchor>QSpinBox-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QSpinBox</name>
      <anchor>QSpinBox-3</anchor>
      <arglist>( int min, int max, int step, QWidget * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>maxValue</name>
      <anchor>maxValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minValue</name>
      <anchor>minValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLineStep</name>
      <anchor>setLineStep</anchor>
      <arglist>( int step )</arglist>
    </member>
    <member kind="function">
      <name>setMaxValue</name>
      <anchor>setMaxValue</anchor>
      <arglist>( int val )</arglist>
    </member>
    <member kind="function">
      <name>setMinValue</name>
      <anchor>setMinValue</anchor>
      <arglist>( int val )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSpinBox</name>
    <filename>qspinbox.html</filename>
    <member kind="function">
      <name>QSpinBox</name>
      <anchor>QSpinBox</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setRange</name>
      <anchor>setRange</anchor>
      <arglist>( int min, int max )</arglist>
    </member>
    <member kind="function">
      <name>textFromValue</name>
      <anchor>textFromValue</anchor>
      <arglist>( int v )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>valueChanged</name>
      <anchor>valueChanged-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>valueFromText</name>
      <anchor>valueFromText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>message</name>
      <anchor>message</anchor>
      <arglist>( const QString &amp; message, int alignment = Qt::AlignLeft, const QColor &amp; color = Qt::black )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSplashScreen</name>
    <filename>qsplashscreen.html</filename>
    <member kind="function">
      <name>QSplashScreen</name>
      <anchor>QSplashScreen</anchor>
      <arglist>( const QPixmap &amp; pixmap = QPixmap()</arglist>
    </member>
    <member kind="function">
      <name>QSplashScreen</name>
      <anchor>QSplashScreen-2</anchor>
      <arglist>( QWidget * parent, const QPixmap &amp; pixmap = QPixmap()</arglist>
    </member>
    <member kind="function">
      <name>clearMessage</name>
      <anchor>clearMessage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawContents</name>
      <anchor>drawContents</anchor>
      <arglist>( QPainter * painter )</arglist>
    </member>
    <member kind="function">
      <name>finish</name>
      <anchor>finish</anchor>
      <arglist>( QWidget * mainWin )</arglist>
    </member>
    <member kind="function">
      <name>messageChanged</name>
      <anchor>messageChanged</anchor>
      <arglist>( const QString &amp; message )</arglist>
    </member>
    <member kind="function">
      <name>pixmap</name>
      <anchor>pixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>showMessage</name>
      <anchor>showMessage</anchor>
      <arglist>( const QString &amp; message, int alignment = Qt::AlignLeft, const QColor &amp; color = Qt::black )</arglist>
    </member>
    <member kind="enum">
      <name>ResizeMode</name>
      <anchor>ResizeMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSplitter</name>
      <anchor>QSplitter-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QSplitter</name>
      <anchor>QSplitter-4</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>moveToFirst</name>
      <anchor>moveToFirst</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>moveToLast</name>
      <anchor>moveToLast</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setCollapsible</name>
      <anchor>setCollapsible-2</anchor>
      <arglist>( QWidget * widget, bool collapsible )</arglist>
    </member>
    <member kind="function">
      <name>setResizeMode</name>
      <anchor>setResizeMode</anchor>
      <arglist>( QWidget * widget, ResizeMode mode )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSplitter</name>
    <filename>qsplitter.html</filename>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSplitter</name>
      <anchor>QSplitter</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QSplitter</name>
      <anchor>QSplitter-2</anchor>
      <arglist>( Qt::Orientation orientation, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>closestLegalPosition</name>
      <anchor>closestLegalPosition</anchor>
      <arglist>( int pos, int index )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createHandle</name>
      <anchor>createHandle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getRange</name>
      <anchor>getRange</anchor>
      <arglist>( int index, int * min, int * max )</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>insertWidget</name>
      <anchor>insertWidget</anchor>
      <arglist>( int index, QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>isCollapsible</name>
      <anchor>isCollapsible</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>moveSplitter</name>
      <anchor>moveSplitter</anchor>
      <arglist>( int pos, int index )</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>restoreState</name>
      <anchor>restoreState</anchor>
      <arglist>( const QByteArray &amp; state )</arglist>
    </member>
    <member kind="function">
      <name>saveState</name>
      <anchor>saveState</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCollapsible</name>
      <anchor>setCollapsible</anchor>
      <arglist>( int index, bool collapse )</arglist>
    </member>
    <member kind="function">
      <name>setRubberBand</name>
      <anchor>setRubberBand</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>setSizes</name>
      <anchor>setSizes</anchor>
      <arglist>( const QList&lt;int&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>setStretchFactor</name>
      <anchor>setStretchFactor</anchor>
      <arglist>( int index, int stretch )</arglist>
    </member>
    <member kind="function">
      <name>sizes</name>
      <anchor>sizes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>splitterMoved</name>
      <anchor>splitterMoved</anchor>
      <arglist>( int pos, int index )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSplitterHandle</name>
    <filename>qsplitterhandle.html</filename>
    <member kind="function">
      <name>QSplitterHandle</name>
      <anchor>QSplitterHandle</anchor>
      <arglist>( Qt::Orientation orientation, QSplitter * parent )</arglist>
    </member>
    <member kind="function">
      <name>closestLegalPosition</name>
      <anchor>closestLegalPosition</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>moveSplitter</name>
      <anchor>moveSplitter</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>opaqueResize</name>
      <anchor>opaqueResize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist> QSplitterHandle::orientation()</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>setOrientation</anchor>
      <arglist>( Qt::Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>splitter</name>
      <anchor>splitter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enum">
      <name>Confirm</name>
      <anchor>Confirm-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Op</name>
      <anchor>Op-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Location</name>
      <anchor>Location-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TableType</name>
      <anchor>TableType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record-2</anchor>
      <arglist>( const QSqlQuery &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>recordInfo</name>
      <anchor>recordInfo</anchor>
      <arglist>( const QString &amp; tablename )</arglist>
    </member>
    <member kind="function">
      <name>recordInfo</name>
      <anchor>recordInfo-2</anchor>
      <arglist>( const QSqlQuery &amp; query )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlDatabase</name>
    <filename>qsqldatabase.html</filename>
    <member kind="function">
      <name>QSqlDatabase</name>
      <anchor>QSqlDatabase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSqlDatabase</name>
      <anchor>QSqlDatabase-2</anchor>
      <arglist>( const QSqlDatabase &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QSqlDatabase</name>
      <anchor>QSqlDatabase-3</anchor>
      <arglist>( const QString &amp; type )</arglist>
    </member>
    <member kind="function">
      <name>QSqlDatabase</name>
      <anchor>QSqlDatabase-4</anchor>
      <arglist>( QSqlDriver * driver )</arglist>
    </member>
    <member kind="function">
      <name>addDatabase</name>
      <anchor>addDatabase</anchor>
      <arglist>( const QString &amp; type, const QString &amp; connectionName = QLatin1String( defaultConnection )</arglist>
    </member>
    <member kind="function">
      <name>addDatabase</name>
      <anchor>addDatabase-2</anchor>
      <arglist>( QSqlDriver * driver, const QString &amp; connectionName = QLatin1String( defaultConnection )</arglist>
    </member>
    <member kind="function">
      <name>cloneDatabase</name>
      <anchor>cloneDatabase</anchor>
      <arglist>( const QSqlDatabase &amp; other, const QString &amp; connectionName )</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commit</name>
      <anchor>commit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectOptions</name>
      <anchor>connectOptions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>connectionNames</name>
      <anchor>connectionNames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; connectionName = QLatin1String( defaultConnection )</arglist>
    </member>
    <member kind="function">
      <name>database</name>
      <anchor>database</anchor>
      <arglist>( const QString &amp; connectionName = QLatin1String( defaultConnection )</arglist>
    </member>
    <member kind="function">
      <name>databaseName</name>
      <anchor>databaseName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>driver</name>
      <anchor>driver</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>driverName</name>
      <anchor>driverName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drivers</name>
      <anchor>drivers</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>( const QString &amp; query = QString()</arglist>
    </member>
    <member kind="function">
      <name>hostName</name>
      <anchor>hostName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDriverAvailable</name>
      <anchor>isDriverAvailable</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>isOpen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOpenError</name>
      <anchor>isOpenError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastError</name>
      <anchor>lastError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open-2</anchor>
      <arglist>( const QString &amp; user, const QString &amp; password )</arglist>
    </member>
    <member kind="function">
      <name>password</name>
      <anchor>password</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>port</name>
      <anchor>port</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primaryIndex</name>
      <anchor>primaryIndex</anchor>
      <arglist>( const QString &amp; tablename )</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record</anchor>
      <arglist>( const QString &amp; tablename )</arglist>
    </member>
    <member kind="function">
      <name>registerSqlDriver</name>
      <anchor>registerSqlDriver</anchor>
      <arglist>( const QString &amp; name, QSqlDriverCreatorBase * creator )</arglist>
    </member>
    <member kind="function">
      <name>removeDatabase</name>
      <anchor>removeDatabase</anchor>
      <arglist>( const QString &amp; connectionName )</arglist>
    </member>
    <member kind="function">
      <name>rollback</name>
      <anchor>rollback</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setConnectOptions</name>
      <anchor>setConnectOptions</anchor>
      <arglist>( const QString &amp; options = QString()</arglist>
    </member>
    <member kind="function">
      <name>setDatabaseName</name>
      <anchor>setDatabaseName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setHostName</name>
      <anchor>setHostName</anchor>
      <arglist>( const QString &amp; host )</arglist>
    </member>
    <member kind="function">
      <name>setPassword</name>
      <anchor>setPassword</anchor>
      <arglist>( const QString &amp; password )</arglist>
    </member>
    <member kind="function">
      <name>setPort</name>
      <anchor>setPort</anchor>
      <arglist>( int port )</arglist>
    </member>
    <member kind="function">
      <name>setUserName</name>
      <anchor>setUserName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>tables</name>
      <anchor>tables</anchor>
      <arglist>( QSql::TableType type = QSql::Tables )</arglist>
    </member>
    <member kind="function">
      <name>transaction</name>
      <anchor>transaction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>userName</name>
      <anchor>userName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSqlDatabase &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>formatValue</name>
      <anchor>formatValue</anchor>
      <arglist>( const QSqlField * field, bool trimStrings = false )</arglist>
    </member>
    <member kind="function">
      <name>nullText</name>
      <anchor>nullText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record-2</anchor>
      <arglist>( const QSqlQuery &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>recordInfo</name>
      <anchor>recordInfo</anchor>
      <arglist>( const QString &amp; tablename )</arglist>
    </member>
    <member kind="function">
      <name>recordInfo</name>
      <anchor>recordInfo-2</anchor>
      <arglist>( const QSqlQuery &amp; query )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlDriver</name>
    <filename>qsqldriver.html</filename>
    <member kind="enum">
      <name>DriverFeature</name>
      <anchor>DriverFeature-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>IdentifierType</name>
      <anchor>IdentifierType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StatementType</name>
      <anchor>StatementType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSqlDriver</name>
      <anchor>QSqlDriver</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>beginTransaction</name>
      <anchor>beginTransaction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commitTransaction</name>
      <anchor>commitTransaction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createResult</name>
      <anchor>createResult</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>escapeIdentifier</name>
      <anchor>escapeIdentifier</anchor>
      <arglist>( const QString &amp; identifier, IdentifierType type )</arglist>
    </member>
    <member kind="function">
      <name>formatValue</name>
      <anchor>formatValue-2</anchor>
      <arglist>( const QSqlField &amp; field, bool trimStrings = false )</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasFeature</name>
      <anchor>hasFeature</anchor>
      <arglist>( DriverFeature feature )</arglist>
    </member>
    <member kind="function">
      <name>isOpen</name>
      <anchor>isOpen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isOpenError</name>
      <anchor>isOpenError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastError</name>
      <anchor>lastError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>( const QString &amp; db, const QString &amp; user = QString()</arglist>
    </member>
    <member kind="function">
      <name>primaryIndex</name>
      <anchor>primaryIndex</anchor>
      <arglist>( const QString &amp; tableName )</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record</anchor>
      <arglist>( const QString &amp; tableName )</arglist>
    </member>
    <member kind="function">
      <name>rollbackTransaction</name>
      <anchor>rollbackTransaction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLastError</name>
      <anchor>setLastError</anchor>
      <arglist>( const QSqlError &amp; error )</arglist>
    </member>
    <member kind="function">
      <name>setOpen</name>
      <anchor>setOpen</anchor>
      <arglist>( bool open )</arglist>
    </member>
    <member kind="function">
      <name>setOpenError</name>
      <anchor>setOpenError</anchor>
      <arglist>( bool error )</arglist>
    </member>
    <member kind="function">
      <name>sqlStatement</name>
      <anchor>sqlStatement</anchor>
      <arglist>( StatementType type, const QString &amp; tableName, const QSqlRecord &amp; rec, bool preparedStatement )</arglist>
    </member>
    <member kind="function">
      <name>tables</name>
      <anchor>tables</anchor>
      <arglist>( QSql::TableType tableType )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlDriverCreator</name>
    <filename>qsqldrivercreator.html</filename>
  </compound>
  <compound kind="class">
    <name>QSqlDriverCreatorBase</name>
    <filename>qsqldrivercreatorbase.html</filename>
    <member kind="function">
      <name>createObject</name>
      <anchor>createObject</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlDriverPlugin</name>
    <filename>qsqldriverplugin.html</filename>
    <member kind="function">
      <name>QSqlDriverPlugin</name>
      <anchor>QSqlDriverPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlError</name>
    <filename>qsqlerror.html</filename>
    <member kind="enum">
      <name>ErrorType</name>
      <anchor>ErrorType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSqlError</name>
      <anchor>QSqlError</anchor>
      <arglist>( const QString &amp; driverText = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSqlError</name>
      <anchor>QSqlError-2</anchor>
      <arglist>( const QSqlError &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>databaseText</name>
      <anchor>databaseText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>driverText</name>
      <anchor>driverText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDatabaseText</name>
      <anchor>setDatabaseText</anchor>
      <arglist>( const QString &amp; databaseText )</arglist>
    </member>
    <member kind="function">
      <name>setDriverText</name>
      <anchor>setDriverText</anchor>
      <arglist>( const QString &amp; driverText )</arglist>
    </member>
    <member kind="function">
      <name>setNumber</name>
      <anchor>setNumber</anchor>
      <arglist>( int number )</arglist>
    </member>
    <member kind="function">
      <name>setType</name>
      <anchor>setType</anchor>
      <arglist>( ErrorType type )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSqlError &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>setNull</name>
      <anchor>setNull</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlField</name>
    <filename>qsqlfield.html</filename>
    <member kind="enum">
      <name>RequiredStatus</name>
      <anchor>RequiredStatus-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSqlField</name>
      <anchor>QSqlField</anchor>
      <arglist>( const QString &amp; fieldName = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSqlField</name>
      <anchor>QSqlField-2</anchor>
      <arglist>( const QSqlField &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultValue</name>
      <anchor>defaultValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAutoValue</name>
      <anchor>isAutoValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isGenerated</name>
      <anchor>isGenerated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isReadOnly</name>
      <anchor>isReadOnly</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>precision</name>
      <anchor>precision</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>requiredStatus</name>
      <anchor>requiredStatus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoValue</name>
      <anchor>setAutoValue</anchor>
      <arglist>( bool autoVal )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultValue</name>
      <anchor>setDefaultValue</anchor>
      <arglist>( const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setGenerated</name>
      <anchor>setGenerated</anchor>
      <arglist>( bool gen )</arglist>
    </member>
    <member kind="function">
      <name>setLength</name>
      <anchor>setLength</anchor>
      <arglist>( int fieldLength )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setPrecision</name>
      <anchor>setPrecision</anchor>
      <arglist>( int precision )</arglist>
    </member>
    <member kind="function">
      <name>setReadOnly</name>
      <anchor>setReadOnly</anchor>
      <arglist>( bool readOnly )</arglist>
    </member>
    <member kind="function">
      <name>setRequired</name>
      <anchor>setRequired</anchor>
      <arglist>( bool required )</arglist>
    </member>
    <member kind="function">
      <name>setRequiredStatus</name>
      <anchor>setRequiredStatus</anchor>
      <arglist>( RequiredStatus required )</arglist>
    </member>
    <member kind="function">
      <name>setType</name>
      <anchor>setType</anchor>
      <arglist>( QVariant::Type type )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>type</anchor>
      <arglist> QSqlField::type()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QSqlField &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSqlField &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QSqlField &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( const QString &amp; prefix = QString()</arglist>
    </member>
    <member kind="function">
      <name>toStringList</name>
      <anchor>toStringList</anchor>
      <arglist>( const QString &amp; prefix = QString()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlIndex</name>
    <filename>qsqlindex.html</filename>
    <member kind="function">
      <name>QSqlIndex</name>
      <anchor>QSqlIndex</anchor>
      <arglist>( const QString &amp; cursorname = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSqlIndex</name>
      <anchor>QSqlIndex-2</anchor>
      <arglist>( const QSqlIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QSqlField &amp; field )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-2</anchor>
      <arglist>( const QSqlField &amp; field, bool desc )</arglist>
    </member>
    <member kind="function">
      <name>cursorName</name>
      <anchor>cursorName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDescending</name>
      <anchor>isDescending</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCursorName</name>
      <anchor>setCursorName</anchor>
      <arglist>( const QString &amp; cursorName )</arglist>
    </member>
    <member kind="function">
      <name>setDescending</name>
      <anchor>setDescending</anchor>
      <arglist>( int i, bool desc )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSqlIndex &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>prev</name>
      <anchor>prev</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlQuery</name>
    <filename>qsqlquery.html</filename>
    <member kind="function">
      <name>QSqlQuery</name>
      <anchor>QSqlQuery</anchor>
      <arglist>( QSqlResult * result )</arglist>
    </member>
    <member kind="function">
      <name>QSqlQuery</name>
      <anchor>QSqlQuery-2</anchor>
      <arglist>( const QString &amp; query = QString()</arglist>
    </member>
    <member kind="function">
      <name>QSqlQuery</name>
      <anchor>QSqlQuery-3</anchor>
      <arglist>( QSqlDatabase db )</arglist>
    </member>
    <member kind="function">
      <name>QSqlQuery</name>
      <anchor>QSqlQuery-4</anchor>
      <arglist>( const QSqlQuery &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>addBindValue</name>
      <anchor>addBindValue</anchor>
      <arglist>( const QVariant &amp; val, QSql::ParamType paramType = QSql::In )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bindValue</name>
      <anchor>bindValue</anchor>
      <arglist>( const QString &amp; placeholder, const QVariant &amp; val, QSql::ParamType paramType = QSql::In )</arglist>
    </member>
    <member kind="function">
      <name>bindValue</name>
      <anchor>bindValue-2</anchor>
      <arglist>( int pos, const QVariant &amp; val, QSql::ParamType paramType = QSql::In )</arglist>
    </member>
    <member kind="function">
      <name>boundValue</name>
      <anchor>boundValue</anchor>
      <arglist>( const QString &amp; placeholder )</arglist>
    </member>
    <member kind="function">
      <name>boundValue</name>
      <anchor>boundValue-2</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>boundValues</name>
      <anchor>boundValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>driver</name>
      <anchor>driver</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>( const QString &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>executedQuery</name>
      <anchor>executedQuery</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isForwardOnly</name>
      <anchor>isForwardOnly</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>( int field )</arglist>
    </member>
    <member kind="function">
      <name>isSelect</name>
      <anchor>isSelect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastError</name>
      <anchor>lastError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastInsertId</name>
      <anchor>lastInsertId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastQuery</name>
      <anchor>lastQuery</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numRowsAffected</name>
      <anchor>numRowsAffected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepare</name>
      <anchor>prepare</anchor>
      <arglist>( const QString &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>result</name>
      <anchor>result</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>seek</name>
      <anchor>seek</anchor>
      <arglist>( int index, bool relative = false )</arglist>
    </member>
    <member kind="function">
      <name>setForwardOnly</name>
      <anchor>setForwardOnly</anchor>
      <arglist>( bool forward )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSqlQuery &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlQueryModel</name>
    <filename>qsqlquerymodel.html</filename>
    <member kind="function">
      <name>QSqlQueryModel</name>
      <anchor>QSqlQueryModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QModelIndex &amp; item, int role = Qt::DisplayRole )</arglist>
    </member>
    <member kind="function">
      <name>headerData</name>
      <anchor>headerData</anchor>
      <arglist>( int section, Qt::Orientation orientation, int role = Qt::DisplayRole )</arglist>
    </member>
    <member kind="function">
      <name>indexInQuery</name>
      <anchor>indexInQuery</anchor>
      <arglist>( const QModelIndex &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>insertColumns</name>
      <anchor>insertColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>lastError</name>
      <anchor>lastError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>query</name>
      <anchor>query</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>queryChange</name>
      <anchor>queryChange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeColumns</name>
      <anchor>removeColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>setHeaderData</name>
      <anchor>setHeaderData</anchor>
      <arglist>( int section, Qt::Orientation orientation, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>setLastError</name>
      <anchor>setLastError</anchor>
      <arglist>( const QSqlError &amp; error )</arglist>
    </member>
    <member kind="function">
      <name>setQuery</name>
      <anchor>setQuery</anchor>
      <arglist>( const QSqlQuery &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>setQuery</name>
      <anchor>setQuery-2</anchor>
      <arglist>( const QString &amp; query, const QSqlDatabase &amp; db = QSqlDatabase()</arglist>
    </member>
    <member kind="function">
      <name>fieldPtr</name>
      <anchor>fieldPtr</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>fieldPtr</name>
      <anchor>fieldPtr-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>position</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( const QString &amp; prefix = QString()</arglist>
    </member>
    <member kind="function">
      <name>toStringList</name>
      <anchor>toStringList</anchor>
      <arglist>( const QString &amp; prefix = QString()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlRecord</name>
    <filename>qsqlrecord.html</filename>
    <member kind="function">
      <name>QSqlRecord</name>
      <anchor>QSqlRecord</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSqlRecord</name>
      <anchor>QSqlRecord-2</anchor>
      <arglist>( const QSqlRecord &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QSqlField &amp; field )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearValues</name>
      <anchor>clearValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>field</name>
      <anchor>field</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>field</name>
      <anchor>field-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>fieldName</name>
      <anchor>fieldName</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( int pos, const QSqlField &amp; field )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isGenerated</name>
      <anchor>isGenerated</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>isGenerated</name>
      <anchor>isGenerated-2</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull-2</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( int pos, const QSqlField &amp; field )</arglist>
    </member>
    <member kind="function">
      <name>setGenerated</name>
      <anchor>setGenerated</anchor>
      <arglist>( const QString &amp; name, bool generated )</arglist>
    </member>
    <member kind="function">
      <name>setGenerated</name>
      <anchor>setGenerated-2</anchor>
      <arglist>( int index, bool generated )</arglist>
    </member>
    <member kind="function">
      <name>setNull</name>
      <anchor>setNull</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setNull</name>
      <anchor>setNull-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( int index, const QVariant &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue-2</anchor>
      <arglist>( const QString &amp; name, const QVariant &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QSqlRecord &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QSqlRecord &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QSqlRecord &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlRelation</name>
    <filename>qsqlrelation.html</filename>
    <member kind="function">
      <name>QSqlRelation</name>
      <anchor>QSqlRelation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QSqlRelation</name>
      <anchor>QSqlRelation-2</anchor>
      <arglist>( const QString &amp; tableName, const QString &amp; indexColumn, const QString &amp; displayColumn )</arglist>
    </member>
    <member kind="function">
      <name>displayColumn</name>
      <anchor>displayColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexColumn</name>
      <anchor>indexColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tableName</name>
      <anchor>tableName</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlRelationalTableModel</name>
    <filename>qsqlrelationaltablemodel.html</filename>
    <member kind="function">
      <name>QSqlRelationalTableModel</name>
      <anchor>QSqlRelationalTableModel</anchor>
      <arglist>( QObject * parent = 0, QSqlDatabase db = QSqlDatabase()</arglist>
    </member>
    <member kind="function">
      <name>orderByClause</name>
      <anchor>orderByClause</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>relation</name>
      <anchor>relation</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>relationModel</name>
      <anchor>relationModel</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>setRelation</name>
      <anchor>setRelation</anchor>
      <arglist>( int column, const QSqlRelation &amp; relation )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlResult</name>
    <filename>qsqlresult.html</filename>
    <member kind="enum">
      <name>BindingSyntax</name>
      <anchor>BindingSyntax-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSqlResult</name>
      <anchor>QSqlResult</anchor>
      <arglist>( const QSqlDriver * db )</arglist>
    </member>
    <member kind="function">
      <name>addBindValue</name>
      <anchor>addBindValue</anchor>
      <arglist>( const QVariant &amp; val, QSql::ParamType paramType )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>bindValue</name>
      <anchor>bindValue</anchor>
      <arglist>( int index, const QVariant &amp; val, QSql::ParamType paramType )</arglist>
    </member>
    <member kind="function">
      <name>bindValue</name>
      <anchor>bindValue-2</anchor>
      <arglist>( const QString &amp; placeholder, const QVariant &amp; val, QSql::ParamType paramType )</arglist>
    </member>
    <member kind="function">
      <name>ParamType</name>
      <anchor>bindValueType</anchor>
      <arglist> QSqlResult::bindValueType( int index )</arglist>
    </member>
    <member kind="function">
      <name>ParamType</name>
      <anchor>bindValueType-2</anchor>
      <arglist> QSqlResult::bindValueType( const QString &amp; placeholder )</arglist>
    </member>
    <member kind="function">
      <name>bindingSyntax</name>
      <anchor>bindingSyntax</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundValue</name>
      <anchor>boundValue</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>boundValue</name>
      <anchor>boundValue-2</anchor>
      <arglist>( const QString &amp; placeholder )</arglist>
    </member>
    <member kind="function">
      <name>boundValueCount</name>
      <anchor>boundValueCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundValueName</name>
      <anchor>boundValueName</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>boundValues</name>
      <anchor>boundValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>driver</name>
      <anchor>driver</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>executedQuery</name>
      <anchor>executedQuery</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fetch</name>
      <anchor>fetch</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>fetchFirst</name>
      <anchor>fetchFirst</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fetchLast</name>
      <anchor>fetchLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fetchNext</name>
      <anchor>fetchNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fetchPrevious</name>
      <anchor>fetchPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>handle</name>
      <anchor>handle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasOutValues</name>
      <anchor>hasOutValues</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isForwardOnly</name>
      <anchor>isForwardOnly</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>isSelect</name>
      <anchor>isSelect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastError</name>
      <anchor>lastError</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastInsertId</name>
      <anchor>lastInsertId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastQuery</name>
      <anchor>lastQuery</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numRowsAffected</name>
      <anchor>numRowsAffected</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepare</name>
      <anchor>prepare</anchor>
      <arglist>( const QString &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>record</name>
      <anchor>record</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>( const QString &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>savePrepare</name>
      <anchor>savePrepare</anchor>
      <arglist>( const QString &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>setActive</name>
      <anchor>setActive</anchor>
      <arglist>( bool active )</arglist>
    </member>
    <member kind="function">
      <name>setAt</name>
      <anchor>setAt</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setForwardOnly</name>
      <anchor>setForwardOnly</anchor>
      <arglist>( bool forward )</arglist>
    </member>
    <member kind="function">
      <name>setLastError</name>
      <anchor>setLastError</anchor>
      <arglist>( const QSqlError &amp; error )</arglist>
    </member>
    <member kind="function">
      <name>setQuery</name>
      <anchor>setQuery</anchor>
      <arglist>( const QString &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>setSelect</name>
      <anchor>setSelect</anchor>
      <arglist>( bool select )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSqlTableModel</name>
    <filename>qsqltablemodel.html</filename>
    <member kind="enum">
      <name>EditStrategy</name>
      <anchor>EditStrategy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QSqlTableModel</name>
      <anchor>QSqlTableModel</anchor>
      <arglist>( QObject * parent = 0, QSqlDatabase db = QSqlDatabase()</arglist>
    </member>
    <member kind="function">
      <name>beforeDelete</name>
      <anchor>beforeDelete</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>beforeInsert</name>
      <anchor>beforeInsert</anchor>
      <arglist>( QSqlRecord &amp; record )</arglist>
    </member>
    <member kind="function">
      <name>beforeUpdate</name>
      <anchor>beforeUpdate</anchor>
      <arglist>( int row, QSqlRecord &amp; record )</arglist>
    </member>
    <member kind="function">
      <name>database</name>
      <anchor>database</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteRowFromTable</name>
      <anchor>deleteRowFromTable</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>editStrategy</name>
      <anchor>editStrategy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fieldIndex</name>
      <anchor>fieldIndex</anchor>
      <arglist>( const QString &amp; fieldName )</arglist>
    </member>
    <member kind="function">
      <name>filter</name>
      <anchor>filter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexInQuery</name>
      <anchor>indexInQuery</anchor>
      <arglist>( const QModelIndex &amp; item )</arglist>
    </member>
    <member kind="function">
      <name>insertRecord</name>
      <anchor>insertRecord</anchor>
      <arglist>( int row, const QSqlRecord &amp; record )</arglist>
    </member>
    <member kind="function">
      <name>insertRowIntoTable</name>
      <anchor>insertRowIntoTable</anchor>
      <arglist>( const QSqlRecord &amp; values )</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>isDirty</name>
      <anchor>isDirty</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>orderByClause</name>
      <anchor>orderByClause</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primaryKey</name>
      <anchor>primaryKey</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>primeInsert</name>
      <anchor>primeInsert</anchor>
      <arglist>( int row, QSqlRecord &amp; record )</arglist>
    </member>
    <member kind="function">
      <name>removeColumns</name>
      <anchor>removeColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>removeRows</name>
      <anchor>removeRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>revert</name>
      <anchor>revert</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>revertAll</name>
      <anchor>revertAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>revertRow</name>
      <anchor>revertRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectStatement</name>
      <anchor>selectStatement</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>setEditStrategy</name>
      <anchor>setEditStrategy</anchor>
      <arglist>( EditStrategy strategy )</arglist>
    </member>
    <member kind="function">
      <name>setFilter</name>
      <anchor>setFilter</anchor>
      <arglist>( const QString &amp; filter )</arglist>
    </member>
    <member kind="function">
      <name>setPrimaryKey</name>
      <anchor>setPrimaryKey</anchor>
      <arglist>( const QSqlIndex &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>setQuery</name>
      <anchor>setQuery</anchor>
      <arglist>( const QSqlQuery &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>setRecord</name>
      <anchor>setRecord</anchor>
      <arglist>( int row, const QSqlRecord &amp; record )</arglist>
    </member>
    <member kind="function">
      <name>setSort</name>
      <anchor>setSort</anchor>
      <arglist>( int column, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>setTable</name>
      <anchor>setTable</anchor>
      <arglist>( const QString &amp; tableName )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>( int column, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>submit</name>
      <anchor>submit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>submitAll</name>
      <anchor>submitAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tableName</name>
      <anchor>tableName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateRowInTable</name>
      <anchor>updateRowInTable</anchor>
      <arglist>( int row, const QSqlRecord &amp; values )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStack</name>
    <filename>qstack.html</filename>
    <member kind="function">
      <name>QStack</name>
      <anchor>QStack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop</name>
      <anchor>pop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>push</name>
      <anchor>push</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>top-2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStackedLayout</name>
    <filename>qstackedlayout.html</filename>
    <member kind="function">
      <name>QStackedLayout</name>
      <anchor>QStackedLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStackedLayout</name>
      <anchor>QStackedLayout-2</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>QStackedLayout</name>
      <anchor>QStackedLayout-3</anchor>
      <arglist>( QLayout * parentLayout )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>currentWidget</name>
      <anchor>currentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertWidget</name>
      <anchor>insertWidget</anchor>
      <arglist>( int index, QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentWidget</name>
      <anchor>setCurrentWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>widgetRemoved</name>
      <anchor>widgetRemoved</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStackedWidget</name>
    <filename>qstackedwidget.html</filename>
    <member kind="function">
      <name>QStackedWidget</name>
      <anchor>QStackedWidget</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>currentWidget</name>
      <anchor>currentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>insertWidget</name>
      <anchor>insertWidget</anchor>
      <arglist>( int index, QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>removeWidget</name>
      <anchor>removeWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentWidget</name>
      <anchor>setCurrentWidget</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>widgetRemoved</name>
      <anchor>widgetRemoved</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStandardItemModel</name>
    <filename>qstandarditemmodel.html</filename>
    <member kind="function">
      <name>QStandardItemModel</name>
      <anchor>QStandardItemModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QStandardItemModel</name>
      <anchor>QStandardItemModel-2</anchor>
      <arglist>( int rows, int columns, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>columnCount</name>
      <anchor>columnCount</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QModelIndex &amp; index, int role = Qt::DisplayRole )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QStandardItemModel::flags( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>hasChildren</name>
      <anchor>hasChildren</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( int row, int column, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>insertColumns</name>
      <anchor>insertColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>( const QModelIndex &amp; child )</arglist>
    </member>
    <member kind="function">
      <name>removeColumns</name>
      <anchor>removeColumns</anchor>
      <arglist>( int column, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>removeRows</name>
      <anchor>removeRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>rowCount</name>
      <anchor>rowCount</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>QStatusBar</name>
      <anchor>QStatusBar-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget-2</anchor>
      <arglist>( QWidget * widget, int stretch, bool permanent )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>message</name>
      <anchor>message</anchor>
      <arglist>( const QString &amp; message, int timeout = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStatusBar</name>
    <filename>qstatusbar.html</filename>
    <member kind="function">
      <name>QStatusBar</name>
      <anchor>QStatusBar</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addPermanentWidget</name>
      <anchor>addPermanentWidget</anchor>
      <arglist>( QWidget * widget, int stretch = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * widget, int stretch = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clearMessage</name>
      <anchor>clearMessage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentMessage</name>
      <anchor>currentMessage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideOrShow</name>
      <anchor>hideOrShow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>messageChanged</name>
      <anchor>messageChanged</anchor>
      <arglist>( const QString &amp; message )</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>reformat</name>
      <anchor>reformat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeWidget</name>
      <anchor>removeWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>showMessage</name>
      <anchor>showMessage</anchor>
      <arglist>( const QString &amp; message, int timeout = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QString::Null</name>
    <filename>qstring-null.html</filename>
    <member kind="function">
      <name>ascii</name>
      <anchor>ascii</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constref</name>
      <anchor>constref</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-2</anchor>
      <arglist>( QChar c, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-3</anchor>
      <arglist>( const QString &amp; s, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>endsWith-2</anchor>
      <arglist>( const QString &amp; s, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( QChar c, int i = 0, bool cs = true )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const QString &amp; s, int i = 0, bool cs = true )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-3</anchor>
      <arglist>( const QRegExp &amp; rx, int i = 0 )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev</anchor>
      <arglist>( QChar c, int i = -1, bool cs = true )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev-2</anchor>
      <arglist>( const QString &amp; s, int i = -1, bool cs = true )</arglist>
    </member>
    <member kind="function">
      <name>findRev</name>
      <anchor>findRev-3</anchor>
      <arglist>( const QRegExp &amp; rx, int i = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromUcs2</name>
      <anchor>fromUcs2</anchor>
      <arglist>( const ushort * unicode, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>latin1</name>
      <anchor>latin1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftJustify</name>
      <anchor>leftJustify</anchor>
      <arglist>( int width, QChar fill = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>local8Bit</name>
      <anchor>local8Bit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lower</name>
      <anchor>lower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ref</name>
      <anchor>ref</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( QChar c, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-3</anchor>
      <arglist>( const QString &amp; s, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-2</anchor>
      <arglist>( QChar c, const QString &amp; after, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-3</anchor>
      <arglist>( const QString &amp; before, const QString &amp; after, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-4</anchor>
      <arglist>( char c, const QString &amp; after, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-5</anchor>
      <arglist>( char c, const QString &amp; after, Qt::CaseSensitivity cs )</arglist>
    </member>
    <member kind="function">
      <name>rightJustify</name>
      <anchor>rightJustify</anchor>
      <arglist>( int width, QChar fill = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>setAscii</name>
      <anchor>setAscii</anchor>
      <arglist>( const char * str, int len = -1 )</arglist>
    </member>
    <member kind="function">
      <name>setLatin1</name>
      <anchor>setLatin1</anchor>
      <arglist>( const char * str, int len = -1 )</arglist>
    </member>
    <member kind="function">
      <name>setLength</name>
      <anchor>setLength</anchor>
      <arglist>( int nl )</arglist>
    </member>
    <member kind="function">
      <name>setUnicodeCodes</name>
      <anchor>setUnicodeCodes</anchor>
      <arglist>( const ushort * unicode_as_ushorts, int size )</arglist>
    </member>
    <member kind="function">
      <name>simplifyWhiteSpace</name>
      <anchor>simplifyWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>startsWith-2</anchor>
      <arglist>( const QString &amp; s, bool cs )</arglist>
    </member>
    <member kind="function">
      <name>stripWhiteSpace</name>
      <anchor>stripWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ucs2</name>
      <anchor>ucs2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>upper</name>
      <anchor>upper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>utf8</name>
      <anchor>utf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-const-char--2a</anchor>
      <arglist> const char *()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QString</name>
    <filename>qstring.html</filename>
    <member kind="enum">
      <name>NormalizationForm</name>
      <anchor>NormalizationForm-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SplitBehavior</name>
      <anchor>SplitBehavior-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-2</anchor>
      <arglist>( const QChar * unicode, int size )</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-3</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-4</anchor>
      <arglist>( int size, QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-5</anchor>
      <arglist>( const QLatin1String &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-6</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-7</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>QString</name>
      <anchor>QString-8</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-2</anchor>
      <arglist>( const QLatin1String &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-3</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-4</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-5</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg</anchor>
      <arglist>( const QString &amp; a, int fieldWidth = 0, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-2</anchor>
      <arglist>( const QString &amp; a1, const QString &amp; a2 )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-3</anchor>
      <arglist>( const QString &amp; a1, const QString &amp; a2, const QString &amp; a3 )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-4</anchor>
      <arglist>( const QString &amp; a1, const QString &amp; a2, const QString &amp; a3, const QString &amp; a4 )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-5</anchor>
      <arglist>( int a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-6</anchor>
      <arglist>( uint a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-7</anchor>
      <arglist>( long a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-8</anchor>
      <arglist>( ulong a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-9</anchor>
      <arglist>( qlonglong a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-10</anchor>
      <arglist>( qulonglong a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-11</anchor>
      <arglist>( short a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-12</anchor>
      <arglist>( ushort a, int fieldWidth = 0, int base = 10, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-13</anchor>
      <arglist>( QChar a, int fieldWidth = 0, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-14</anchor>
      <arglist>( char a, int fieldWidth = 0, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>arg</name>
      <anchor>arg-15</anchor>
      <arglist>( double a, int fieldWidth = 0, char fmt = &apos;g&apos;, int prec = -1, const QChar &amp; fillChar = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>capacity</name>
      <anchor>capacity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>chop</name>
      <anchor>chop</anchor>
      <arglist>( int n )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>compare</anchor>
      <arglist>( const QString &amp; s1, const QString &amp; s2 )</arglist>
    </member>
    <member kind="function">
      <name>compare</name>
      <anchor>compare-2</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>constData</name>
      <anchor>constData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; str, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-4</anchor>
      <arglist>( QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains-5</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const QString &amp; str, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>( QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-3</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>endsWith</anchor>
      <arglist>( const QString &amp; s, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>endsWith</name>
      <anchor>endsWith-3</anchor>
      <arglist>( const QLatin1String &amp; s, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( QChar ch, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromAscii</name>
      <anchor>fromAscii</anchor>
      <arglist>( const char * str, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromLatin1</name>
      <anchor>fromLatin1</anchor>
      <arglist>( const char * str, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromLocal8Bit</name>
      <anchor>fromLocal8Bit</anchor>
      <arglist>( const char * str, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromRawData</name>
      <anchor>fromRawData</anchor>
      <arglist>( const QChar * unicode, int size )</arglist>
    </member>
    <member kind="function">
      <name>fromStdString</name>
      <anchor>fromStdString</anchor>
      <arglist>( const std::string &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>fromStdWString</name>
      <anchor>fromStdWString</anchor>
      <arglist>( const std::wstring &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>fromUtf16</name>
      <anchor>fromUtf16</anchor>
      <arglist>( const ushort * unicode, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>fromUtf8</name>
      <anchor>fromUtf8</anchor>
      <arglist>( const char * str, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( const QString &amp; str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf-2</anchor>
      <arglist>( QChar ch, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf-3</anchor>
      <arglist>( const QRegExp &amp; rx, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( int i, const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( int i, const QLatin1String &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-3</anchor>
      <arglist>( int i, const QChar * unicode, int size )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-4</anchor>
      <arglist>( int i, QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf</anchor>
      <arglist>( const QString &amp; str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf-2</anchor>
      <arglist>( QChar ch, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf-3</anchor>
      <arglist>( const QRegExp &amp; rx, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>left</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>leftJustified</name>
      <anchor>leftJustified</anchor>
      <arglist>( int width, QChar fill = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localeAwareCompare</name>
      <anchor>localeAwareCompare</anchor>
      <arglist>( const QString &amp; s1, const QString &amp; s2 )</arglist>
    </member>
    <member kind="function">
      <name>localeAwareCompare</name>
      <anchor>localeAwareCompare-2</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>mid</name>
      <anchor>mid</anchor>
      <arglist>( int i, int len = -1 )</arglist>
    </member>
    <member kind="function">
      <name>normalized</name>
      <anchor>normalized</anchor>
      <arglist>( NormalizationForm form )</arglist>
    </member>
    <member kind="function">
      <name>normalized</name>
      <anchor>normalized-2</anchor>
      <arglist>( NormalizationForm form, QChar::UnicodeVersion version )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number</anchor>
      <arglist>( long n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-2</anchor>
      <arglist>( ulong n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-3</anchor>
      <arglist>( int n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-4</anchor>
      <arglist>( uint n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-5</anchor>
      <arglist>( qlonglong n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-6</anchor>
      <arglist>( qulonglong n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>number-7</anchor>
      <arglist>( double n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend-2</anchor>
      <arglist>( const QLatin1String &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend-3</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend-4</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend-5</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back-2</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front-2</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( int pos, int len )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-4</anchor>
      <arglist>( const QString &amp; str, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-5</anchor>
      <arglist>( QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-6</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( int pos, int len, const QString &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-6</anchor>
      <arglist>( int pos, int len, const QChar * unicode, int size )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-7</anchor>
      <arglist>( int pos, int len, QChar after )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-8</anchor>
      <arglist>( const QString &amp; before, const QString &amp; after, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-9</anchor>
      <arglist>( QChar ch, const QString &amp; after, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-10</anchor>
      <arglist>( QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace-11</anchor>
      <arglist>( const QRegExp &amp; rx, const QString &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>reserve</name>
      <anchor>reserve</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>right</name>
      <anchor>right</anchor>
      <arglist>( int len )</arglist>
    </member>
    <member kind="function">
      <name>rightJustified</name>
      <anchor>rightJustified</anchor>
      <arglist>( int width, QChar fill = QLatin1Char( &apos; &apos; )</arglist>
    </member>
    <member kind="function">
      <name>section</name>
      <anchor>section</anchor>
      <arglist>( QChar sep, int start, int end = -1, SectionFlags flags = SectionDefault )</arglist>
    </member>
    <member kind="function">
      <name>section</name>
      <anchor>section-2</anchor>
      <arglist>( const QString &amp; sep, int start, int end = -1, SectionFlags flags = SectionDefault )</arglist>
    </member>
    <member kind="function">
      <name>section</name>
      <anchor>section-3</anchor>
      <arglist>( const QRegExp &amp; reg, int start, int end = -1, SectionFlags flags = SectionDefault )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum</anchor>
      <arglist>( int n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-2</anchor>
      <arglist>( uint n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-3</anchor>
      <arglist>( long n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-4</anchor>
      <arglist>( ulong n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-5</anchor>
      <arglist>( qlonglong n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-6</anchor>
      <arglist>( qulonglong n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-7</anchor>
      <arglist>( short n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-8</anchor>
      <arglist>( ushort n, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-9</anchor>
      <arglist>( double n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>setNum</name>
      <anchor>setNum-10</anchor>
      <arglist>( float n, char f = &apos;g&apos;, int prec = 6 )</arglist>
    </member>
    <member kind="function">
      <name>setUnicode</name>
      <anchor>setUnicode</anchor>
      <arglist>( const QChar * unicode, int size )</arglist>
    </member>
    <member kind="function">
      <name>setUtf16</name>
      <anchor>setUtf16</anchor>
      <arglist>( const ushort * unicode, int size )</arglist>
    </member>
    <member kind="function">
      <name>simplified</name>
      <anchor>simplified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split</anchor>
      <arglist>( const QString &amp; sep, SplitBehavior behavior = KeepEmptyParts, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split-2</anchor>
      <arglist>( const QChar &amp; sep, SplitBehavior behavior = KeepEmptyParts, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split-3</anchor>
      <arglist>( const QRegExp &amp; rx, SplitBehavior behavior = KeepEmptyParts )</arglist>
    </member>
    <member kind="function">
      <name>sprintf</name>
      <anchor>sprintf</anchor>
      <arglist>( const char * cformat, ... )</arglist>
    </member>
    <member kind="function">
      <name>squeeze</name>
      <anchor>squeeze</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>startsWith</anchor>
      <arglist>( const QString &amp; s, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>startsWith</name>
      <anchor>startsWith-3</anchor>
      <arglist>( const QLatin1String &amp; s, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>toAscii</name>
      <anchor>toAscii</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDouble</name>
      <anchor>toDouble</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toFloat</name>
      <anchor>toFloat</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toInt</name>
      <anchor>toInt</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toLatin1</name>
      <anchor>toLatin1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLocal8Bit</name>
      <anchor>toLocal8Bit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLong</name>
      <anchor>toLong</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toLongLong</name>
      <anchor>toLongLong</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toLower</name>
      <anchor>toLower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toShort</name>
      <anchor>toShort</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>string</name>
      <anchor>toStdString</anchor>
      <arglist> QString::toStdString()</arglist>
    </member>
    <member kind="function">
      <name>wstring</name>
      <anchor>toStdWString</anchor>
      <arglist> QString::toStdWString()</arglist>
    </member>
    <member kind="function">
      <name>toUInt</name>
      <anchor>toUInt</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toULong</name>
      <anchor>toULong</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toULongLong</name>
      <anchor>toULongLong</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toUShort</name>
      <anchor>toUShort</anchor>
      <arglist>( bool * ok = 0, int base = 10 )</arglist>
    </member>
    <member kind="function">
      <name>toUpper</name>
      <anchor>toUpper</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUtf8</name>
      <anchor>toUtf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>trimmed</name>
      <anchor>trimmed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>truncate</name>
      <anchor>truncate</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>unicode</name>
      <anchor>unicode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>utf16</name>
      <anchor>utf16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>vsprintf</name>
      <anchor>vsprintf</anchor>
      <arglist>( const char * cformat, va_list ap )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-2</anchor>
      <arglist>( const QLatin1String &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-3</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-4</anchor>
      <arglist>( const char * other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-2</anchor>
      <arglist>( const QLatin1String &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-3</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-4</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-5</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-6</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt-2</anchor>
      <arglist>( const QLatin1String &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt-3</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt-4</anchor>
      <arglist>( const char * other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq-2</anchor>
      <arglist>( const QLatin1String &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq-3</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq-4</anchor>
      <arglist>( const char * other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-3</anchor>
      <arglist>( const QLatin1String &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-4</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-5</anchor>
      <arglist>( const char * str )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-6</anchor>
      <arglist>( char ch )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq-7</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const QLatin1String &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-3</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-4</anchor>
      <arglist>( const char * other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt-2</anchor>
      <arglist>( const QLatin1String &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt-3</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt-4</anchor>
      <arglist>( const char * other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QString &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq-2</anchor>
      <arglist>( const QLatin1String &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq-3</anchor>
      <arglist>( const QByteArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq-4</anchor>
      <arglist>( const char * other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-3</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-4</anchor>
      <arglist>( uint i )</arglist>
    </member>
    <member kind="function">
      <name>fromLast</name>
      <anchor>fromLast</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromLast</name>
      <anchor>fromLast-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>grep</name>
      <anchor>grep</anchor>
      <arglist>( const QString &amp; str, bool cs = true )</arglist>
    </member>
    <member kind="function">
      <name>grep</name>
      <anchor>grep-2</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>gres</name>
      <anchor>gres</anchor>
      <arglist>( const QString &amp; before, const QString &amp; after, bool cs = true )</arglist>
    </member>
    <member kind="function">
      <name>gres</name>
      <anchor>gres-2</anchor>
      <arglist>( const QRegExp &amp; rx, const QString &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split</anchor>
      <arglist>( const QRegExp &amp; sep, const QString &amp; str, bool allowEmptyEntries = false )</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split-2</anchor>
      <arglist>( const QChar &amp; sep, const QString &amp; str, bool allowEmptyEntries = false )</arglist>
    </member>
    <member kind="function">
      <name>split</name>
      <anchor>split-3</anchor>
      <arglist>( const QString &amp; sep, const QString &amp; str, bool allowEmptyEntries = false )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStringList</name>
    <filename>qstringlist.html</filename>
    <member kind="function">
      <name>QStringList</name>
      <anchor>QStringList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStringList</name>
      <anchor>QStringList-2</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>QStringList</name>
      <anchor>QStringList-3</anchor>
      <arglist>( const QStringList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QStringList</name>
      <anchor>QStringList-4</anchor>
      <arglist>( const QList&lt;QString&gt; &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const QString &amp; str, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>filter</name>
      <anchor>filter</anchor>
      <arglist>( const QString &amp; str, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>filter</name>
      <anchor>filter-2</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( const QRegExp &amp; rx, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>join</name>
      <anchor>join</anchor>
      <arglist>( const QString &amp; sep )</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf</anchor>
      <arglist>( const QRegExp &amp; rx, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>replaceInStrings</name>
      <anchor>replaceInStrings</anchor>
      <arglist>( const QString &amp; before, const QString &amp; after, Qt::CaseSensitivity cs = Qt::CaseSensitive )</arglist>
    </member>
    <member kind="function">
      <name>replaceInStrings</name>
      <anchor>replaceInStrings-2</anchor>
      <arglist>( const QRegExp &amp; rx, const QString &amp; after )</arglist>
    </member>
    <member kind="function">
      <name>sort</name>
      <anchor>sort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QStringList &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-2</anchor>
      <arglist>( const QStringList &amp; l )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStringListModel</name>
    <filename>qstringlistmodel.html</filename>
    <member kind="function">
      <name>QStringListModel</name>
      <anchor>QStringListModel</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QStringListModel</name>
      <anchor>QStringListModel-2</anchor>
      <arglist>( const QStringList &amp; strings, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( const QModelIndex &amp; index, int role )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QStringListModel::flags( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>removeRows</name>
      <anchor>removeRows</anchor>
      <arglist>( int row, int count, const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>rowCount</name>
      <anchor>rowCount</anchor>
      <arglist>( const QModelIndex &amp; parent = QModelIndex()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QModelIndex &amp; index, const QVariant &amp; value, int role = Qt::EditRole )</arglist>
    </member>
    <member kind="function">
      <name>setStringList</name>
      <anchor>setStringList</anchor>
      <arglist>( const QStringList &amp; strings )</arglist>
    </member>
    <member kind="function">
      <name>stringList</name>
      <anchor>stringList</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyle</name>
    <filename>qstyle.html</filename>
    <member kind="enum">
      <name>ComplexControl</name>
      <anchor>ComplexControl-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ContentsType</name>
      <anchor>ContentsType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ControlElement</name>
      <anchor>ControlElement-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PixelMetric</name>
      <anchor>PixelMetric-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PrimitiveElement</name>
      <anchor>PrimitiveElement-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StandardPixmap</name>
      <anchor>StandardPixmap-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>StyleHint</name>
      <anchor>StyleHint-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SubElement</name>
      <anchor>SubElement-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyle</name>
      <anchor>QStyle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alignedRect</name>
      <anchor>alignedRect</anchor>
      <arglist>( Qt::LayoutDirection direction, Qt::Alignment alignment, const QSize &amp; size, const QRect &amp; rectangle )</arglist>
    </member>
    <member kind="function">
      <name>drawComplexControl</name>
      <anchor>drawComplexControl</anchor>
      <arglist>( ComplexControl control, const QStyleOptionComplex * option, QPainter * painter, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawControl</name>
      <anchor>drawControl</anchor>
      <arglist>( ControlElement element, const QStyleOption * option, QPainter * painter, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>drawItemPixmap</name>
      <anchor>drawItemPixmap</anchor>
      <arglist>( QPainter * painter, const QRect &amp; rect, int alignment, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>drawItemText</name>
      <anchor>drawItemText</anchor>
      <arglist>( QPainter * painter, const QRect &amp; rect, int alignment, const QPalette &amp; pal, bool enabled, const QString &amp; text, QPalette::ColorRole textRole = QPalette::NoRole )</arglist>
    </member>
    <member kind="function">
      <name>drawPrimitive</name>
      <anchor>drawPrimitive</anchor>
      <arglist>( PrimitiveElement elem, const QStyleOption * option, QPainter * painter, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>generatedIconPixmap</name>
      <anchor>generatedIconPixmap</anchor>
      <arglist>( QIcon::Mode iconMode, const QPixmap &amp; pixmap, const QStyleOption * option )</arglist>
    </member>
    <member kind="function">
      <name>hitTestComplexControl</name>
      <anchor>hitTestComplexControl</anchor>
      <arglist>( ComplexControl control, const QStyleOptionComplex * option, const QPoint &amp; pos, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>itemPixmapRect</name>
      <anchor>itemPixmapRect</anchor>
      <arglist>( const QRect &amp; rect, int alignment, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>itemTextRect</name>
      <anchor>itemTextRect</anchor>
      <arglist>( const QFontMetrics &amp; metrics, const QRect &amp; rect, int alignment, bool enabled, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>pixelMetric</name>
      <anchor>pixelMetric</anchor>
      <arglist>( PixelMetric metric, const QStyleOption * option = 0, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>polish</name>
      <anchor>polish</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>polish</name>
      <anchor>polish-2</anchor>
      <arglist>( QApplication * app )</arglist>
    </member>
    <member kind="function">
      <name>polish</name>
      <anchor>polish-3</anchor>
      <arglist>( QPalette &amp; pal )</arglist>
    </member>
    <member kind="function">
      <name>sizeFromContents</name>
      <anchor>sizeFromContents</anchor>
      <arglist>( ContentsType type, const QStyleOption * option, const QSize &amp; contentsSize, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>sliderPositionFromValue</name>
      <anchor>sliderPositionFromValue</anchor>
      <arglist>( int min, int max, int logicalValue, int span, bool upsideDown = false )</arglist>
    </member>
    <member kind="function">
      <name>sliderValueFromPosition</name>
      <anchor>sliderValueFromPosition</anchor>
      <arglist>( int min, int max, int pos, int span, bool upsideDown = false )</arglist>
    </member>
    <member kind="function">
      <name>standardPalette</name>
      <anchor>standardPalette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>standardPixmap</name>
      <anchor>standardPixmap</anchor>
      <arglist>( StandardPixmap standardPixmap, const QStyleOption * option = 0, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>styleHint</name>
      <anchor>styleHint</anchor>
      <arglist>( StyleHint hint, const QStyleOption * option = 0, const QWidget * widget = 0, QStyleHintReturn * returnData = 0 )</arglist>
    </member>
    <member kind="function">
      <name>subControlRect</name>
      <anchor>subControlRect</anchor>
      <arglist>( ComplexControl control, const QStyleOptionComplex * option, SubControl subControl, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>subElementRect</name>
      <anchor>subElementRect</anchor>
      <arglist>( SubElement element, const QStyleOption * option, const QWidget * widget = 0 )</arglist>
    </member>
    <member kind="function">
      <name>unpolish</name>
      <anchor>unpolish</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>unpolish</name>
      <anchor>unpolish-2</anchor>
      <arglist>( QApplication * app )</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>visualAlignment</anchor>
      <arglist> QStyle::visualAlignment( Qt::LayoutDirection direction, Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>visualPos</name>
      <anchor>visualPos</anchor>
      <arglist>( Qt::LayoutDirection direction, const QRect &amp; boundingRect, const QPoint &amp; logicalPos )</arglist>
    </member>
    <member kind="function">
      <name>visualRect</name>
      <anchor>visualRect</anchor>
      <arglist>( Qt::LayoutDirection direction, const QRect &amp; boundingRect, const QRect &amp; logicalRect )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleFactory</name>
    <filename>qstylefactory.html</filename>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleHintReturn</name>
    <filename>qstylehintreturn.html</filename>
    <member kind="enum">
      <name>HintReturnType</name>
      <anchor>HintReturnType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleHintReturn</name>
      <anchor>QStyleHintReturn</anchor>
      <arglist>( int version = QStyleOption::Version, int type = SH_Default )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOption</name>
    <filename>qstyleoption.html</filename>
    <member kind="enum">
      <name>OptionType</name>
      <anchor>OptionType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>direction</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>State</name>
      <anchor>state</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOption</name>
      <anchor>QStyleOption</anchor>
      <arglist>( int version = QStyleOption::Version, int type = SO_Default )</arglist>
    </member>
    <member kind="function">
      <name>QStyleOption</name>
      <anchor>QStyleOption-2</anchor>
      <arglist>( const QStyleOption &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>init</name>
      <anchor>init</anchor>
      <arglist>( const QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QStyleOption &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionButton</name>
    <filename>qstyleoptionbutton.html</filename>
    <member kind="function">
      <name>QStyleOptionButton</name>
      <anchor>QStyleOptionButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionButton</name>
      <anchor>QStyleOptionButton-2</anchor>
      <arglist>( const QStyleOptionButton &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionComboBox</name>
    <filename>qstyleoptioncombobox.html</filename>
    <member kind="function">
      <name>QStyleOptionComboBox</name>
      <anchor>QStyleOptionComboBox</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionComboBox</name>
      <anchor>QStyleOptionComboBox-2</anchor>
      <arglist>( const QStyleOptionComboBox &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionComplex</name>
    <filename>qstyleoptioncomplex.html</filename>
    <member kind="function">
      <name>SubControls</name>
      <anchor>activeSubControls</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubControls</name>
      <anchor>subControls</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionComplex</name>
      <anchor>QStyleOptionComplex</anchor>
      <arglist>( int version = QStyleOptionComplex::Version, int type = SO_Complex )</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionComplex</name>
      <anchor>QStyleOptionComplex-2</anchor>
      <arglist>( const QStyleOptionComplex &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionDockWidget</name>
    <filename>qstyleoptiondockwidget.html</filename>
    <member kind="function">
      <name>QStyleOptionDockWidget</name>
      <anchor>QStyleOptionDockWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionDockWidget</name>
      <anchor>QStyleOptionDockWidget-2</anchor>
      <arglist>( const QStyleOptionDockWidget &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionFocusRect</name>
    <filename>qstyleoptionfocusrect.html</filename>
    <member kind="function">
      <name>QStyleOptionFocusRect</name>
      <anchor>QStyleOptionFocusRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionFocusRect</name>
      <anchor>QStyleOptionFocusRect-2</anchor>
      <arglist>( const QStyleOptionFocusRect &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionFrame</name>
    <filename>qstyleoptionframe.html</filename>
    <member kind="function">
      <name>QStyleOptionFrame</name>
      <anchor>QStyleOptionFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionFrame</name>
      <anchor>QStyleOptionFrame-2</anchor>
      <arglist>( const QStyleOptionFrame &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionHeader</name>
    <filename>qstyleoptionheader.html</filename>
    <member kind="enum">
      <name>SectionPosition</name>
      <anchor>SectionPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectedPosition</name>
      <anchor>SelectedPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SortIndicator</name>
      <anchor>SortIndicator-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>iconAlignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>textAlignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionHeader</name>
      <anchor>QStyleOptionHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionHeader</name>
      <anchor>QStyleOptionHeader-2</anchor>
      <arglist>( const QStyleOptionHeader &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionMenuItem</name>
    <filename>qstyleoptionmenuitem.html</filename>
    <member kind="enum">
      <name>CheckType</name>
      <anchor>CheckType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>MenuItemType</name>
      <anchor>MenuItemType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionMenuItem</name>
      <anchor>QStyleOptionMenuItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionMenuItem</name>
      <anchor>QStyleOptionMenuItem-2</anchor>
      <arglist>( const QStyleOptionMenuItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionProgressBar</name>
    <filename>qstyleoptionprogressbar.html</filename>
    <member kind="function">
      <name>Alignment</name>
      <anchor>textAlignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionProgressBar</name>
      <anchor>QStyleOptionProgressBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionProgressBar</name>
      <anchor>QStyleOptionProgressBar-2</anchor>
      <arglist>( const QStyleOptionProgressBar &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionQ3DockWindow</name>
    <filename>qstyleoptionq3dockwindow.html</filename>
    <member kind="function">
      <name>QStyleOptionQ3DockWindow</name>
      <anchor>QStyleOptionQ3DockWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionQ3DockWindow</name>
      <anchor>QStyleOptionQ3DockWindow-2</anchor>
      <arglist>( const QStyleOptionQ3DockWindow &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionQ3ListView</name>
    <filename>qstyleoptionq3listview.html</filename>
    <member kind="function">
      <name>ColorRole</name>
      <anchor>viewportBGRole</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionQ3ListView</name>
      <anchor>QStyleOptionQ3ListView</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionQ3ListView</name>
      <anchor>QStyleOptionQ3ListView-2</anchor>
      <arglist>( const QStyleOptionQ3ListView &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionQ3ListViewItem</name>
    <filename>qstyleoptionq3listviewitem.html</filename>
    <member kind="function">
      <name>QStyleOptionQ3ListViewItem</name>
      <anchor>QStyleOptionQ3ListViewItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionQ3ListViewItem</name>
      <anchor>QStyleOptionQ3ListViewItem-2</anchor>
      <arglist>( const QStyleOptionQ3ListViewItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionRubberBand</name>
    <filename>qstyleoptionrubberband.html</filename>
    <member kind="function">
      <name>Shape</name>
      <anchor>shape</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionRubberBand</name>
      <anchor>QStyleOptionRubberBand</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionRubberBand</name>
      <anchor>QStyleOptionRubberBand-2</anchor>
      <arglist>( const QStyleOptionRubberBand &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionSlider</name>
    <filename>qstyleoptionslider.html</filename>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TickPosition</name>
      <anchor>tickPosition</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionSlider</name>
      <anchor>QStyleOptionSlider</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionSlider</name>
      <anchor>QStyleOptionSlider-2</anchor>
      <arglist>( const QStyleOptionSlider &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionSpinBox</name>
    <filename>qstyleoptionspinbox.html</filename>
    <member kind="function">
      <name>ButtonSymbols</name>
      <anchor>buttonSymbols</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StepEnabled</name>
      <anchor>stepEnabled</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionSpinBox</name>
      <anchor>QStyleOptionSpinBox</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionSpinBox</name>
      <anchor>QStyleOptionSpinBox-2</anchor>
      <arglist>( const QStyleOptionSpinBox &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionTab</name>
    <filename>qstyleoptiontab.html</filename>
    <member kind="enum">
      <name>SelectedPosition</name>
      <anchor>SelectedPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TabPosition</name>
      <anchor>TabPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Shape</name>
      <anchor>shape</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionTab</name>
      <anchor>QStyleOptionTab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionTab</name>
      <anchor>QStyleOptionTab-2</anchor>
      <arglist>( const QStyleOptionTab &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionTitleBar</name>
    <filename>qstyleoptiontitlebar.html</filename>
    <member kind="function">
      <name>WFlags</name>
      <anchor>titleBarFlags</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionTitleBar</name>
      <anchor>QStyleOptionTitleBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionTitleBar</name>
      <anchor>QStyleOptionTitleBar-2</anchor>
      <arglist>( const QStyleOptionTitleBar &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionToolBox</name>
    <filename>qstyleoptiontoolbox.html</filename>
    <member kind="function">
      <name>QStyleOptionToolBox</name>
      <anchor>QStyleOptionToolBox</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionToolBox</name>
      <anchor>QStyleOptionToolBox-2</anchor>
      <arglist>( const QStyleOptionToolBox &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionToolButton</name>
    <filename>qstyleoptiontoolbutton.html</filename>
    <member kind="function">
      <name>ArrowType</name>
      <anchor>arrowType</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ToolButtonStyle</name>
      <anchor>toolButtonStyle</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionToolButton</name>
      <anchor>QStyleOptionToolButton</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionToolButton</name>
      <anchor>QStyleOptionToolButton-2</anchor>
      <arglist>( const QStyleOptionToolButton &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStyleOptionViewItem</name>
    <filename>qstyleoptionviewitem.html</filename>
    <member kind="enum">
      <name>Position</name>
      <anchor>Position-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>decorationAlignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>displayAlignment</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextElideMode</name>
      <anchor>textElideMode</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionViewItem</name>
      <anchor>QStyleOptionViewItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStyleOptionViewItem</name>
      <anchor>QStyleOptionViewItem-2</anchor>
      <arglist>( const QStyleOptionViewItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStylePainter</name>
    <filename>qstylepainter.html</filename>
    <member kind="function">
      <name>QStylePainter</name>
      <anchor>QStylePainter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QStylePainter</name>
      <anchor>QStylePainter-2</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>QStylePainter</name>
      <anchor>QStylePainter-3</anchor>
      <arglist>( QPaintDevice * pd, QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>( QPaintDevice * pd, QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>drawComplexControl</name>
      <anchor>drawComplexControl</anchor>
      <arglist>( QStyle::ComplexControl cc, const QStyleOptionComplex &amp; option )</arglist>
    </member>
    <member kind="function">
      <name>drawControl</name>
      <anchor>drawControl</anchor>
      <arglist>( QStyle::ControlElement ce, const QStyleOption &amp; option )</arglist>
    </member>
    <member kind="function">
      <name>drawItemPixmap</name>
      <anchor>drawItemPixmap</anchor>
      <arglist>( const QRect &amp; rect, int flags, const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>drawItemText</name>
      <anchor>drawItemText</anchor>
      <arglist>( const QRect &amp; r, int flags, const QPalette &amp; pal, bool enabled, const QString &amp; text, QPalette::ColorRole textRole = QPalette::NoRole )</arglist>
    </member>
    <member kind="function">
      <name>drawPrimitive</name>
      <anchor>drawPrimitive</anchor>
      <arglist>( QStyle::PrimitiveElement pe, const QStyleOption &amp; option )</arglist>
    </member>
    <member kind="function">
      <name>style</name>
      <anchor>style</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QStylePlugin</name>
    <filename>qstyleplugin.html</filename>
    <member kind="function">
      <name>QStylePlugin</name>
      <anchor>QStylePlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QSysInfo</name>
    <filename>qsysinfo.html</filename>
    <member kind="enum">
      <name>Endian</name>
      <anchor>Endian-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>MacVersion</name>
      <anchor>MacVersion-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WinVersion</name>
      <anchor>WinVersion-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WFlags</name>
      <anchor>WFlags-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>BackgroundMode</name>
      <anchor>BackgroundMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>ButtonState-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ButtonState_enum</name>
      <anchor>ButtonState_enum-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>GUIStyle</name>
      <anchor>GUIStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>MacintoshVersion</name>
      <anchor>MacintoshVersion-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PaintUnit</name>
      <anchor>PaintUnit-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ScaleMode</name>
      <anchor>ScaleMode-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextFlags</name>
      <anchor>TextFlags-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ToolBarDock</name>
      <anchor>ToolBarDock-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WindowsVersion</name>
      <anchor>WindowsVersion-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>AnchorAttribute</name>
      <anchor>AnchorAttribute-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ArrowType</name>
      <anchor>ArrowType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>AspectRatioMode</name>
      <anchor>AspectRatioMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>BGMode</name>
      <anchor>BGMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>BrushStyle</name>
      <anchor>BrushStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>CaseSensitivity</name>
      <anchor>CaseSensitivity-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>CheckState</name>
      <anchor>CheckState-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ClipOperation</name>
      <anchor>ClipOperation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ConnectionType</name>
      <anchor>ConnectionType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ContextMenuPolicy</name>
      <anchor>ContextMenuPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Corner</name>
      <anchor>Corner-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>CursorShape</name>
      <anchor>CursorShape-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>DayOfWeek</name>
      <anchor>DayOfWeek-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Dock</name>
      <anchor>Dock-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FillRule</name>
      <anchor>FillRule-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FocusPolicy</name>
      <anchor>FocusPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>FocusReason</name>
      <anchor>FocusReason-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>GlobalColor</name>
      <anchor>GlobalColor-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>HANDLE-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>HitTestAccuracy</name>
      <anchor>HitTestAccuracy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>InputMethodQuery</name>
      <anchor>InputMethodQuery-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ItemDataRole</name>
      <anchor>ItemDataRole-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Key</name>
      <anchor>Key-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>LayoutDirection</name>
      <anchor>LayoutDirection-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Modifier</name>
      <anchor>Modifier-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PenCapStyle</name>
      <anchor>PenCapStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PenJoinStyle</name>
      <anchor>PenJoinStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>PenStyle</name>
      <anchor>PenStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ScrollBarPolicy</name>
      <anchor>ScrollBarPolicy-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ShortcutContext</name>
      <anchor>ShortcutContext-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SortOrder</name>
      <anchor>SortOrder-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TextElideMode</name>
      <anchor>TextElideMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TextFlag</name>
      <anchor>TextFlag-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TextFormat</name>
      <anchor>TextFormat-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TimeSpec</name>
      <anchor>TimeSpec-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ToolButtonStyle</name>
      <anchor>ToolButtonStyle-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TransformationMode</name>
      <anchor>TransformationMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>UIEffect</name>
      <anchor>UIEffect-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WhiteSpaceMode</name>
      <anchor>WhiteSpaceMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WidgetAttribute</name>
      <anchor>WidgetAttribute-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>convertFromPlainText</name>
      <anchor>convertFromPlainText</anchor>
      <arglist>( const QString &amp; plain, WhiteSpaceMode mode = WhiteSpacePre )</arglist>
    </member>
    <member kind="function">
      <name>escape</name>
      <anchor>escape</anchor>
      <arglist>( const QString &amp; plain )</arglist>
    </member>
    <member kind="function">
      <name>mightBeRichText</name>
      <anchor>mightBeRichText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>selected</name>
      <anchor>selected</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentTab</name>
      <anchor>setCurrentTab</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTabBar</name>
    <filename>qtabbar.html</filename>
    <member kind="enum">
      <name>Shape</name>
      <anchor>Shape-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTabBar</name>
      <anchor>QTabBar</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>addTab</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>addTab-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab</anchor>
      <arglist>( int index, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab-2</anchor>
      <arglist>( int index, const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>isTabEnabled</name>
      <anchor>isTabEnabled</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>removeTab</name>
      <anchor>removeTab</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setTabData</name>
      <anchor>setTabData</anchor>
      <arglist>( int index, const QVariant &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>setTabEnabled</name>
      <anchor>setTabEnabled</anchor>
      <arglist>( int index, bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>setTabIcon</name>
      <anchor>setTabIcon</anchor>
      <arglist>( int index, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setTabText</name>
      <anchor>setTabText</anchor>
      <arglist>( int index, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTabToolTip</name>
      <anchor>setTabToolTip</anchor>
      <arglist>( int index, const QString &amp; tip )</arglist>
    </member>
    <member kind="function">
      <name>tabData</name>
      <anchor>tabData</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabIcon</name>
      <anchor>tabIcon</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabInserted</name>
      <anchor>tabInserted</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabLayoutChange</name>
      <anchor>tabLayoutChange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tabRect</name>
      <anchor>tabRect</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabRemoved</name>
      <anchor>tabRemoved</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabSizeHint</name>
      <anchor>tabSizeHint</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabText</name>
      <anchor>tabText</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabToolTip</name>
      <anchor>tabToolTip</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTabletEvent</name>
    <filename>qtabletevent.html</filename>
    <member kind="enum">
      <name>PointerType</name>
      <anchor>PointerType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TabletDevice</name>
      <anchor>TabletDevice-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTabletEvent</name>
      <anchor>QTabletEvent</anchor>
      <arglist>( Type type, const QPoint &amp; pos, const QPoint &amp; globalPos, const QPointF &amp; hiResGlobalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID )</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalPos</name>
      <anchor>globalPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalX</name>
      <anchor>globalX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalY</name>
      <anchor>globalY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hiResGlobalPos</name>
      <anchor>hiResGlobalPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hiResGlobalX</name>
      <anchor>hiResGlobalX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hiResGlobalY</name>
      <anchor>hiResGlobalY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pointerType</name>
      <anchor>pointerType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pressure</name>
      <anchor>pressure</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rotation</name>
      <anchor>rotation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tangentialPressure</name>
      <anchor>tangentialPressure</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>uniqueId</name>
      <anchor>uniqueId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xTilt</name>
      <anchor>xTilt</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>yTilt</name>
      <anchor>yTilt</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>z</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTableView</name>
    <filename>qtableview.html</filename>
    <member kind="function">
      <name>PenStyle</name>
      <anchor>gridStyle</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTableView</name>
      <anchor>QTableView</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>columnAt</name>
      <anchor>columnAt</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>columnCountChanged</name>
      <anchor>columnCountChanged</anchor>
      <arglist>( int oldCount, int newCount )</arglist>
    </member>
    <member kind="function">
      <name>columnMoved</name>
      <anchor>columnMoved</anchor>
      <arglist>( int column, int oldIndex, int newIndex )</arglist>
    </member>
    <member kind="function">
      <name>columnResized</name>
      <anchor>columnResized</anchor>
      <arglist>( int column, int oldWidth, int newWidth )</arglist>
    </member>
    <member kind="function">
      <name>columnViewportPosition</name>
      <anchor>columnViewportPosition</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>columnWidth</name>
      <anchor>columnWidth</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>hideColumn</name>
      <anchor>hideColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>hideRow</name>
      <anchor>hideRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>horizontalHeader</name>
      <anchor>horizontalHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>horizontalOffset</name>
      <anchor>horizontalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexAt</name>
      <anchor>indexAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>isColumnHidden</name>
      <anchor>isColumnHidden</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>isRowHidden</name>
      <anchor>isRowHidden</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>moveCursor</name>
      <anchor>moveCursor</anchor>
      <arglist>( CursorAction cursorAction, Qt::KeyboardModifiers modifiers )</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>rowAt</name>
      <anchor>rowAt</anchor>
      <arglist>( int y )</arglist>
    </member>
    <member kind="function">
      <name>rowCountChanged</name>
      <anchor>rowCountChanged</anchor>
      <arglist>( int oldCount, int newCount )</arglist>
    </member>
    <member kind="function">
      <name>rowHeight</name>
      <anchor>rowHeight</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>rowMoved</name>
      <anchor>rowMoved</anchor>
      <arglist>( int row, int oldIndex, int newIndex )</arglist>
    </member>
    <member kind="function">
      <name>rowResized</name>
      <anchor>rowResized</anchor>
      <arglist>( int row, int oldHeight, int newHeight )</arglist>
    </member>
    <member kind="function">
      <name>rowViewportPosition</name>
      <anchor>rowViewportPosition</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>selectColumn</name>
      <anchor>selectColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>selectRow</name>
      <anchor>selectRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>setColumnHidden</name>
      <anchor>setColumnHidden</anchor>
      <arglist>( int column, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalHeader</name>
      <anchor>setHorizontalHeader</anchor>
      <arglist>( QHeaderView * header )</arglist>
    </member>
    <member kind="function">
      <name>setRowHidden</name>
      <anchor>setRowHidden</anchor>
      <arglist>( int row, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setSelection</name>
      <anchor>setSelection</anchor>
      <arglist>( const QRect &amp; rect, QItemSelectionModel::SelectionFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalHeader</name>
      <anchor>setVerticalHeader</anchor>
      <arglist>( QHeaderView * header )</arglist>
    </member>
    <member kind="function">
      <name>showColumn</name>
      <anchor>showColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>showRow</name>
      <anchor>showRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>sizeHintForColumn</name>
      <anchor>sizeHintForColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>sizeHintForRow</name>
      <anchor>sizeHintForRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>sortByColumn</name>
      <anchor>sortByColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>verticalHeader</name>
      <anchor>verticalHeader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalOffset</name>
      <anchor>verticalOffset</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTableWidget</name>
    <filename>qtablewidget.html</filename>
    <member kind="function">
      <name>QTableWidget</name>
      <anchor>QTableWidget</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QTableWidget</name>
      <anchor>QTableWidget-2</anchor>
      <arglist>( int rows, int columns, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closePersistentEditor</name>
      <anchor>closePersistentEditor</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>column</name>
      <anchor>column</anchor>
      <arglist>( const QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>currentColumn</name>
      <anchor>currentColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentItemChanged</name>
      <anchor>currentItemChanged</anchor>
      <arglist>( QTableWidgetItem * current, QTableWidgetItem * previous )</arglist>
    </member>
    <member kind="function">
      <name>currentRow</name>
      <anchor>currentRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dropMimeData</name>
      <anchor>dropMimeData</anchor>
      <arglist>( int row, int column, const QMimeData * data, Qt::DropAction action )</arglist>
    </member>
    <member kind="function">
      <name>editItem</name>
      <anchor>editItem</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>findItems</name>
      <anchor>findItems</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>horizontalHeaderItem</name>
      <anchor>horizontalHeaderItem</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>indexFromItem</name>
      <anchor>indexFromItem</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertColumn</name>
      <anchor>insertColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>insertRow</name>
      <anchor>insertRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>isItemSelected</name>
      <anchor>isItemSelected</anchor>
      <arglist>( const QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemActivated</name>
      <anchor>itemActivated</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt-2</anchor>
      <arglist>( int ax, int ay )</arglist>
    </member>
    <member kind="function">
      <name>itemChanged</name>
      <anchor>itemChanged</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemClicked</name>
      <anchor>itemClicked</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemDoubleClicked</name>
      <anchor>itemDoubleClicked</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemEntered</name>
      <anchor>itemEntered</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemFromIndex</name>
      <anchor>itemFromIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>itemPressed</name>
      <anchor>itemPressed</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemPrototype</name>
      <anchor>itemPrototype</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>itemSelectionChanged</name>
      <anchor>itemSelectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>items</name>
      <anchor>items</anchor>
      <arglist>( const QMimeData * data )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( const QList&lt;QTableWidgetItem *&gt; items )</arglist>
    </member>
    <member kind="function">
      <name>mimeTypes</name>
      <anchor>mimeTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openPersistentEditor</name>
      <anchor>openPersistentEditor</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>removeColumn</name>
      <anchor>removeColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>removeRow</name>
      <anchor>removeRow</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>( const QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>scrollToItem</name>
      <anchor>scrollToItem</anchor>
      <arglist>( const QTableWidgetItem * item, ScrollHint hint = EnsureVisible )</arglist>
    </member>
    <member kind="function">
      <name>selectedItems</name>
      <anchor>selectedItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectedRanges</name>
      <anchor>selectedRanges</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalHeaderItem</name>
      <anchor>setHorizontalHeaderItem</anchor>
      <arglist>( int column, QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setHorizontalHeaderLabels</name>
      <anchor>setHorizontalHeaderLabels</anchor>
      <arglist>( const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>setItem</name>
      <anchor>setItem</anchor>
      <arglist>( int row, int column, QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setItemPrototype</name>
      <anchor>setItemPrototype</anchor>
      <arglist>( const QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setItemSelected</name>
      <anchor>setItemSelected</anchor>
      <arglist>( const QTableWidgetItem * item, bool select )</arglist>
    </member>
    <member kind="function">
      <name>setRangeSelected</name>
      <anchor>setRangeSelected</anchor>
      <arglist>( const QTableWidgetSelectionRange &amp; range, bool select )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalHeaderItem</name>
      <anchor>setVerticalHeaderItem</anchor>
      <arglist>( int row, QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalHeaderLabels</name>
      <anchor>setVerticalHeaderLabels</anchor>
      <arglist>( const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>sortItems</name>
      <anchor>sortItems</anchor>
      <arglist>( int column, Qt::SortOrder order = Qt::AscendingOrder )</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>supportedDropActions</anchor>
      <arglist> QTableWidget::supportedDropActions()</arglist>
    </member>
    <member kind="function">
      <name>takeItem</name>
      <anchor>takeItem</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>verticalHeaderItem</name>
      <anchor>verticalHeaderItem</anchor>
      <arglist>( int row )</arglist>
    </member>
    <member kind="function">
      <name>visualColumn</name>
      <anchor>visualColumn</anchor>
      <arglist>( int logicalColumn )</arglist>
    </member>
    <member kind="function">
      <name>visualItemRect</name>
      <anchor>visualItemRect</anchor>
      <arglist>( const QTableWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>visualRow</name>
      <anchor>visualRow</anchor>
      <arglist>( int logicalRow )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTableWidgetItem</name>
    <filename>qtablewidgetitem.html</filename>
    <member kind="function">
      <name>QTableWidgetItem</name>
      <anchor>QTableWidgetItem</anchor>
      <arglist>( int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>QTableWidgetItem</name>
      <anchor>QTableWidgetItem-2</anchor>
      <arglist>( const QString &amp; text, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>backgroundColor</name>
      <anchor>backgroundColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CheckState</name>
      <anchor>checkState</anchor>
      <arglist> QTableWidgetItem::checkState()</arglist>
    </member>
    <member kind="function">
      <name>clone</name>
      <anchor>clone</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( int role )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QTableWidgetItem::flags()</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>icon</name>
      <anchor>icon</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; in )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setCheckState</name>
      <anchor>setCheckState</anchor>
      <arglist>( Qt::CheckState state )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( int role, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setFlags</name>
      <anchor>setFlags</anchor>
      <arglist>( Qt::ItemFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setIcon</name>
      <anchor>setIcon</anchor>
      <arglist>( const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setStatusTip</name>
      <anchor>setStatusTip</anchor>
      <arglist>( const QString &amp; statusTip )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTextAlignment</name>
      <anchor>setTextAlignment</anchor>
      <arglist>( int alignment )</arglist>
    </member>
    <member kind="function">
      <name>setTextColor</name>
      <anchor>setTextColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setToolTip</name>
      <anchor>setToolTip</anchor>
      <arglist>( const QString &amp; toolTip )</arglist>
    </member>
    <member kind="function">
      <name>setWhatsThis</name>
      <anchor>setWhatsThis</anchor>
      <arglist>( const QString &amp; whatsThis )</arglist>
    </member>
    <member kind="function">
      <name>statusTip</name>
      <anchor>statusTip</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tableWidget</name>
      <anchor>tableWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textAlignment</name>
      <anchor>textAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textColor</name>
      <anchor>textColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toolTip</name>
      <anchor>toolTip</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; out )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTableWidgetItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTableWidgetSelectionRange</name>
    <filename>qtablewidgetselectionrange.html</filename>
    <member kind="function">
      <name>QTableWidgetSelectionRange</name>
      <anchor>QTableWidgetSelectionRange</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTableWidgetSelectionRange</name>
      <anchor>QTableWidgetSelectionRange-2</anchor>
      <arglist>( int top, int left, int bottom, int right )</arglist>
    </member>
    <member kind="function">
      <name>QTableWidgetSelectionRange</name>
      <anchor>QTableWidgetSelectionRange-3</anchor>
      <arglist>( const QTableWidgetSelectionRange &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>bottomRow</name>
      <anchor>bottomRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftColumn</name>
      <anchor>leftColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightColumn</name>
      <anchor>rightColumn</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topRow</name>
      <anchor>topRow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTabWidget</name>
      <anchor>QTabWidget-2</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>changeTab</name>
      <anchor>changeTab</anchor>
      <arglist>( QWidget * widget, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>changeTab</name>
      <anchor>changeTab-2</anchor>
      <arglist>( QWidget * widget, const QIcon &amp; icon, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged-2</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>currentPage</name>
      <anchor>currentPage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentPageIndex</name>
      <anchor>currentPageIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab-2</anchor>
      <arglist>( QWidget * widget, const QString &amp; label, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab-3</anchor>
      <arglist>( QWidget * widget, const QIcon &amp; icon, const QString &amp; label, int index = -1 )</arglist>
    </member>
    <member kind="function">
      <name>isTabEnabled</name>
      <anchor>isTabEnabled-2</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>label</name>
      <anchor>label</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>margin</name>
      <anchor>margin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>page</name>
      <anchor>page</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>removePage</name>
      <anchor>removePage</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>removeTabToolTip</name>
      <anchor>removeTabToolTip</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentPage</name>
      <anchor>setCurrentPage</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setMargin</name>
      <anchor>setMargin</anchor>
      <arglist>( int margin )</arglist>
    </member>
    <member kind="function">
      <name>setTabEnabled</name>
      <anchor>setTabEnabled-2</anchor>
      <arglist>( QWidget * widget, bool b )</arglist>
    </member>
    <member kind="function">
      <name>setTabIconSet</name>
      <anchor>setTabIconSet</anchor>
      <arglist>( QWidget * widget, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setTabLabel</name>
      <anchor>setTabLabel</anchor>
      <arglist>( QWidget * widget, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>setTabToolTip</name>
      <anchor>setTabToolTip-2</anchor>
      <arglist>( QWidget * widget, const QString &amp; tip )</arglist>
    </member>
    <member kind="function">
      <name>showPage</name>
      <anchor>showPage</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>tabIconSet</name>
      <anchor>tabIconSet</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>tabLabel</name>
      <anchor>tabLabel</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>tabToolTip</name>
      <anchor>tabToolTip-2</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTabWidget</name>
    <filename>qtabwidget.html</filename>
    <member kind="enum">
      <name>TabPosition</name>
      <anchor>TabPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>TabShape</name>
      <anchor>TabShape-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTabWidget</name>
      <anchor>QTabWidget</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>addTab</anchor>
      <arglist>( QWidget * child, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>addTab</name>
      <anchor>addTab-2</anchor>
      <arglist>( QWidget * child, const QIcon &amp; icon, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>cornerWidget</name>
      <anchor>cornerWidget</anchor>
      <arglist>( Qt::Corner corner = Qt::TopRightCorner )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>currentWidget</name>
      <anchor>currentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab</anchor>
      <arglist>( int index, QWidget * w, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>insertTab</name>
      <anchor>insertTab-4</anchor>
      <arglist>( int index, QWidget * w, const QIcon &amp; icon, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>isTabEnabled</name>
      <anchor>isTabEnabled</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>removeTab</name>
      <anchor>removeTab</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setCornerWidget</name>
      <anchor>setCornerWidget</anchor>
      <arglist>( QWidget * w, Qt::Corner corner = Qt::TopRightCorner )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentWidget</name>
      <anchor>setCurrentWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setTabBar</name>
      <anchor>setTabBar</anchor>
      <arglist>( QTabBar * tb )</arglist>
    </member>
    <member kind="function">
      <name>setTabEnabled</name>
      <anchor>setTabEnabled</anchor>
      <arglist>( int index, bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setTabIcon</name>
      <anchor>setTabIcon</anchor>
      <arglist>( int index, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setTabText</name>
      <anchor>setTabText</anchor>
      <arglist>( int index, const QString &amp; label )</arglist>
    </member>
    <member kind="function">
      <name>setTabToolTip</name>
      <anchor>setTabToolTip</anchor>
      <arglist>( int index, const QString &amp; tip )</arglist>
    </member>
    <member kind="function">
      <name>tabBar</name>
      <anchor>tabBar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tabIcon</name>
      <anchor>tabIcon</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabInserted</name>
      <anchor>tabInserted</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabRemoved</name>
      <anchor>tabRemoved</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabText</name>
      <anchor>tabText</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>tabToolTip</name>
      <anchor>tabToolTip</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int index )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTcpServer</name>
    <filename>qtcpserver.html</filename>
    <member kind="function">
      <name>QTcpServer</name>
      <anchor>QTcpServer</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPendingConnections</name>
      <anchor>hasPendingConnections</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>incomingConnection</name>
      <anchor>incomingConnection</anchor>
      <arglist>( int socketDescriptor )</arglist>
    </member>
    <member kind="function">
      <name>isListening</name>
      <anchor>isListening</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>listen</name>
      <anchor>listen</anchor>
      <arglist>( const QHostAddress &amp; address = QHostAddress::Any, quint16 port = 0 )</arglist>
    </member>
    <member kind="function">
      <name>maxPendingConnections</name>
      <anchor>maxPendingConnections</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newConnection</name>
      <anchor>newConnection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextPendingConnection</name>
      <anchor>nextPendingConnection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>serverAddress</name>
      <anchor>serverAddress</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SocketError</name>
      <anchor>serverError</anchor>
      <arglist> QTcpServer::serverError()</arglist>
    </member>
    <member kind="function">
      <name>serverPort</name>
      <anchor>serverPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setMaxPendingConnections</name>
      <anchor>setMaxPendingConnections</anchor>
      <arglist>( int numConnections )</arglist>
    </member>
    <member kind="function">
      <name>setSocketDescriptor</name>
      <anchor>setSocketDescriptor</anchor>
      <arglist>( int socketDescriptor )</arglist>
    </member>
    <member kind="function">
      <name>socketDescriptor</name>
      <anchor>socketDescriptor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>waitForNewConnection</name>
      <anchor>waitForNewConnection</anchor>
      <arglist>( int msec = 0, bool * timedOut = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTcpSocket</name>
    <filename>qtcpsocket.html</filename>
    <member kind="function">
      <name>QTcpSocket</name>
      <anchor>QTcpSocket</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTemporaryFile</name>
    <filename>qtemporaryfile.html</filename>
    <member kind="function">
      <name>QTemporaryFile</name>
      <anchor>QTemporaryFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTemporaryFile</name>
      <anchor>QTemporaryFile-2</anchor>
      <arglist>( const QString &amp; templateName )</arglist>
    </member>
    <member kind="function">
      <name>QTemporaryFile</name>
      <anchor>QTemporaryFile-3</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>QTemporaryFile</name>
      <anchor>QTemporaryFile-4</anchor>
      <arglist>( const QString &amp; templateName, QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>autoRemove</name>
      <anchor>autoRemove</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createLocalFile</name>
      <anchor>createLocalFile</anchor>
      <arglist>( const QString &amp; fileName )</arglist>
    </member>
    <member kind="function">
      <name>createLocalFile</name>
      <anchor>createLocalFile-2</anchor>
      <arglist>( QFile &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fileTemplate</name>
      <anchor>fileTemplate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>open</name>
      <anchor>open</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAutoRemove</name>
      <anchor>setAutoRemove</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setFileTemplate</name>
      <anchor>setFileTemplate</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextBlock::iterator</name>
    <filename>qtextblock-iterator.html</filename>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-3</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fragment</name>
      <anchor>fragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextBlock</name>
    <filename>qtextblock.html</filename>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextBlock</name>
      <anchor>QTextBlock-3</anchor>
      <arglist>( const QTextBlock &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blockFormat</name>
      <anchor>blockFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blockFormatIndex</name>
      <anchor>blockFormatIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>charFormat</name>
      <anchor>charFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>charFormatIndex</name>
      <anchor>charFormatIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( int position )</arglist>
    </member>
    <member kind="function">
      <name>document</name>
      <anchor>document</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>layout</name>
      <anchor>layout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>position</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textList</name>
      <anchor>textList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTextBlock &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTextBlock &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextBlock &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTextBlock &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextBlockFormat</name>
    <filename>qtextblockformat.html</filename>
    <member kind="function">
      <name>QTextBlockFormat</name>
      <anchor>QTextBlockFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist> QTextBlockFormat::alignment()</arglist>
    </member>
    <member kind="function">
      <name>bottomMargin</name>
      <anchor>bottomMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indent</name>
      <anchor>indent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leftMargin</name>
      <anchor>leftMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nonBreakableLines</name>
      <anchor>nonBreakableLines</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rightMargin</name>
      <anchor>rightMargin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>setBottomMargin</name>
      <anchor>setBottomMargin</anchor>
      <arglist>( qreal margin )</arglist>
    </member>
    <member kind="function">
      <name>setIndent</name>
      <anchor>setIndent</anchor>
      <arglist>( qreal indentation )</arglist>
    </member>
    <member kind="function">
      <name>setLeftMargin</name>
      <anchor>setLeftMargin</anchor>
      <arglist>( qreal margin )</arglist>
    </member>
    <member kind="function">
      <name>setNonBreakableLines</name>
      <anchor>setNonBreakableLines</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setRightMargin</name>
      <anchor>setRightMargin</anchor>
      <arglist>( qreal margin )</arglist>
    </member>
    <member kind="function">
      <name>setTextIndent</name>
      <anchor>setTextIndent</anchor>
      <arglist>( qreal indent )</arglist>
    </member>
    <member kind="function">
      <name>setTopMargin</name>
      <anchor>setTopMargin</anchor>
      <arglist>( qreal margin )</arglist>
    </member>
    <member kind="function">
      <name>textIndent</name>
      <anchor>textIndent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topMargin</name>
      <anchor>topMargin</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextBlockGroup</name>
    <filename>qtextblockgroup.html</filename>
    <member kind="function">
      <name>QTextBlockGroup</name>
      <anchor>QTextBlockGroup</anchor>
      <arglist>( QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>blockFormatChanged</name>
      <anchor>blockFormatChanged</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>blockInserted</name>
      <anchor>blockInserted</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>blockList</name>
      <anchor>blockList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blockRemoved</name>
      <anchor>blockRemoved</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>QTextBrowser</name>
      <anchor>QTextBrowser-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextBrowser</name>
    <filename>qtextbrowser.html</filename>
    <member kind="function">
      <name>QTextBrowser</name>
      <anchor>QTextBrowser</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>anchorClicked</name>
      <anchor>anchorClicked</anchor>
      <arglist>( const QUrl &amp; link )</arglist>
    </member>
    <member kind="function">
      <name>backward</name>
      <anchor>backward</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backwardAvailable</name>
      <anchor>backwardAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>forward</name>
      <anchor>forward</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>forwardAvailable</name>
      <anchor>forwardAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted</anchor>
      <arglist>( const QUrl &amp; link )</arglist>
    </member>
    <member kind="function">
      <name>highlighted</name>
      <anchor>highlighted-2</anchor>
      <arglist>( const QString &amp; link )</arglist>
    </member>
    <member kind="function">
      <name>home</name>
      <anchor>home</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * ev )</arglist>
    </member>
    <member kind="function">
      <name>loadResource</name>
      <anchor>loadResource</anchor>
      <arglist>( int type, const QUrl &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>reload</name>
      <anchor>reload</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sourceChanged</name>
      <anchor>sourceChanged</anchor>
      <arglist>( const QUrl &amp; src )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextCharFormat</name>
    <filename>qtextcharformat.html</filename>
    <member kind="enum">
      <name>VerticalAlignment</name>
      <anchor>VerticalAlignment-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextCharFormat</name>
      <anchor>QTextCharFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>anchorHref</name>
      <anchor>anchorHref</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>anchorName</name>
      <anchor>anchorName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontFamily</name>
      <anchor>fontFamily</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontFixedPitch</name>
      <anchor>fontFixedPitch</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontItalic</name>
      <anchor>fontItalic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontOverline</name>
      <anchor>fontOverline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontPointSize</name>
      <anchor>fontPointSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontStrikeOut</name>
      <anchor>fontStrikeOut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontUnderline</name>
      <anchor>fontUnderline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontWeight</name>
      <anchor>fontWeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isAnchor</name>
      <anchor>isAnchor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAnchor</name>
      <anchor>setAnchor</anchor>
      <arglist>( bool anchor )</arglist>
    </member>
    <member kind="function">
      <name>setAnchorHref</name>
      <anchor>setAnchorHref</anchor>
      <arglist>( const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setAnchorName</name>
      <anchor>setAnchorName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setFontFamily</name>
      <anchor>setFontFamily</anchor>
      <arglist>( const QString &amp; family )</arglist>
    </member>
    <member kind="function">
      <name>setFontFixedPitch</name>
      <anchor>setFontFixedPitch</anchor>
      <arglist>( bool fixedPitch )</arglist>
    </member>
    <member kind="function">
      <name>setFontItalic</name>
      <anchor>setFontItalic</anchor>
      <arglist>( bool italic )</arglist>
    </member>
    <member kind="function">
      <name>setFontOverline</name>
      <anchor>setFontOverline</anchor>
      <arglist>( bool overline )</arglist>
    </member>
    <member kind="function">
      <name>setFontPointSize</name>
      <anchor>setFontPointSize</anchor>
      <arglist>( qreal size )</arglist>
    </member>
    <member kind="function">
      <name>setFontStrikeOut</name>
      <anchor>setFontStrikeOut</anchor>
      <arglist>( bool strikeOut )</arglist>
    </member>
    <member kind="function">
      <name>setFontUnderline</name>
      <anchor>setFontUnderline</anchor>
      <arglist>( bool underline )</arglist>
    </member>
    <member kind="function">
      <name>setFontWeight</name>
      <anchor>setFontWeight</anchor>
      <arglist>( int weight )</arglist>
    </member>
    <member kind="function">
      <name>setTableCellColumnSpan</name>
      <anchor>setTableCellColumnSpan</anchor>
      <arglist>( int tableCellColumnSpan )</arglist>
    </member>
    <member kind="function">
      <name>setTableCellRowSpan</name>
      <anchor>setTableCellRowSpan</anchor>
      <arglist>( int tableCellRowSpan )</arglist>
    </member>
    <member kind="function">
      <name>setUnderlineColor</name>
      <anchor>setUnderlineColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setVerticalAlignment</name>
      <anchor>setVerticalAlignment</anchor>
      <arglist>( VerticalAlignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>tableCellColumnSpan</name>
      <anchor>tableCellColumnSpan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tableCellRowSpan</name>
      <anchor>tableCellRowSpan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>underlineColor</name>
      <anchor>underlineColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>verticalAlignment</name>
      <anchor>verticalAlignment</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextCodec::ConverterState</name>
    <filename>qtextcodec-converterstate.html</filename>
    <member kind="function">
      <name>ConverterState</name>
      <anchor>ConverterState</anchor>
      <arglist>( ConversionFlags flags = DefaultConversion )</arglist>
    </member>
    <member kind="function">
      <name>codecForContent</name>
      <anchor>codecForContent</anchor>
      <arglist>( const char * str, int size )</arglist>
    </member>
    <member kind="function">
      <name>codecForIndex</name>
      <anchor>codecForIndex</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>codecForName</name>
      <anchor>codecForName-3</anchor>
      <arglist>( const char * hint, int accuracy )</arglist>
    </member>
    <member kind="function">
      <name>fromUnicode</name>
      <anchor>fromUnicode-3</anchor>
      <arglist>( const QString &amp; uc, int &amp; lenInOut )</arglist>
    </member>
    <member kind="function">
      <name>locale</name>
      <anchor>locale</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mimeName</name>
      <anchor>mimeName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUnicode</name>
      <anchor>toUnicode-3</anchor>
      <arglist>( const QByteArray &amp; a, int len )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextCodec</name>
    <filename>qtextcodec.html</filename>
    <member kind="function">
      <name>QTextCodec</name>
      <anchor>QTextCodec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>aliases</name>
      <anchor>aliases</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>availableCodecs</name>
      <anchor>availableCodecs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>availableMibs</name>
      <anchor>availableMibs</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canEncode</name>
      <anchor>canEncode</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>canEncode</name>
      <anchor>canEncode-2</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>codecForCStrings</name>
      <anchor>codecForCStrings</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>codecForLocale</name>
      <anchor>codecForLocale</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>codecForMib</name>
      <anchor>codecForMib</anchor>
      <arglist>( int mib )</arglist>
    </member>
    <member kind="function">
      <name>codecForName</name>
      <anchor>codecForName</anchor>
      <arglist>( const QByteArray &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>codecForName</name>
      <anchor>codecForName-2</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>codecForTr</name>
      <anchor>codecForTr</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>convertFromUnicode</name>
      <anchor>convertFromUnicode</anchor>
      <arglist>( const QChar * input, int number, ConverterState * state )</arglist>
    </member>
    <member kind="function">
      <name>convertToUnicode</name>
      <anchor>convertToUnicode</anchor>
      <arglist>( const char * chars, int len, ConverterState * state )</arglist>
    </member>
    <member kind="function">
      <name>fromUnicode</name>
      <anchor>fromUnicode</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>fromUnicode</name>
      <anchor>fromUnicode-2</anchor>
      <arglist>( const QChar * input, int number, ConverterState * state = 0 )</arglist>
    </member>
    <member kind="function">
      <name>makeDecoder</name>
      <anchor>makeDecoder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>makeEncoder</name>
      <anchor>makeEncoder</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mibEnum</name>
      <anchor>mibEnum</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCodecForCStrings</name>
      <anchor>setCodecForCStrings</anchor>
      <arglist>( QTextCodec * c )</arglist>
    </member>
    <member kind="function">
      <name>setCodecForLocale</name>
      <anchor>setCodecForLocale</anchor>
      <arglist>( QTextCodec * c )</arglist>
    </member>
    <member kind="function">
      <name>setCodecForTr</name>
      <anchor>setCodecForTr</anchor>
      <arglist>( QTextCodec * c )</arglist>
    </member>
    <member kind="function">
      <name>toUnicode</name>
      <anchor>toUnicode</anchor>
      <arglist>( const QByteArray &amp; a )</arglist>
    </member>
    <member kind="function">
      <name>toUnicode</name>
      <anchor>toUnicode-2</anchor>
      <arglist>( const char * in, int length, ConverterState * state = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toUnicode</name>
      <anchor>toUnicode-4</anchor>
      <arglist>( const char * chars )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextCodecPlugin</name>
    <filename>qtextcodecplugin.html</filename>
    <member kind="function">
      <name>QTextCodecPlugin</name>
      <anchor>QTextCodecPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>aliases</name>
      <anchor>aliases</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createForMib</name>
      <anchor>createForMib</anchor>
      <arglist>( int mib )</arglist>
    </member>
    <member kind="function">
      <name>createForName</name>
      <anchor>createForName</anchor>
      <arglist>( const QByteArray &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>mibEnums</name>
      <anchor>mibEnums</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>names</name>
      <anchor>names</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextCursor</name>
    <filename>qtextcursor.html</filename>
    <member kind="enum">
      <name>MoveMode</name>
      <anchor>MoveMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>MoveOperation</name>
      <anchor>MoveOperation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>SelectionType</name>
      <anchor>SelectionType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextCursor</name>
      <anchor>QTextCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextCursor</name>
      <anchor>QTextCursor-2</anchor>
      <arglist>( QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>QTextCursor</name>
      <anchor>QTextCursor-4</anchor>
      <arglist>( QTextFrame * frame )</arglist>
    </member>
    <member kind="function">
      <name>QTextCursor</name>
      <anchor>QTextCursor-5</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>QTextCursor</name>
      <anchor>QTextCursor-7</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>anchor</name>
      <anchor>anchor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atBlockEnd</name>
      <anchor>atBlockEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atBlockStart</name>
      <anchor>atBlockStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>atStart</name>
      <anchor>atStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginEditBlock</name>
      <anchor>beginEditBlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>block</name>
      <anchor>block</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blockCharFormat</name>
      <anchor>blockCharFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>blockFormat</name>
      <anchor>blockFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>charFormat</name>
      <anchor>charFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearSelection</name>
      <anchor>clearSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createList</name>
      <anchor>createList</anchor>
      <arglist>( const QTextListFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>createList</name>
      <anchor>createList-2</anchor>
      <arglist>( QTextListFormat::Style style )</arglist>
    </member>
    <member kind="function">
      <name>currentFrame</name>
      <anchor>currentFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentList</name>
      <anchor>currentList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentTable</name>
      <anchor>currentTable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deleteChar</name>
      <anchor>deleteChar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>deletePreviousChar</name>
      <anchor>deletePreviousChar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endEditBlock</name>
      <anchor>endEditBlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasComplexSelection</name>
      <anchor>hasComplexSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasSelection</name>
      <anchor>hasSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertBlock</name>
      <anchor>insertBlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertBlock</name>
      <anchor>insertBlock-2</anchor>
      <arglist>( const QTextBlockFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>insertBlock</name>
      <anchor>insertBlock-3</anchor>
      <arglist>( const QTextBlockFormat &amp; format, const QTextCharFormat &amp; charFormat )</arglist>
    </member>
    <member kind="function">
      <name>insertFragment</name>
      <anchor>insertFragment</anchor>
      <arglist>( const QTextDocumentFragment &amp; fragment )</arglist>
    </member>
    <member kind="function">
      <name>insertFrame</name>
      <anchor>insertFrame</anchor>
      <arglist>( const QTextFrameFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>insertImage</name>
      <anchor>insertImage</anchor>
      <arglist>( const QTextImageFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>insertImage</name>
      <anchor>insertImage-2</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>insertList</name>
      <anchor>insertList</anchor>
      <arglist>( const QTextListFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>insertList</name>
      <anchor>insertList-2</anchor>
      <arglist>( QTextListFormat::Style style )</arglist>
    </member>
    <member kind="function">
      <name>insertTable</name>
      <anchor>insertTable</anchor>
      <arglist>( int rows, int columns, const QTextTableFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>insertTable</name>
      <anchor>insertTable-2</anchor>
      <arglist>( int rows, int columns )</arglist>
    </member>
    <member kind="function">
      <name>insertText</name>
      <anchor>insertText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>insertText</name>
      <anchor>insertText-2</anchor>
      <arglist>( const QString &amp; text, const QTextCharFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>isCopyOf</name>
      <anchor>isCopyOf</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>joinPreviousEditBlock</name>
      <anchor>joinPreviousEditBlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mergeBlockCharFormat</name>
      <anchor>mergeBlockCharFormat</anchor>
      <arglist>( const QTextCharFormat &amp; modifier )</arglist>
    </member>
    <member kind="function">
      <name>mergeBlockFormat</name>
      <anchor>mergeBlockFormat</anchor>
      <arglist>( const QTextBlockFormat &amp; modifier )</arglist>
    </member>
    <member kind="function">
      <name>mergeCharFormat</name>
      <anchor>mergeCharFormat</anchor>
      <arglist>( const QTextCharFormat &amp; modifier )</arglist>
    </member>
    <member kind="function">
      <name>movePosition</name>
      <anchor>movePosition</anchor>
      <arglist>( MoveOperation op, MoveMode mode = MoveAnchor, int n = 1 )</arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>position</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeSelectedText</name>
      <anchor>removeSelectedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>select</name>
      <anchor>select</anchor>
      <arglist>( SelectionType selection )</arglist>
    </member>
    <member kind="function">
      <name>selectedTableCells</name>
      <anchor>selectedTableCells</anchor>
      <arglist>( int * firstRow, int * numRows, int * firstColumn, int * numColumns )</arglist>
    </member>
    <member kind="function">
      <name>selectedText</name>
      <anchor>selectedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selection</name>
      <anchor>selection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionEnd</name>
      <anchor>selectionEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionStart</name>
      <anchor>selectionStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBlockCharFormat</name>
      <anchor>setBlockCharFormat</anchor>
      <arglist>( const QTextCharFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setBlockFormat</name>
      <anchor>setBlockFormat</anchor>
      <arglist>( const QTextBlockFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setCharFormat</name>
      <anchor>setCharFormat</anchor>
      <arglist>( const QTextCharFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>setPosition</anchor>
      <arglist>( int pos, MoveMode m = MoveAnchor )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QTextCursor &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextDecoder</name>
    <filename>qtextdecoder.html</filename>
    <member kind="function">
      <name>QTextDecoder</name>
      <anchor>QTextDecoder</anchor>
      <arglist>( const QTextCodec * codec )</arglist>
    </member>
    <member kind="function">
      <name>toUnicode</name>
      <anchor>toUnicode</anchor>
      <arglist>( const char * chars, int len )</arglist>
    </member>
    <member kind="function">
      <name>toUnicode</name>
      <anchor>toUnicode-2</anchor>
      <arglist>( const QByteArray &amp; ba )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextDocument</name>
    <filename>qtextdocument.html</filename>
    <member kind="enum">
      <name>MetaInformation</name>
      <anchor>MetaInformation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ResourceType</name>
      <anchor>ResourceType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextDocument</name>
      <anchor>QTextDocument</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QTextDocument</name>
      <anchor>QTextDocument-2</anchor>
      <arglist>( const QString &amp; text, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addResource</name>
      <anchor>addResource</anchor>
      <arglist>( int type, const QUrl &amp; name, const QVariant &amp; resource )</arglist>
    </member>
    <member kind="function">
      <name>allFormats</name>
      <anchor>allFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clone</name>
      <anchor>clone</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>contentsChange</name>
      <anchor>contentsChange</anchor>
      <arglist>( int position, int charsRemoved, int charsAdded )</arglist>
    </member>
    <member kind="function">
      <name>contentsChanged</name>
      <anchor>contentsChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createObject</name>
      <anchor>createObject</anchor>
      <arglist>( const QTextFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>cursorPositionChanged</name>
      <anchor>cursorPositionChanged</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>documentLayout</name>
      <anchor>documentLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; expr, const QTextCursor &amp; cursor, FindFlags options = 0 )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const QString &amp; expr, int position = 0, FindFlags options = 0 )</arglist>
    </member>
    <member kind="function">
      <name>findBlock</name>
      <anchor>findBlock</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRedoAvailable</name>
      <anchor>isRedoAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isUndoAvailable</name>
      <anchor>isUndoAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>loadResource</name>
      <anchor>loadResource</anchor>
      <arglist>( int type, const QUrl &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>markContentsDirty</name>
      <anchor>markContentsDirty</anchor>
      <arglist>( int position, int length )</arglist>
    </member>
    <member kind="function">
      <name>metaInformation</name>
      <anchor>metaInformation</anchor>
      <arglist>( MetaInformation info )</arglist>
    </member>
    <member kind="function">
      <name>modificationChanged</name>
      <anchor>modificationChanged</anchor>
      <arglist>( bool changed )</arglist>
    </member>
    <member kind="function">
      <name>object</name>
      <anchor>object</anchor>
      <arglist>( int objectIndex )</arglist>
    </member>
    <member kind="function">
      <name>objectForFormat</name>
      <anchor>objectForFormat</anchor>
      <arglist>( const QTextFormat &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>pageCount</name>
      <anchor>pageCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>print</name>
      <anchor>print</anchor>
      <arglist>( QPrinter * printer )</arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>redo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redoAvailable</name>
      <anchor>redoAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
    <member kind="function">
      <name>resource</name>
      <anchor>resource</anchor>
      <arglist>( int type, const QUrl &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>rootFrame</name>
      <anchor>rootFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDocumentLayout</name>
      <anchor>setDocumentLayout</anchor>
      <arglist>( QAbstractTextDocumentLayout * layout )</arglist>
    </member>
    <member kind="function">
      <name>setHtml</name>
      <anchor>setHtml</anchor>
      <arglist>( const QString &amp; html )</arglist>
    </member>
    <member kind="function">
      <name>setMetaInformation</name>
      <anchor>setMetaInformation</anchor>
      <arglist>( MetaInformation info, const QString &amp; string )</arglist>
    </member>
    <member kind="function">
      <name>setPlainText</name>
      <anchor>setPlainText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>toHtml</name>
      <anchor>toHtml</anchor>
      <arglist>( const QByteArray &amp; encoding = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>toPlainText</name>
      <anchor>toPlainText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>undo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undoAvailable</name>
      <anchor>undoAvailable</anchor>
      <arglist>( bool available )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextDocumentFragment</name>
    <filename>qtextdocumentfragment.html</filename>
    <member kind="function">
      <name>QTextDocumentFragment</name>
      <anchor>QTextDocumentFragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextDocumentFragment</name>
      <anchor>QTextDocumentFragment-2</anchor>
      <arglist>( const QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>QTextDocumentFragment</name>
      <anchor>QTextDocumentFragment-3</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>QTextDocumentFragment</name>
      <anchor>QTextDocumentFragment-4</anchor>
      <arglist>( const QTextDocumentFragment &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>fromHtml</name>
      <anchor>fromHtml</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>fromPlainText</name>
      <anchor>fromPlainText</anchor>
      <arglist>( const QString &amp; plainText )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toHtml</name>
      <anchor>toHtml</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toPlainText</name>
      <anchor>toPlainText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextDocumentFragment &amp; other )</arglist>
    </member>
    <member kind="enum">
      <name>KeyboardAction</name>
      <anchor>KeyboardAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextEdit</name>
      <anchor>QTextEdit-4</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>bold</name>
      <anchor>bold</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>color</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentColorChanged</name>
      <anchor>currentColorChanged</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>currentFontChanged</name>
      <anchor>currentFontChanged</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>doKeyboardAction</name>
      <anchor>doKeyboardAction</anchor>
      <arglist>( KeyboardAction action )</arglist>
    </member>
    <member kind="function">
      <name>family</name>
      <anchor>family</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find-2</anchor>
      <arglist>( const QString &amp; exp, bool cs, bool wo )</arglist>
    </member>
    <member kind="function">
      <name>hasSelectedText</name>
      <anchor>hasSelectedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>isModified</name>
      <anchor>isModified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRedoAvailable</name>
      <anchor>isRedoAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isUndoAvailable</name>
      <anchor>isUndoAvailable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>italic</name>
      <anchor>italic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>moveCursor</name>
      <anchor>moveCursor</anchor>
      <arglist>( CursorAction action, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor )</arglist>
    </member>
    <member kind="function">
      <name>pointSize</name>
      <anchor>pointSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redo</name>
      <anchor>redo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>redoAvailable</name>
      <anchor>redoAvailable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>selectedText</name>
      <anchor>selectedText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBold</name>
      <anchor>setBold</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setColor</name>
      <anchor>setColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setFamily</name>
      <anchor>setFamily</anchor>
      <arglist>( const QString &amp; family )</arglist>
    </member>
    <member kind="function">
      <name>setItalic</name>
      <anchor>setItalic</anchor>
      <arglist>( bool i )</arglist>
    </member>
    <member kind="function">
      <name>setModified</name>
      <anchor>setModified</anchor>
      <arglist>( bool m = true )</arglist>
    </member>
    <member kind="function">
      <name>setPointSize</name>
      <anchor>setPointSize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTextFormat</name>
      <anchor>setTextFormat</anchor>
      <arglist>( Qt::TextFormat f )</arglist>
    </member>
    <member kind="function">
      <name>setUnderline</name>
      <anchor>setUnderline</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>sync</name>
      <anchor>sync</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textChanged</name>
      <anchor>textChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TextFormat</name>
      <anchor>textFormat</anchor>
      <arglist> QTextEdit::textFormat()</arglist>
    </member>
    <member kind="function">
      <name>underline</name>
      <anchor>underline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undo</name>
      <anchor>undo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>undoAvailable</name>
      <anchor>undoAvailable</anchor>
      <arglist>( bool b )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextEdit</name>
    <filename>qtextedit.html</filename>
    <member kind="enum">
      <name>CursorAction</name>
      <anchor>CursorAction-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>LineWrapMode</name>
      <anchor>LineWrapMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WrapMode</name>
      <anchor>wordWrapMode</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextEdit</name>
      <anchor>QTextEdit</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QTextEdit</name>
      <anchor>QTextEdit-2</anchor>
      <arglist>( const QString &amp; text, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist> QTextEdit::alignment()</arglist>
    </member>
    <member kind="function">
      <name>anchorAt</name>
      <anchor>anchorAt</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contextMenuEvent</name>
      <anchor>contextMenuEvent</anchor>
      <arglist>( QContextMenuEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>copy</name>
      <anchor>copy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>copyAvailable</name>
      <anchor>copyAvailable</anchor>
      <arglist>( bool yes )</arglist>
    </member>
    <member kind="function">
      <name>createMimeDataFromSelection</name>
      <anchor>createMimeDataFromSelection</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createStandardContextMenu</name>
      <anchor>createStandardContextMenu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentCharFormat</name>
      <anchor>currentCharFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentCharFormatChanged</name>
      <anchor>currentCharFormatChanged</anchor>
      <arglist>( const QTextCharFormat &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>currentFont</name>
      <anchor>currentFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorForPosition</name>
      <anchor>cursorForPosition</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>cursorPositionChanged</name>
      <anchor>cursorPositionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorRect</name>
      <anchor>cursorRect</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>cursorRect</name>
      <anchor>cursorRect-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cut</name>
      <anchor>cut</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>document</name>
      <anchor>document</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ensureCursorVisible</name>
      <anchor>ensureCursorVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const QString &amp; exp, QTextDocument::FindFlags options = 0 )</arglist>
    </member>
    <member kind="function">
      <name>fontFamily</name>
      <anchor>fontFamily</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontItalic</name>
      <anchor>fontItalic</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontPointSize</name>
      <anchor>fontPointSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontUnderline</name>
      <anchor>fontUnderline</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontWeight</name>
      <anchor>fontWeight</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertFromMimeData</name>
      <anchor>insertFromMimeData</anchor>
      <arglist>( const QMimeData * source )</arglist>
    </member>
    <member kind="function">
      <name>insertHtml</name>
      <anchor>insertHtml</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>insertPlainText</name>
      <anchor>insertPlainText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>loadResource</name>
      <anchor>loadResource</anchor>
      <arglist>( int type, const QUrl &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>mergeCurrentCharFormat</name>
      <anchor>mergeCurrentCharFormat</anchor>
      <arglist>( const QTextCharFormat &amp; modifier )</arglist>
    </member>
    <member kind="function">
      <name>paste</name>
      <anchor>paste</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scrollToAnchor</name>
      <anchor>scrollToAnchor</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>selectionChanged</name>
      <anchor>selectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( Qt::Alignment a )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentCharFormat</name>
      <anchor>setCurrentCharFormat</anchor>
      <arglist>( const QTextCharFormat &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentFont</name>
      <anchor>setCurrentFont</anchor>
      <arglist>( const QFont &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>setDocument</name>
      <anchor>setDocument</anchor>
      <arglist>( QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>setFontFamily</name>
      <anchor>setFontFamily</anchor>
      <arglist>( const QString &amp; fontFamily )</arglist>
    </member>
    <member kind="function">
      <name>setFontItalic</name>
      <anchor>setFontItalic</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setFontPointSize</name>
      <anchor>setFontPointSize</anchor>
      <arglist>( qreal s )</arglist>
    </member>
    <member kind="function">
      <name>setFontUnderline</name>
      <anchor>setFontUnderline</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setFontWeight</name>
      <anchor>setFontWeight</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>setPlainText</name>
      <anchor>setPlainText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTextColor</name>
      <anchor>setTextColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setTextCursor</name>
      <anchor>setTextCursor</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>textColor</name>
      <anchor>textColor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textCursor</name>
      <anchor>textCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toPlainText</name>
      <anchor>toPlainText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>zoomIn</name>
      <anchor>zoomIn</anchor>
      <arglist>( int range = 1 )</arglist>
    </member>
    <member kind="function">
      <name>zoomOut</name>
      <anchor>zoomOut</anchor>
      <arglist>( int range = 1 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextEncoder</name>
    <filename>qtextencoder.html</filename>
    <member kind="function">
      <name>QTextEncoder</name>
      <anchor>QTextEncoder</anchor>
      <arglist>( const QTextCodec * codec )</arglist>
    </member>
    <member kind="function">
      <name>fromUnicode</name>
      <anchor>fromUnicode</anchor>
      <arglist>( const QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>fromUnicode</name>
      <anchor>fromUnicode-2</anchor>
      <arglist>( const QChar * uc, int len )</arglist>
    </member>
    <member kind="function">
      <name>fromUnicode</name>
      <anchor>fromUnicode-3</anchor>
      <arglist>( const QString &amp; uc, int &amp; lenInOut )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextFormat</name>
    <filename>qtextformat.html</filename>
    <member kind="enum">
      <name>FormatType</name>
      <anchor>FormatType-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ObjectTypes</name>
      <anchor>ObjectTypes-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Property</name>
      <anchor>Property-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextFormat</name>
      <anchor>QTextFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextFormat</name>
      <anchor>QTextFormat-2</anchor>
      <arglist>( int type )</arglist>
    </member>
    <member kind="function">
      <name>QTextFormat</name>
      <anchor>QTextFormat-3</anchor>
      <arglist>( const QTextFormat &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>background</name>
      <anchor>background</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boolProperty</name>
      <anchor>boolProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>brushProperty</name>
      <anchor>brushProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>clearBackground</name>
      <anchor>clearBackground</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearForeground</name>
      <anchor>clearForeground</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearProperty</name>
      <anchor>clearProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>colorProperty</name>
      <anchor>colorProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>doubleProperty</name>
      <anchor>doubleProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>foreground</name>
      <anchor>foreground</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasProperty</name>
      <anchor>hasProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>intProperty</name>
      <anchor>intProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>isBlockFormat</name>
      <anchor>isBlockFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isCharFormat</name>
      <anchor>isCharFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFrameFormat</name>
      <anchor>isFrameFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isImageFormat</name>
      <anchor>isImageFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isListFormat</name>
      <anchor>isListFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTableFormat</name>
      <anchor>isTableFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>layoutDirection</anchor>
      <arglist> QTextFormat::layoutDirection()</arglist>
    </member>
    <member kind="function">
      <name>lengthProperty</name>
      <anchor>lengthProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>lengthVectorProperty</name>
      <anchor>lengthVectorProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>merge</name>
      <anchor>merge</anchor>
      <arglist>( const QTextFormat &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>objectIndex</name>
      <anchor>objectIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>objectType</name>
      <anchor>objectType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>penProperty</name>
      <anchor>penProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>properties</name>
      <anchor>properties</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>property</name>
      <anchor>property</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>setBackground</name>
      <anchor>setBackground</anchor>
      <arglist>( const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>setForeground</name>
      <anchor>setForeground</anchor>
      <arglist>( const QBrush &amp; brush )</arglist>
    </member>
    <member kind="function">
      <name>setLayoutDirection</name>
      <anchor>setLayoutDirection</anchor>
      <arglist>( Qt::LayoutDirection direction )</arglist>
    </member>
    <member kind="function">
      <name>setObjectIndex</name>
      <anchor>setObjectIndex</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setObjectType</name>
      <anchor>setObjectType</anchor>
      <arglist>( int type )</arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>setProperty</anchor>
      <arglist>( int propertyId, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>setProperty-2</anchor>
      <arglist>( int propertyId, const QVector&lt;QTextLength&gt; &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>stringProperty</name>
      <anchor>stringProperty</anchor>
      <arglist>( int propertyId )</arglist>
    </member>
    <member kind="function">
      <name>toBlockFormat</name>
      <anchor>toBlockFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toCharFormat</name>
      <anchor>toCharFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFrameFormat</name>
      <anchor>toFrameFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toImageFormat</name>
      <anchor>toImageFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toListFormat</name>
      <anchor>toListFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toTableFormat</name>
      <anchor>toTableFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTextFormat &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextFormat &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTextFormat &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextFragment</name>
    <filename>qtextfragment.html</filename>
    <member kind="function">
      <name>QTextFragment</name>
      <anchor>QTextFragment-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextFragment</name>
      <anchor>QTextFragment-3</anchor>
      <arglist>( const QTextFragment &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>charFormat</name>
      <anchor>charFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>charFormatIndex</name>
      <anchor>charFormatIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( int position )</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>position</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTextFragment &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTextFragment &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextFragment &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTextFragment &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextFrame::iterator</name>
    <filename>qtextframe-iterator.html</filename>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-3</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentBlock</name>
      <anchor>currentBlock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentFrame</name>
      <anchor>currentFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentFrame</name>
      <anchor>parentFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>operator-2b-2b-2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator--</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator--</name>
      <anchor>operator---2</anchor>
      <arglist>( int )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const iterator &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextFrame</name>
    <filename>qtextframe.html</filename>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextFrame</name>
      <anchor>QTextFrame</anchor>
      <arglist>( QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childFrames</name>
      <anchor>childFrames</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>firstCursorPosition</name>
      <anchor>firstCursorPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>firstPosition</name>
      <anchor>firstPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>frameFormat</name>
      <anchor>frameFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastCursorPosition</name>
      <anchor>lastCursorPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastPosition</name>
      <anchor>lastPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentFrame</name>
      <anchor>parentFrame</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFrameFormat</name>
      <anchor>setFrameFormat</anchor>
      <arglist>( const QTextFrameFormat &amp; format )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextFrameFormat</name>
    <filename>qtextframeformat.html</filename>
    <member kind="enum">
      <name>Position</name>
      <anchor>Position-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextFrameFormat</name>
      <anchor>QTextFrameFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>border</name>
      <anchor>border</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>margin</name>
      <anchor>margin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>padding</name>
      <anchor>padding</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>position</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBorder</name>
      <anchor>setBorder</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( const QTextLength &amp; height )</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight-2</anchor>
      <arglist>( qreal height )</arglist>
    </member>
    <member kind="function">
      <name>setMargin</name>
      <anchor>setMargin</anchor>
      <arglist>( qreal margin )</arglist>
    </member>
    <member kind="function">
      <name>setPadding</name>
      <anchor>setPadding</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>setPosition</anchor>
      <arglist>( Position policy )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( const QTextLength &amp; width )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth-2</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextImageFormat</name>
    <filename>qtextimageformat.html</filename>
    <member kind="function">
      <name>QTextImageFormat</name>
      <anchor>QTextImageFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setHeight</name>
      <anchor>setHeight</anchor>
      <arglist>( qreal height )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextInlineObject</name>
    <filename>qtextinlineobject.html</filename>
    <member kind="function">
      <name>QTextInlineObject</name>
      <anchor>QTextInlineObject</anchor>
      <arglist>( int i, QTextEngine * e )</arglist>
    </member>
    <member kind="function">
      <name>ascent</name>
      <anchor>ascent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>descent</name>
      <anchor>descent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>formatIndex</name>
      <anchor>formatIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAscent</name>
      <anchor>setAscent</anchor>
      <arglist>( qreal a )</arglist>
    </member>
    <member kind="function">
      <name>setDescent</name>
      <anchor>setDescent</anchor>
      <arglist>( qreal d )</arglist>
    </member>
    <member kind="function">
      <name>setWidth</name>
      <anchor>setWidth</anchor>
      <arglist>( qreal w )</arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>textDirection</anchor>
      <arglist> QTextInlineObject::textDirection()</arglist>
    </member>
    <member kind="function">
      <name>textPosition</name>
      <anchor>textPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextIStream</name>
    <filename>qtextistream.html</filename>
    <member kind="function">
      <name>QTextIStream</name>
      <anchor>QTextIStream</anchor>
      <arglist>( const QString * string )</arglist>
    </member>
    <member kind="function">
      <name>QTextIStream</name>
      <anchor>QTextIStream-2</anchor>
      <arglist>( QByteArray * byteArray )</arglist>
    </member>
    <member kind="function">
      <name>QTextIStream</name>
      <anchor>QTextIStream-3</anchor>
      <arglist>( FILE * file )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextLayout::FormatRange</name>
    <filename>qtextlayout-formatrange.html</filename>
  </compound>
  <compound kind="class">
    <name>QTextLayout</name>
    <filename>qtextlayout.html</filename>
    <member kind="enum">
      <name>CursorMode</name>
      <anchor>CursorMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextLayout</name>
      <anchor>QTextLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextLayout</name>
      <anchor>QTextLayout-2</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>QTextLayout</name>
      <anchor>QTextLayout-3</anchor>
      <arglist>( const QString &amp; text, const QFont &amp; font, QPaintDevice * paintdevice = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QTextLayout</name>
      <anchor>QTextLayout-4</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>additionalFormats</name>
      <anchor>additionalFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginLayout</name>
      <anchor>beginLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingRect</name>
      <anchor>boundingRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cacheEnabled</name>
      <anchor>cacheEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearAdditionalFormats</name>
      <anchor>clearAdditionalFormats</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>createLine</name>
      <anchor>createLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter * p, const QPointF &amp; pos, const QVector&lt;FormatRange&gt; &amp; selections = QVector&lt;FormatRange&gt;()</arglist>
    </member>
    <member kind="function">
      <name>drawCursor</name>
      <anchor>drawCursor</anchor>
      <arglist>( QPainter * painter, const QPointF &amp; position, int cursorPosition )</arglist>
    </member>
    <member kind="function">
      <name>endLayout</name>
      <anchor>endLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValidCursorPosition</name>
      <anchor>isValidCursorPosition</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>lineAt</name>
      <anchor>lineAt</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>lineCount</name>
      <anchor>lineCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineForTextPosition</name>
      <anchor>lineForTextPosition</anchor>
      <arglist>( int pos )</arglist>
    </member>
    <member kind="function">
      <name>maximumWidth</name>
      <anchor>maximumWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumWidth</name>
      <anchor>minimumWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nextCursorPosition</name>
      <anchor>nextCursorPosition</anchor>
      <arglist>( int oldPos, CursorMode mode = SkipCharacters )</arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>position</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>preeditAreaPosition</name>
      <anchor>preeditAreaPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>preeditAreaText</name>
      <anchor>preeditAreaText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previousCursorPosition</name>
      <anchor>previousCursorPosition</anchor>
      <arglist>( int oldPos, CursorMode mode = SkipCharacters )</arglist>
    </member>
    <member kind="function">
      <name>setAdditionalFormats</name>
      <anchor>setAdditionalFormats</anchor>
      <arglist>( const QList&lt;FormatRange&gt; &amp; formatList )</arglist>
    </member>
    <member kind="function">
      <name>setCacheEnabled</name>
      <anchor>setCacheEnabled</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>setPosition</anchor>
      <arglist>( const QPointF &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>setPreeditArea</name>
      <anchor>setPreeditArea</anchor>
      <arglist>( int position, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( const QString &amp; string )</arglist>
    </member>
    <member kind="function">
      <name>setTextOption</name>
      <anchor>setTextOption</anchor>
      <arglist>( const QTextOption &amp; option )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textOption</name>
      <anchor>textOption</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextLength</name>
    <filename>qtextlength.html</filename>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextLength</name>
      <anchor>QTextLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextLength</name>
      <anchor>QTextLength-2</anchor>
      <arglist>( Type type, qreal value )</arglist>
    </member>
    <member kind="function">
      <name>rawValue</name>
      <anchor>rawValue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( qreal maximumLength )</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QVariant</anchor>
      <arglist> QVariant()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTextLength &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTextLength &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextLine</name>
    <filename>qtextline.html</filename>
    <member kind="enum">
      <name>CursorPosition</name>
      <anchor>CursorPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Edge</name>
      <anchor>Edge-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextLine</name>
      <anchor>QTextLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ascent</name>
      <anchor>ascent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cursorToX</name>
      <anchor>cursorToX</anchor>
      <arglist>( int * cursorPos, Edge edge = Leading )</arglist>
    </member>
    <member kind="function">
      <name>cursorToX</name>
      <anchor>cursorToX-2</anchor>
      <arglist>( int cursorPos, Edge edge = Leading )</arglist>
    </member>
    <member kind="function">
      <name>descent</name>
      <anchor>descent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>draw</name>
      <anchor>draw</anchor>
      <arglist>( QPainter * painter, const QPointF &amp; position, const QTextLayout::FormatRange * selection = 0 )</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>height</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineNumber</name>
      <anchor>lineNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>naturalTextRect</name>
      <anchor>naturalTextRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>naturalTextWidth</name>
      <anchor>naturalTextWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rect</name>
      <anchor>rect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLineWidth</name>
      <anchor>setLineWidth</anchor>
      <arglist>( qreal width )</arglist>
    </member>
    <member kind="function">
      <name>setNumColumns</name>
      <anchor>setNumColumns</anchor>
      <arglist>( int numColumns )</arglist>
    </member>
    <member kind="function">
      <name>setPosition</name>
      <anchor>setPosition</anchor>
      <arglist>( const QPointF &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>textLength</name>
      <anchor>textLength</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textStart</name>
      <anchor>textStart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>xToCursor</name>
      <anchor>xToCursor</anchor>
      <arglist>( qreal x, CursorPosition cpos = CursorBetweenCharacters )</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextList</name>
    <filename>qtextlist.html</filename>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>itemNumber</name>
      <anchor>itemNumber</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>itemText</name>
      <anchor>itemText</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QTextBlock &amp; block )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QTextListFormat &amp; format )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextListFormat</name>
    <filename>qtextlistformat.html</filename>
    <member kind="enum">
      <name>Style</name>
      <anchor>Style-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextListFormat</name>
      <anchor>QTextListFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indent</name>
      <anchor>indent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setIndent</name>
      <anchor>setIndent</anchor>
      <arglist>( qreal indentation )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle</anchor>
      <arglist>( Style style )</arglist>
    </member>
    <member kind="function">
      <name>style</name>
      <anchor>style</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextObject</name>
    <filename>qtextobject.html</filename>
    <member kind="function">
      <name>QTextObject</name>
      <anchor>QTextObject</anchor>
      <arglist>( QTextDocument * document )</arglist>
    </member>
    <member kind="function">
      <name>document</name>
      <anchor>document</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>formatIndex</name>
      <anchor>formatIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>objectIndex</name>
      <anchor>objectIndex</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QTextFormat &amp; format )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextOption</name>
    <filename>qtextoption.html</filename>
    <member kind="enum">
      <name>WrapMode</name>
      <anchor>WrapMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextOption</name>
      <anchor>QTextOption</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextOption</name>
      <anchor>QTextOption-2</anchor>
      <arglist>( Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>QTextOption</name>
      <anchor>QTextOption-3</anchor>
      <arglist>( const QTextOption &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist> QTextOption::alignment()</arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>flags</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>setFlags</name>
      <anchor>setFlags</anchor>
      <arglist>( Flags flags )</arglist>
    </member>
    <member kind="function">
      <name>setTabArray</name>
      <anchor>setTabArray</anchor>
      <arglist>( QList&lt;qreal&gt; tabStops )</arglist>
    </member>
    <member kind="function">
      <name>setTabStop</name>
      <anchor>setTabStop</anchor>
      <arglist>( qreal tabStop )</arglist>
    </member>
    <member kind="function">
      <name>setTextDirection</name>
      <anchor>setTextDirection</anchor>
      <arglist>( Qt::LayoutDirection direction )</arglist>
    </member>
    <member kind="function">
      <name>setUseDesignMetrics</name>
      <anchor>setUseDesignMetrics</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setWrapMode</name>
      <anchor>setWrapMode</anchor>
      <arglist>( WrapMode mode )</arglist>
    </member>
    <member kind="function">
      <name>tabArray</name>
      <anchor>tabArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tabStop</name>
      <anchor>tabStop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>textDirection</anchor>
      <arglist> QTextOption::textDirection()</arglist>
    </member>
    <member kind="function">
      <name>useDesignMetrics</name>
      <anchor>useDesignMetrics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wrapMode</name>
      <anchor>wrapMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextOption &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextOStream</name>
    <filename>qtextostream.html</filename>
    <member kind="function">
      <name>QTextOStream</name>
      <anchor>QTextOStream</anchor>
      <arglist>( QString * string )</arglist>
    </member>
    <member kind="function">
      <name>QTextOStream</name>
      <anchor>QTextOStream-2</anchor>
      <arglist>( QByteArray * byteArray )</arglist>
    </member>
    <member kind="function">
      <name>QTextOStream</name>
      <anchor>QTextOStream-3</anchor>
      <arglist>( FILE * file )</arglist>
    </member>
    <member kind="enum">
      <name>Encoding</name>
      <anchor>Encoding-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( int f )</arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>flags</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>flags-2</anchor>
      <arglist>( int f )</arglist>
    </member>
    <member kind="function">
      <name>precision</name>
      <anchor>precision</anchor>
      <arglist>( int p )</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setEncoding</name>
      <anchor>setEncoding</anchor>
      <arglist>( Encoding encoding )</arglist>
    </member>
    <member kind="function">
      <name>setf</name>
      <anchor>setf</anchor>
      <arglist>( int bits )</arglist>
    </member>
    <member kind="function">
      <name>setf</name>
      <anchor>setf-2</anchor>
      <arglist>( int bits, int mask )</arglist>
    </member>
    <member kind="function">
      <name>unsetDevice</name>
      <anchor>unsetDevice</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unsetf</name>
      <anchor>unsetf</anchor>
      <arglist>( int bits )</arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>width</anchor>
      <arglist>( int w )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextStream</name>
    <filename>qtextstream.html</filename>
    <member kind="enum">
      <name>FieldAlignment</name>
      <anchor>FieldAlignment-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>RealNumberNotation</name>
      <anchor>RealNumberNotation-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTextStream</name>
      <anchor>QTextStream</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextStream</name>
      <anchor>QTextStream-2</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>QTextStream</name>
      <anchor>QTextStream-3</anchor>
      <arglist>( FILE * fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>QTextStream</name>
      <anchor>QTextStream-4</anchor>
      <arglist>( QString * string, QIODevice::OpenMode openMode = QIODevice::ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>QTextStream</name>
      <anchor>QTextStream-5</anchor>
      <arglist>( QByteArray * array, QIODevice::OpenMode openMode = QIODevice::ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>QTextStream</name>
      <anchor>QTextStream-6</anchor>
      <arglist>( const QByteArray &amp; array, QIODevice::OpenMode openMode = QIODevice::ReadOnly )</arglist>
    </member>
    <member kind="function">
      <name>atEnd</name>
      <anchor>atEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>autoDetectUnicode</name>
      <anchor>autoDetectUnicode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>codec</name>
      <anchor>codec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>device</name>
      <anchor>device</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fieldAlignment</name>
      <anchor>fieldAlignment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fieldWidth</name>
      <anchor>fieldWidth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>flush</name>
      <anchor>flush</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>generateByteOrderMark</name>
      <anchor>generateByteOrderMark</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>integerBase</name>
      <anchor>integerBase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>numberFlags</name>
      <anchor>numberFlags</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>padChar</name>
      <anchor>padChar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readAll</name>
      <anchor>readAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readLine</name>
      <anchor>readLine</anchor>
      <arglist>( qint64 maxlen = 0 )</arglist>
    </member>
    <member kind="function">
      <name>realNumberNotation</name>
      <anchor>realNumberNotation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>realNumberPrecision</name>
      <anchor>realNumberPrecision</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>seek</name>
      <anchor>seek</anchor>
      <arglist>( qint64 pos )</arglist>
    </member>
    <member kind="function">
      <name>setAutoDetectUnicode</name>
      <anchor>setAutoDetectUnicode</anchor>
      <arglist>( bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>setCodec</name>
      <anchor>setCodec</anchor>
      <arglist>( QTextCodec * codec )</arglist>
    </member>
    <member kind="function">
      <name>setCodec</name>
      <anchor>setCodec-2</anchor>
      <arglist>( const char * codecName )</arglist>
    </member>
    <member kind="function">
      <name>setDevice</name>
      <anchor>setDevice</anchor>
      <arglist>( QIODevice * device )</arglist>
    </member>
    <member kind="function">
      <name>setFieldAlignment</name>
      <anchor>setFieldAlignment</anchor>
      <arglist>( FieldAlignment mode )</arglist>
    </member>
    <member kind="function">
      <name>setFieldWidth</name>
      <anchor>setFieldWidth</anchor>
      <arglist>( int width )</arglist>
    </member>
    <member kind="function">
      <name>setGenerateByteOrderMark</name>
      <anchor>setGenerateByteOrderMark</anchor>
      <arglist>( bool generate )</arglist>
    </member>
    <member kind="function">
      <name>setIntegerBase</name>
      <anchor>setIntegerBase</anchor>
      <arglist>( int base )</arglist>
    </member>
    <member kind="function">
      <name>setNumberFlags</name>
      <anchor>setNumberFlags</anchor>
      <arglist>( NumberFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>setPadChar</name>
      <anchor>setPadChar</anchor>
      <arglist>( QChar ch )</arglist>
    </member>
    <member kind="function">
      <name>setRealNumberNotation</name>
      <anchor>setRealNumberNotation</anchor>
      <arglist>( RealNumberNotation notation )</arglist>
    </member>
    <member kind="function">
      <name>setRealNumberPrecision</name>
      <anchor>setRealNumberPrecision</anchor>
      <arglist>( int precision )</arglist>
    </member>
    <member kind="function">
      <name>setString</name>
      <anchor>setString</anchor>
      <arglist>( QString * string, QIODevice::OpenMode openMode = QIODevice::ReadWrite )</arglist>
    </member>
    <member kind="function">
      <name>skipWhiteSpace</name>
      <anchor>skipWhiteSpace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>string</name>
      <anchor>string</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( QChar c )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-2</anchor>
      <arglist>( signed short i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-3</anchor>
      <arglist>( float f )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-4</anchor>
      <arglist>( const QString &amp; string )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-5</anchor>
      <arglist>( char c )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-6</anchor>
      <arglist>( unsigned short i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-7</anchor>
      <arglist>( signed int i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-8</anchor>
      <arglist>( unsigned int i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-9</anchor>
      <arglist>( signed long i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-10</anchor>
      <arglist>( unsigned long i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-11</anchor>
      <arglist>( qlonglong i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-12</anchor>
      <arglist>( qulonglong i )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-13</anchor>
      <arglist>( double f )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-14</anchor>
      <arglist>( const QByteArray &amp; array )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-15</anchor>
      <arglist>( const char * string )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-16</anchor>
      <arglist>( const void * ptr )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt</anchor>
      <arglist>( QChar &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-2</anchor>
      <arglist>( signed short &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-3</anchor>
      <arglist>( float &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-4</anchor>
      <arglist>( QString &amp; str )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-5</anchor>
      <arglist>( char &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-6</anchor>
      <arglist>( unsigned short &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-7</anchor>
      <arglist>( signed int &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-8</anchor>
      <arglist>( unsigned int &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-9</anchor>
      <arglist>( signed long &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-10</anchor>
      <arglist>( unsigned long &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-11</anchor>
      <arglist>( qlonglong &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-12</anchor>
      <arglist>( qulonglong &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-13</anchor>
      <arglist>( double &amp; f )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-14</anchor>
      <arglist>( QByteArray &amp; array )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>operator-gt-gt-15</anchor>
      <arglist>( char * c )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextTable</name>
    <filename>qtexttable.html</filename>
    <member kind="function">
      <name>cellAt</name>
      <anchor>cellAt</anchor>
      <arglist>( int row, int column )</arglist>
    </member>
    <member kind="function">
      <name>cellAt</name>
      <anchor>cellAt-2</anchor>
      <arglist>( int position )</arglist>
    </member>
    <member kind="function">
      <name>cellAt</name>
      <anchor>cellAt-3</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>columns</name>
      <anchor>columns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>insertColumns</name>
      <anchor>insertColumns</anchor>
      <arglist>( int index, int columns )</arglist>
    </member>
    <member kind="function">
      <name>insertRows</name>
      <anchor>insertRows</anchor>
      <arglist>( int index, int rows )</arglist>
    </member>
    <member kind="function">
      <name>removeColumns</name>
      <anchor>removeColumns</anchor>
      <arglist>( int index, int columns )</arglist>
    </member>
    <member kind="function">
      <name>removeRows</name>
      <anchor>removeRows</anchor>
      <arglist>( int index, int rows )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int rows, int columns )</arglist>
    </member>
    <member kind="function">
      <name>rowEnd</name>
      <anchor>rowEnd</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>rowStart</name>
      <anchor>rowStart</anchor>
      <arglist>( const QTextCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>rows</name>
      <anchor>rows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFormat</name>
      <anchor>setFormat</anchor>
      <arglist>( const QTextTableFormat &amp; format )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextTableCell</name>
    <filename>qtexttablecell.html</filename>
    <member kind="function">
      <name>QTextTableCell</name>
      <anchor>QTextTableCell</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTextTableCell</name>
      <anchor>QTextTableCell-2</anchor>
      <arglist>( const QTextTableCell &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>begin</anchor>
      <arglist> QTextTableCell::begin()</arglist>
    </member>
    <member kind="function">
      <name>column</name>
      <anchor>column</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnSpan</name>
      <anchor>columnSpan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>end</anchor>
      <arglist> QTextTableCell::end()</arglist>
    </member>
    <member kind="function">
      <name>firstCursorPosition</name>
      <anchor>firstCursorPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>format</name>
      <anchor>format</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastCursorPosition</name>
      <anchor>lastCursorPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>row</name>
      <anchor>row</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>rowSpan</name>
      <anchor>rowSpan</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTextTableCell &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTextTableCell &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTextTableCell &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTextTableFormat</name>
    <filename>qtexttableformat.html</filename>
    <member kind="function">
      <name>QTextTableFormat</name>
      <anchor>QTextTableFormat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alignment</name>
      <anchor>alignment</anchor>
      <arglist> QTextTableFormat::alignment()</arglist>
    </member>
    <member kind="function">
      <name>cellPadding</name>
      <anchor>cellPadding</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cellSpacing</name>
      <anchor>cellSpacing</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearColumnWidthConstraints</name>
      <anchor>clearColumnWidthConstraints</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnWidthConstraints</name>
      <anchor>columnWidthConstraints</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columns</name>
      <anchor>columns</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAlignment</name>
      <anchor>setAlignment</anchor>
      <arglist>( Qt::Alignment alignment )</arglist>
    </member>
    <member kind="function">
      <name>setCellPadding</name>
      <anchor>setCellPadding</anchor>
      <arglist>( qreal padding )</arglist>
    </member>
    <member kind="function">
      <name>setCellSpacing</name>
      <anchor>setCellSpacing</anchor>
      <arglist>( qreal spacing )</arglist>
    </member>
    <member kind="function">
      <name>setColumnWidthConstraints</name>
      <anchor>setColumnWidthConstraints</anchor>
      <arglist>( const QVector&lt;QTextLength&gt; &amp; constraints )</arglist>
    </member>
    <member kind="function">
      <name>setColumns</name>
      <anchor>setColumns</anchor>
      <arglist>( int columns )</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>running</name>
      <anchor>running</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QThread</name>
    <filename>qthread.html</filename>
    <member kind="enum">
      <name>Priority</name>
      <anchor>Priority-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QThread</name>
      <anchor>QThread</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>currentThread</name>
      <anchor>currentThread</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>currentThreadId</anchor>
      <arglist> QThread::currentThreadId()</arglist>
    </member>
    <member kind="function">
      <name>exec</name>
      <anchor>exec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>exit</name>
      <anchor>exit</anchor>
      <arglist>( int returnCode = 0 )</arglist>
    </member>
    <member kind="function">
      <name>finished</name>
      <anchor>finished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFinished</name>
      <anchor>isFinished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRunning</name>
      <anchor>isRunning</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>msleep</name>
      <anchor>msleep</anchor>
      <arglist>( unsigned long msecs )</arglist>
    </member>
    <member kind="function">
      <name>quit</name>
      <anchor>quit</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>run</name>
      <anchor>run</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setStackSize</name>
      <anchor>setStackSize</anchor>
      <arglist>( uint stackSize )</arglist>
    </member>
    <member kind="function">
      <name>setTerminationEnabled</name>
      <anchor>setTerminationEnabled</anchor>
      <arglist>( bool enabled = true )</arglist>
    </member>
    <member kind="function">
      <name>sleep</name>
      <anchor>sleep</anchor>
      <arglist>( unsigned long secs )</arglist>
    </member>
    <member kind="function">
      <name>stackSize</name>
      <anchor>stackSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( Priority priority = InheritPriority )</arglist>
    </member>
    <member kind="function">
      <name>started</name>
      <anchor>started</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>terminate</name>
      <anchor>terminate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>terminated</name>
      <anchor>terminated</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>usleep</name>
      <anchor>usleep</anchor>
      <arglist>( unsigned long usecs )</arglist>
    </member>
    <member kind="function">
      <name>wait</name>
      <anchor>wait</anchor>
      <arglist>( unsigned long time = ULONG_MAX )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QThreadStorage</name>
    <filename>qthreadstorage.html</filename>
    <member kind="function">
      <name>QThreadStorage</name>
      <anchor>QThreadStorage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasLocalData</name>
      <anchor>hasLocalData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localData</name>
      <anchor>localData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localData</name>
      <anchor>localData-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLocalData</name>
      <anchor>setLocalData</anchor>
      <arglist>( T data )</arglist>
    </member>
    <member kind="function">
      <name>currentDate</name>
      <anchor>currentDate</anchor>
      <arglist>( Qt::TimeSpec spec )</arglist>
    </member>
    <member kind="function">
      <name>currentTime</name>
      <anchor>currentTime</anchor>
      <arglist>( Qt::TimeSpec spec )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTime</name>
    <filename>qtime.html</filename>
    <member kind="function">
      <name>QTime</name>
      <anchor>QTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTime</name>
      <anchor>QTime-2</anchor>
      <arglist>( int h, int m, int s = 0, int ms = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addMSecs</name>
      <anchor>addMSecs</anchor>
      <arglist>( int ms )</arglist>
    </member>
    <member kind="function">
      <name>addSecs</name>
      <anchor>addSecs</anchor>
      <arglist>( int nsecs )</arglist>
    </member>
    <member kind="function">
      <name>currentTime</name>
      <anchor>currentTime-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>elapsed</name>
      <anchor>elapsed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString</anchor>
      <arglist>( const QString &amp; string, Qt::DateFormat format = Qt::TextDate )</arglist>
    </member>
    <member kind="function">
      <name>fromString</name>
      <anchor>fromString-2</anchor>
      <arglist>( const QString &amp; string, const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>hour</name>
      <anchor>hour</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid-2</anchor>
      <arglist>( int h, int m, int s, int ms = 0 )</arglist>
    </member>
    <member kind="function">
      <name>minute</name>
      <anchor>minute</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>msec</name>
      <anchor>msec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>msecsTo</name>
      <anchor>msecsTo</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>restart</name>
      <anchor>restart</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>second</name>
      <anchor>second</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>secsTo</name>
      <anchor>secsTo</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>setHMS</name>
      <anchor>setHMS</anchor>
      <arglist>( int h, int m, int s, int ms = 0 )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( const QString &amp; format )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString-2</anchor>
      <arglist>( Qt::DateFormat f = Qt::TextDate )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QTime &amp; t )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTimeEdit</name>
    <filename>qtimeedit.html</filename>
    <member kind="function">
      <name>QTimeEdit</name>
      <anchor>QTimeEdit</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QTimeEdit</name>
      <anchor>QTimeEdit-2</anchor>
      <arglist>( const QTime &amp; t, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QTimer</name>
      <anchor>QTimer-2</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>changeInterval</name>
      <anchor>changeInterval</anchor>
      <arglist>( int msec )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start-3</anchor>
      <arglist>( int msec, bool sshot )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTimer</name>
    <filename>qtimer.html</filename>
    <member kind="function">
      <name>QTimer</name>
      <anchor>QTimer</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>isActive</name>
      <anchor>isActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>singleShot</name>
      <anchor>singleShot</anchor>
      <arglist>( int msec, QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start</anchor>
      <arglist>( int msec )</arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>start-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stop</name>
      <anchor>stop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timeout</name>
      <anchor>timeout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>timerId</name>
      <anchor>timerId</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTimerEvent</name>
    <filename>qtimerevent.html</filename>
    <member kind="function">
      <name>QTimerEvent</name>
      <anchor>QTimerEvent</anchor>
      <arglist>( int timerId )</arglist>
    </member>
    <member kind="function">
      <name>timerId</name>
      <anchor>timerId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QToolBar</name>
      <anchor>QToolBar-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>label</name>
      <anchor>label</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setLabel</name>
      <anchor>setLabel</anchor>
      <arglist>( const QString &amp; label )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QToolBar</name>
    <filename>qtoolbar.html</filename>
    <member kind="function">
      <name>QToolBar</name>
      <anchor>QToolBar</anchor>
      <arglist>( const QString &amp; title, QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QToolBar</name>
      <anchor>QToolBar-2</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>actionAt</name>
      <anchor>actionAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>actionAt</name>
      <anchor>actionAt-2</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>actionTriggered</name>
      <anchor>actionTriggered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-2</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-3</anchor>
      <arglist>( const QString &amp; text, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction-4</anchor>
      <arglist>( const QIcon &amp; icon, const QString &amp; text, const QObject * receiver, const char * member )</arglist>
    </member>
    <member kind="function">
      <name>addSeparator</name>
      <anchor>addSeparator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addWidget</name>
      <anchor>addWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>ToolBarAreas</name>
      <anchor>allowedAreas</anchor>
      <arglist> QToolBar::allowedAreas()</arglist>
    </member>
    <member kind="function">
      <name>allowedAreasChanged</name>
      <anchor>allowedAreasChanged</anchor>
      <arglist>( Qt::ToolBarAreas allowedAreas )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconSize</name>
      <anchor>iconSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconSizeChanged</name>
      <anchor>iconSizeChanged</anchor>
      <arglist>( const QSize &amp; iconSize )</arglist>
    </member>
    <member kind="function">
      <name>insertSeparator</name>
      <anchor>insertSeparator</anchor>
      <arglist>( QAction * before )</arglist>
    </member>
    <member kind="function">
      <name>insertWidget</name>
      <anchor>insertWidget</anchor>
      <arglist>( QAction * before, QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>isAreaAllowed</name>
      <anchor>isAreaAllowed</anchor>
      <arglist>( Qt::ToolBarArea area )</arglist>
    </member>
    <member kind="function">
      <name>movableChanged</name>
      <anchor>movableChanged</anchor>
      <arglist>( bool movable )</arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist> QToolBar::orientation()</arglist>
    </member>
    <member kind="function">
      <name>orientationChanged</name>
      <anchor>orientationChanged</anchor>
      <arglist>( Qt::Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>setAllowedAreas</name>
      <anchor>setAllowedAreas</anchor>
      <arglist>( Qt::ToolBarAreas areas )</arglist>
    </member>
    <member kind="function">
      <name>setIconSize</name>
      <anchor>setIconSize</anchor>
      <arglist>( const QSize &amp; iconSize )</arglist>
    </member>
    <member kind="function">
      <name>setOrientation</name>
      <anchor>setOrientation</anchor>
      <arglist>( Qt::Orientation orientation )</arglist>
    </member>
    <member kind="function">
      <name>setToolButtonStyle</name>
      <anchor>setToolButtonStyle</anchor>
      <arglist>( Qt::ToolButtonStyle toolButtonStyle )</arglist>
    </member>
    <member kind="function">
      <name>toggleViewAction</name>
      <anchor>toggleViewAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ToolButtonStyle</name>
      <anchor>toolButtonStyle</anchor>
      <arglist> QToolBar::toolButtonStyle()</arglist>
    </member>
    <member kind="function">
      <name>toolButtonStyleChanged</name>
      <anchor>toolButtonStyleChanged</anchor>
      <arglist>( Qt::ToolButtonStyle toolButtonStyle )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QToolBarChangeEvent</name>
    <filename>qtoolbarchangeevent.html</filename>
    <member kind="function">
      <name>toggle</name>
      <anchor>toggle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QToolBox</name>
      <anchor>QToolBox-2</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>item</name>
      <anchor>item</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemIconSet</name>
      <anchor>itemIconSet</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemLabel</name>
      <anchor>itemLabel</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem-2</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setItemIconSet</name>
      <anchor>setItemIconSet</anchor>
      <arglist>( int index, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setItemLabel</name>
      <anchor>setItemLabel</anchor>
      <arglist>( int index, const QString &amp; text )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QToolBox</name>
    <filename>qtoolbox.html</filename>
    <member kind="function">
      <name>QToolBox</name>
      <anchor>QToolBox</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem</anchor>
      <arglist>( QWidget * widget, const QIcon &amp; iconSet, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>addItem</name>
      <anchor>addItem-2</anchor>
      <arglist>( QWidget * w, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>currentChanged</name>
      <anchor>currentChanged</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>currentWidget</name>
      <anchor>currentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem</anchor>
      <arglist>( int index, QWidget * widget, const QIcon &amp; icon, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>insertItem</name>
      <anchor>insertItem-2</anchor>
      <arglist>( int index, QWidget * widget, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>isItemEnabled</name>
      <anchor>isItemEnabled</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemIcon</name>
      <anchor>itemIcon</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemInserted</name>
      <anchor>itemInserted</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemRemoved</name>
      <anchor>itemRemoved</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemText</name>
      <anchor>itemText</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>itemToolTip</name>
      <anchor>itemToolTip</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>removeItem</name>
      <anchor>removeItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>setCurrentWidget</name>
      <anchor>setCurrentWidget</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
    <member kind="function">
      <name>setItemEnabled</name>
      <anchor>setItemEnabled</anchor>
      <arglist>( int index, bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>setItemIcon</name>
      <anchor>setItemIcon</anchor>
      <arglist>( int index, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setItemText</name>
      <anchor>setItemText</anchor>
      <arglist>( int index, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setItemToolTip</name>
      <anchor>setItemToolTip</anchor>
      <arglist>( int index, const QString &amp; toolTip )</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="enum">
      <name>TextPosition</name>
      <anchor>TextPosition-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QToolButton</name>
      <anchor>QToolButton-3</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QToolButton</name>
      <anchor>QToolButton-4</anchor>
      <arglist>( Qt::ArrowType type, QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>QToolButton</name>
      <anchor>QToolButton-5</anchor>
      <arglist>( const QIcon &amp; iconSet, const QString &amp; textLabel, const QString &amp; statusTip, QObject * receiver, const char * slot, QWidget * parent, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet-2</anchor>
      <arglist>( bool on )</arglist>
    </member>
    <member kind="function">
      <name>offIconSet</name>
      <anchor>offIconSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>onIconSet</name>
      <anchor>onIconSet</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openPopup</name>
      <anchor>openPopup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>popup</name>
      <anchor>popup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>popupDelay</name>
      <anchor>popupDelay</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setIconSet</name>
      <anchor>setIconSet</anchor>
      <arglist>( const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setIconSet</name>
      <anchor>setIconSet-2</anchor>
      <arglist>( const QIcon &amp; set, bool on )</arglist>
    </member>
    <member kind="function">
      <name>setOffIconSet</name>
      <anchor>setOffIconSet</anchor>
      <arglist>( const QIcon &amp; set )</arglist>
    </member>
    <member kind="function">
      <name>setOnIconSet</name>
      <anchor>setOnIconSet</anchor>
      <arglist>( const QIcon &amp; set )</arglist>
    </member>
    <member kind="function">
      <name>setPixmap</name>
      <anchor>setPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>setPopup</name>
      <anchor>setPopup</anchor>
      <arglist>( QMenu * popup )</arglist>
    </member>
    <member kind="function">
      <name>setPopupDelay</name>
      <anchor>setPopupDelay</anchor>
      <arglist>( int delay )</arglist>
    </member>
    <member kind="function">
      <name>setTextLabel</name>
      <anchor>setTextLabel</anchor>
      <arglist>( const QString &amp; text, bool tooltip = true )</arglist>
    </member>
    <member kind="function">
      <name>setTextPosition</name>
      <anchor>setTextPosition</anchor>
      <arglist>( TextPosition pos )</arglist>
    </member>
    <member kind="function">
      <name>setUsesBigPixmap</name>
      <anchor>setUsesBigPixmap</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>setUsesTextLabel</name>
      <anchor>setUsesTextLabel</anchor>
      <arglist>( bool enable )</arglist>
    </member>
    <member kind="function">
      <name>textLabel</name>
      <anchor>textLabel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>textPosition</name>
      <anchor>textPosition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>usesBigPixmap</name>
      <anchor>usesBigPixmap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>usesTextLabel</name>
      <anchor>usesTextLabel</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QToolButton</name>
    <filename>qtoolbutton.html</filename>
    <member kind="enum">
      <name>ToolButtonPopupMode</name>
      <anchor>ToolButtonPopupMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ArrowType</name>
      <anchor>arrowType</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ToolButtonStyle</name>
      <anchor>toolButtonStyle</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QToolButton</name>
      <anchor>QToolButton</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>defaultAction</name>
      <anchor>defaultAction</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>menu</name>
      <anchor>menu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultAction</name>
      <anchor>setDefaultAction</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>setMenu</name>
      <anchor>setMenu</anchor>
      <arglist>( QMenu * menu )</arglist>
    </member>
    <member kind="function">
      <name>showMenu</name>
      <anchor>showMenu</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>triggered</name>
      <anchor>triggered</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( QWidget * widget, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add-2</anchor>
      <arglist>( QWidget * widget, const QRect &amp; rect, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QWidget * widget )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QToolTip</name>
    <filename>qtooltip.html</filename>
    <member kind="function">
      <name>palette</name>
      <anchor>palette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showText</name>
      <anchor>showText</anchor>
      <arglist>( const QPoint &amp; pos, const QString &amp; text, QWidget * w = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( const char * context, const char * sourceText, const QString &amp; translation )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( const char * context, const char * sourceText )</arglist>
    </member>
    <member kind="function">
      <name>QTranslator</name>
      <anchor>QTranslator-2</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( const char * context, const char * sourceText, const char * comment = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTranslator</name>
    <filename>qtranslator.html</filename>
    <member kind="enum">
      <name>SaveMode</name>
      <anchor>SaveMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTranslator</name>
      <anchor>QTranslator</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const char * context, const char * sourceText, const char * comment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>findMessage</name>
      <anchor>findMessage</anchor>
      <arglist>( const char * context, const char * sourceText, const char * comment = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( const QTranslatorMessage &amp; message )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load</anchor>
      <arglist>( const QString &amp; filename, const QString &amp; directory = QString()</arglist>
    </member>
    <member kind="function">
      <name>load</name>
      <anchor>load-2</anchor>
      <arglist>( const uchar * data, int len )</arglist>
    </member>
    <member kind="function">
      <name>messages</name>
      <anchor>messages</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( const QTranslatorMessage &amp; message )</arglist>
    </member>
    <member kind="function">
      <name>save</name>
      <anchor>save</anchor>
      <arglist>( const QString &amp; filename, SaveMode mode = Everything )</arglist>
    </member>
    <member kind="function">
      <name>squeeze</name>
      <anchor>squeeze</anchor>
      <arglist>( SaveMode mode = Everything )</arglist>
    </member>
    <member kind="function">
      <name>unsqueeze</name>
      <anchor>unsqueeze</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTranslatorMessage</name>
    <filename>qtranslatormessage.html</filename>
    <member kind="enum">
      <name>Prefix</name>
      <anchor>Prefix-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QTranslatorMessage</name>
      <anchor>QTranslatorMessage</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QTranslatorMessage</name>
      <anchor>QTranslatorMessage-2</anchor>
      <arglist>( const char * context, const char * sourceText, const char * comment, const QString &amp; translation = QString()</arglist>
    </member>
    <member kind="function">
      <name>QTranslatorMessage</name>
      <anchor>QTranslatorMessage-3</anchor>
      <arglist>( QDataStream &amp; stream )</arglist>
    </member>
    <member kind="function">
      <name>QTranslatorMessage</name>
      <anchor>QTranslatorMessage-4</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>comment</name>
      <anchor>comment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>commonPrefix</name>
      <anchor>commonPrefix</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>context</name>
      <anchor>context</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hash</name>
      <anchor>hash</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setTranslation</name>
      <anchor>setTranslation</anchor>
      <arglist>( const QString &amp; translation )</arglist>
    </member>
    <member kind="function">
      <name>sourceText</name>
      <anchor>sourceText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>translation</name>
      <anchor>translation</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; stream, bool strip = false, Prefix prefix = HashContextSourceTextComment )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;=</name>
      <anchor>operator-lt-eq</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;=</name>
      <anchor>operator-gt-eq</anchor>
      <arglist>( const QTranslatorMessage &amp; m )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTreeView</name>
    <filename>qtreeview.html</filename>
    <member kind="function">
      <name>QTreeView</name>
      <anchor>QTreeView</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>collapse</name>
      <anchor>collapse</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>collapsed</name>
      <anchor>collapsed</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>columnAt</name>
      <anchor>columnAt</anchor>
      <arglist>( int x )</arglist>
    </member>
    <member kind="function">
      <name>columnCountChanged</name>
      <anchor>columnCountChanged</anchor>
      <arglist>( int oldCount, int newCount )</arglist>
    </member>
    <member kind="function">
      <name>columnMoved</name>
      <anchor>columnMoved</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnResized</name>
      <anchor>columnResized</anchor>
      <arglist>( int column, int oldSize, int newSize )</arglist>
    </member>
    <member kind="function">
      <name>columnViewportPosition</name>
      <anchor>columnViewportPosition</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>columnWidth</name>
      <anchor>columnWidth</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>doItemsLayout</name>
      <anchor>doItemsLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawBranches</name>
      <anchor>drawBranches</anchor>
      <arglist>( QPainter * painter, const QRect &amp; rect, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>drawRow</name>
      <anchor>drawRow</anchor>
      <arglist>( QPainter * painter, const QStyleOptionViewItem &amp; option, const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>expand</name>
      <anchor>expand</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>expanded</name>
      <anchor>expanded</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>header</name>
      <anchor>header</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideColumn</name>
      <anchor>hideColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>horizontalOffset</name>
      <anchor>horizontalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexAbove</name>
      <anchor>indexAbove</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>indexBelow</name>
      <anchor>indexBelow</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>indexRowSizeHint</name>
      <anchor>indexRowSizeHint</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>isColumnHidden</name>
      <anchor>isColumnHidden</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>isExpanded</name>
      <anchor>isExpanded</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>isRowHidden</name>
      <anchor>isRowHidden</anchor>
      <arglist>( int row, const QModelIndex &amp; parent )</arglist>
    </member>
    <member kind="function">
      <name>moveCursor</name>
      <anchor>moveCursor</anchor>
      <arglist>( CursorAction cursorAction, Qt::KeyboardModifiers modifiers )</arglist>
    </member>
    <member kind="function">
      <name>resizeColumnToContents</name>
      <anchor>resizeColumnToContents</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>rowsAboutToBeRemoved</name>
      <anchor>rowsAboutToBeRemoved</anchor>
      <arglist>( const QModelIndex &amp; parent, int start, int end )</arglist>
    </member>
    <member kind="function">
      <name>rowsInserted</name>
      <anchor>rowsInserted</anchor>
      <arglist>( const QModelIndex &amp; parent, int start, int end )</arglist>
    </member>
    <member kind="function">
      <name>scrollContentsBy</name>
      <anchor>scrollContentsBy</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>scrollTo</name>
      <anchor>scrollTo</anchor>
      <arglist>( const QModelIndex &amp; index, ScrollHint hint = EnsureVisible )</arglist>
    </member>
    <member kind="function">
      <name>selectAll</name>
      <anchor>selectAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setColumnHidden</name>
      <anchor>setColumnHidden</anchor>
      <arglist>( int column, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setExpanded</name>
      <anchor>setExpanded</anchor>
      <arglist>( const QModelIndex &amp; index, bool expanded )</arglist>
    </member>
    <member kind="function">
      <name>setHeader</name>
      <anchor>setHeader</anchor>
      <arglist>( QHeaderView * header )</arglist>
    </member>
    <member kind="function">
      <name>setRowHidden</name>
      <anchor>setRowHidden</anchor>
      <arglist>( int row, const QModelIndex &amp; parent, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setSelection</name>
      <anchor>setSelection</anchor>
      <arglist>( const QRect &amp; rect, QItemSelectionModel::SelectionFlags command )</arglist>
    </member>
    <member kind="function">
      <name>showColumn</name>
      <anchor>showColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>sizeHintForColumn</name>
      <anchor>sizeHintForColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>sortByColumn</name>
      <anchor>sortByColumn</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>verticalOffset</name>
      <anchor>verticalOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visualRect</name>
      <anchor>visualRect</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>visualRegionForSelection</name>
      <anchor>visualRegionForSelection</anchor>
      <arglist>( const QItemSelection &amp; selection )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTreeWidget</name>
    <filename>qtreewidget.html</filename>
    <member kind="function">
      <name>QTreeWidget</name>
      <anchor>QTreeWidget</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addTopLevelItem</name>
      <anchor>addTopLevelItem</anchor>
      <arglist>( QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closePersistentEditor</name>
      <anchor>closePersistentEditor</anchor>
      <arglist>( QTreeWidgetItem * item, int column = 0 )</arglist>
    </member>
    <member kind="function">
      <name>collapseItem</name>
      <anchor>collapseItem</anchor>
      <arglist>( const QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>currentItem</name>
      <anchor>currentItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>currentItemChanged</name>
      <anchor>currentItemChanged</anchor>
      <arglist>( QTreeWidgetItem * current, QTreeWidgetItem * previous )</arglist>
    </member>
    <member kind="function">
      <name>dropMimeData</name>
      <anchor>dropMimeData</anchor>
      <arglist>( QTreeWidgetItem * parent, int index, const QMimeData * data, Qt::DropAction action )</arglist>
    </member>
    <member kind="function">
      <name>editItem</name>
      <anchor>editItem</anchor>
      <arglist>( QTreeWidgetItem * item, int column = 0 )</arglist>
    </member>
    <member kind="function">
      <name>expandItem</name>
      <anchor>expandItem</anchor>
      <arglist>( const QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>findItems</name>
      <anchor>findItems</anchor>
      <arglist>( const QRegExp &amp; rx )</arglist>
    </member>
    <member kind="function">
      <name>headerItem</name>
      <anchor>headerItem</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexFromItem</name>
      <anchor>indexFromItem</anchor>
      <arglist>( QTreeWidgetItem * item, int column = 0 )</arglist>
    </member>
    <member kind="function">
      <name>indexOfTopLevelItem</name>
      <anchor>indexOfTopLevelItem</anchor>
      <arglist>( QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>insertTopLevelItem</name>
      <anchor>insertTopLevelItem</anchor>
      <arglist>( int index, QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>isItemExpanded</name>
      <anchor>isItemExpanded</anchor>
      <arglist>( const QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>isItemHidden</name>
      <anchor>isItemHidden</anchor>
      <arglist>( const QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>isItemSelected</name>
      <anchor>isItemSelected</anchor>
      <arglist>( const QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemActivated</name>
      <anchor>itemActivated</anchor>
      <arglist>( QTreeWidgetItem * item, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>itemAt</name>
      <anchor>itemAt-2</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>itemChanged</name>
      <anchor>itemChanged</anchor>
      <arglist>( QTreeWidgetItem * item, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemClicked</name>
      <anchor>itemClicked</anchor>
      <arglist>( QTreeWidgetItem * item, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemCollapsed</name>
      <anchor>itemCollapsed</anchor>
      <arglist>( QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemDoubleClicked</name>
      <anchor>itemDoubleClicked</anchor>
      <arglist>( QTreeWidgetItem * item, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemEntered</name>
      <anchor>itemEntered</anchor>
      <arglist>( QTreeWidgetItem * item, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemExpanded</name>
      <anchor>itemExpanded</anchor>
      <arglist>( QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>itemFromIndex</name>
      <anchor>itemFromIndex</anchor>
      <arglist>( const QModelIndex &amp; index )</arglist>
    </member>
    <member kind="function">
      <name>itemPressed</name>
      <anchor>itemPressed</anchor>
      <arglist>( QTreeWidgetItem * item, int column )</arglist>
    </member>
    <member kind="function">
      <name>itemSelectionChanged</name>
      <anchor>itemSelectionChanged</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>items</name>
      <anchor>items</anchor>
      <arglist>( const QMimeData * data )</arglist>
    </member>
    <member kind="function">
      <name>mimeData</name>
      <anchor>mimeData</anchor>
      <arglist>( const QList&lt;QTreeWidgetItem *&gt; items )</arglist>
    </member>
    <member kind="function">
      <name>mimeTypes</name>
      <anchor>mimeTypes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openPersistentEditor</name>
      <anchor>openPersistentEditor</anchor>
      <arglist>( QTreeWidgetItem * item, int column = 0 )</arglist>
    </member>
    <member kind="function">
      <name>scrollToItem</name>
      <anchor>scrollToItem</anchor>
      <arglist>( const QTreeWidgetItem * item, ScrollHint hint = EnsureVisible )</arglist>
    </member>
    <member kind="function">
      <name>selectedItems</name>
      <anchor>selectedItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setCurrentItem</name>
      <anchor>setCurrentItem</anchor>
      <arglist>( QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setHeaderItem</name>
      <anchor>setHeaderItem</anchor>
      <arglist>( QTreeWidgetItem * item )</arglist>
    </member>
    <member kind="function">
      <name>setHeaderLabels</name>
      <anchor>setHeaderLabels</anchor>
      <arglist>( const QStringList &amp; labels )</arglist>
    </member>
    <member kind="function">
      <name>setItemExpanded</name>
      <anchor>setItemExpanded</anchor>
      <arglist>( const QTreeWidgetItem * item, bool expand )</arglist>
    </member>
    <member kind="function">
      <name>setItemHidden</name>
      <anchor>setItemHidden</anchor>
      <arglist>( const QTreeWidgetItem * item, bool hide )</arglist>
    </member>
    <member kind="function">
      <name>setItemSelected</name>
      <anchor>setItemSelected</anchor>
      <arglist>( const QTreeWidgetItem * item, bool select )</arglist>
    </member>
    <member kind="function">
      <name>sortItems</name>
      <anchor>sortItems</anchor>
      <arglist>( int column, Qt::SortOrder order )</arglist>
    </member>
    <member kind="function">
      <name>DropActions</name>
      <anchor>supportedDropActions</anchor>
      <arglist> QTreeWidget::supportedDropActions()</arglist>
    </member>
    <member kind="function">
      <name>takeTopLevelItem</name>
      <anchor>takeTopLevelItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>topLevelItem</name>
      <anchor>topLevelItem</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>visualItemRect</name>
      <anchor>visualItemRect</anchor>
      <arglist>( const QTreeWidgetItem * item )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTreeWidgetItem</name>
    <filename>qtreewidgetitem.html</filename>
    <member kind="function">
      <name>QTreeWidgetItem</name>
      <anchor>QTreeWidgetItem</anchor>
      <arglist>( QTreeWidget * parent, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>QTreeWidgetItem</name>
      <anchor>QTreeWidgetItem-2</anchor>
      <arglist>( QTreeWidget * parent, QTreeWidgetItem * preceding, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>QTreeWidgetItem</name>
      <anchor>QTreeWidgetItem-3</anchor>
      <arglist>( QTreeWidgetItem * parent, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>QTreeWidgetItem</name>
      <anchor>QTreeWidgetItem-4</anchor>
      <arglist>( QTreeWidgetItem * parent, QTreeWidgetItem * preceding, int type = Type )</arglist>
    </member>
    <member kind="function">
      <name>addChild</name>
      <anchor>addChild</anchor>
      <arglist>( QTreeWidgetItem * child )</arglist>
    </member>
    <member kind="function">
      <name>backgroundColor</name>
      <anchor>backgroundColor</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>CheckState</name>
      <anchor>checkState</anchor>
      <arglist> QTreeWidgetItem::checkState( int column )</arglist>
    </member>
    <member kind="function">
      <name>child</name>
      <anchor>child</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>childCount</name>
      <anchor>childCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clone</name>
      <anchor>clone</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnCount</name>
      <anchor>columnCount</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>( int column, int role )</arglist>
    </member>
    <member kind="function">
      <name>ItemFlags</name>
      <anchor>flags</anchor>
      <arglist> QTreeWidgetItem::flags()</arglist>
    </member>
    <member kind="function">
      <name>font</name>
      <anchor>font</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>icon</name>
      <anchor>icon</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>indexOfChild</name>
      <anchor>indexOfChild</anchor>
      <arglist>( QTreeWidgetItem * child )</arglist>
    </member>
    <member kind="function">
      <name>insertChild</name>
      <anchor>insertChild</anchor>
      <arglist>( int index, QTreeWidgetItem * child )</arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>parent</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read</name>
      <anchor>read</anchor>
      <arglist>( QDataStream &amp; in )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( int column, const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setCheckState</name>
      <anchor>setCheckState</anchor>
      <arglist>( int column, Qt::CheckState state )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( int column, int role, const QVariant &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>setFlags</name>
      <anchor>setFlags</anchor>
      <arglist>( Qt::ItemFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont</anchor>
      <arglist>( int column, const QFont &amp; font )</arglist>
    </member>
    <member kind="function">
      <name>setIcon</name>
      <anchor>setIcon</anchor>
      <arglist>( int column, const QIcon &amp; icon )</arglist>
    </member>
    <member kind="function">
      <name>setStatusTip</name>
      <anchor>setStatusTip</anchor>
      <arglist>( int column, const QString &amp; statusTip )</arglist>
    </member>
    <member kind="function">
      <name>setText</name>
      <anchor>setText</anchor>
      <arglist>( int column, const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>setTextAlignment</name>
      <anchor>setTextAlignment</anchor>
      <arglist>( int column, int alignment )</arglist>
    </member>
    <member kind="function">
      <name>setTextColor</name>
      <anchor>setTextColor</anchor>
      <arglist>( int column, const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setToolTip</name>
      <anchor>setToolTip</anchor>
      <arglist>( int column, const QString &amp; toolTip )</arglist>
    </member>
    <member kind="function">
      <name>setWhatsThis</name>
      <anchor>setWhatsThis</anchor>
      <arglist>( int column, const QString &amp; whatsThis )</arglist>
    </member>
    <member kind="function">
      <name>statusTip</name>
      <anchor>statusTip</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>takeChild</name>
      <anchor>takeChild</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>text</name>
      <anchor>text</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>textAlignment</name>
      <anchor>textAlignment</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>textColor</name>
      <anchor>textColor</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>toolTip</name>
      <anchor>toolTip</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>treeWidget</name>
      <anchor>treeWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>( int column )</arglist>
    </member>
    <member kind="function">
      <name>write</name>
      <anchor>write</anchor>
      <arglist>( QDataStream &amp; out )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QTreeWidgetItem &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QTsciiCodec</name>
    <filename>qtsciicodec.html</filename>
    <member kind="function">
      <name>convertFromUnicode</name>
      <anchor>convertFromUnicode</anchor>
      <arglist>( const QChar * uc, int len, ConverterState * state )</arglist>
    </member>
    <member kind="function">
      <name>convertToUnicode</name>
      <anchor>convertToUnicode</anchor>
      <arglist>( const char * chars, int len, ConverterState * state )</arglist>
    </member>
    <member kind="function">
      <name>mibEnum</name>
      <anchor>mibEnum</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUdpSocket</name>
    <filename>qudpsocket.html</filename>
    <member kind="function">
      <name>QUdpSocket</name>
      <anchor>QUdpSocket</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>bind</name>
      <anchor>bind</anchor>
      <arglist>( const QHostAddress &amp; address, quint16 port )</arglist>
    </member>
    <member kind="function">
      <name>bind</name>
      <anchor>bind-2</anchor>
      <arglist>( quint16 port = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasPendingDatagrams</name>
      <anchor>hasPendingDatagrams</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pendingDatagramSize</name>
      <anchor>pendingDatagramSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>readDatagram</name>
      <anchor>readDatagram</anchor>
      <arglist>( char * data, qint64 maxSize, QHostAddress * address = 0, quint16 * port = 0 )</arglist>
    </member>
    <member kind="function">
      <name>writeDatagram</name>
      <anchor>writeDatagram</anchor>
      <arglist>( const char * data, qint64 size, const QHostAddress &amp; address, quint16 port )</arglist>
    </member>
    <member kind="function">
      <name>writeDatagram</name>
      <anchor>writeDatagram-2</anchor>
      <arglist>( const QByteArray &amp; datagram, const QHostAddress &amp; host, quint16 port )</arglist>
    </member>
    <member kind="function">
      <name>addPath</name>
      <anchor>addPath</anchor>
      <arglist>( const QString &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>cdUp</name>
      <anchor>cdUp</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>decode</name>
      <anchor>decode</anchor>
      <arglist>( QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>dirPath</name>
      <anchor>dirPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>encode</name>
      <anchor>encode</anchor>
      <arglist>( QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>fileName</name>
      <anchor>fileName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasHost</name>
      <anchor>hasHost</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPassword</name>
      <anchor>hasPassword</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPath</name>
      <anchor>hasPath</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPort</name>
      <anchor>hasPort</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasRef</name>
      <anchor>hasRef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasUser</name>
      <anchor>hasUser</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isRelativeUrl</name>
      <anchor>isRelativeUrl</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>protocol</name>
      <anchor>protocol</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>query</name>
      <anchor>query</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ref</name>
      <anchor>ref</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFileName</name>
      <anchor>setFileName</anchor>
      <arglist>( const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>setProtocol</name>
      <anchor>setProtocol</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setQuery</name>
      <anchor>setQuery</anchor>
      <arglist>( const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>setRef</name>
      <anchor>setRef</anchor>
      <arglist>( const QString &amp; txt )</arglist>
    </member>
    <member kind="function">
      <name>setUser</name>
      <anchor>setUser</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>user</name>
      <anchor>user</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QString</anchor>
      <arglist> QString()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUrl</name>
    <filename>qurl.html</filename>
    <member kind="function">
      <name>QUrl</name>
      <anchor>QUrl</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QUrl</name>
      <anchor>QUrl-2</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>QUrl</name>
      <anchor>QUrl-3</anchor>
      <arglist>( const QUrl &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>addQueryItem</name>
      <anchor>addQueryItem</anchor>
      <arglist>( const QString &amp; key, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>allQueryItemValues</name>
      <anchor>allQueryItemValues</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>authority</name>
      <anchor>authority</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>encodedQuery</name>
      <anchor>encodedQuery</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fragment</name>
      <anchor>fragment</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromEncoded</name>
      <anchor>fromEncoded</anchor>
      <arglist>( const QByteArray &amp; input )</arglist>
    </member>
    <member kind="function">
      <name>fromLocalFile</name>
      <anchor>fromLocalFile</anchor>
      <arglist>( const QString &amp; localFile )</arglist>
    </member>
    <member kind="function">
      <name>fromPercentEncoding</name>
      <anchor>fromPercentEncoding</anchor>
      <arglist>( const QByteArray &amp; input )</arglist>
    </member>
    <member kind="function">
      <name>fromPunycode</name>
      <anchor>fromPunycode</anchor>
      <arglist>( const QByteArray &amp; pc )</arglist>
    </member>
    <member kind="function">
      <name>hasQueryItem</name>
      <anchor>hasQueryItem</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>host</name>
      <anchor>host</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isParentOf</name>
      <anchor>isParentOf</anchor>
      <arglist>( const QUrl &amp; childUrl )</arglist>
    </member>
    <member kind="function">
      <name>isRelative</name>
      <anchor>isRelative</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>password</name>
      <anchor>password</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>path</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>port</name>
      <anchor>port</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>queryItemValue</name>
      <anchor>queryItemValue</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>queryItems</name>
      <anchor>queryItems</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>queryPairDelimiter</name>
      <anchor>queryPairDelimiter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>queryValueDelimiter</name>
      <anchor>queryValueDelimiter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removeAllQueryItems</name>
      <anchor>removeAllQueryItems</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>removeQueryItem</name>
      <anchor>removeQueryItem</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>resolved</name>
      <anchor>resolved</anchor>
      <arglist>( const QUrl &amp; relative )</arglist>
    </member>
    <member kind="function">
      <name>scheme</name>
      <anchor>scheme</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAuthority</name>
      <anchor>setAuthority</anchor>
      <arglist>( const QString &amp; authority )</arglist>
    </member>
    <member kind="function">
      <name>setEncodedUrl</name>
      <anchor>setEncodedUrl</anchor>
      <arglist>( const QByteArray &amp; encodedUrl )</arglist>
    </member>
    <member kind="function">
      <name>setFragment</name>
      <anchor>setFragment</anchor>
      <arglist>( const QString &amp; fragment )</arglist>
    </member>
    <member kind="function">
      <name>setHost</name>
      <anchor>setHost</anchor>
      <arglist>( const QString &amp; host )</arglist>
    </member>
    <member kind="function">
      <name>setPassword</name>
      <anchor>setPassword</anchor>
      <arglist>( const QString &amp; password )</arglist>
    </member>
    <member kind="function">
      <name>setPath</name>
      <anchor>setPath</anchor>
      <arglist>( const QString &amp; path )</arglist>
    </member>
    <member kind="function">
      <name>setPort</name>
      <anchor>setPort</anchor>
      <arglist>( int port )</arglist>
    </member>
    <member kind="function">
      <name>setQueryDelimiters</name>
      <anchor>setQueryDelimiters</anchor>
      <arglist>( char valueDelimiter, char pairDelimiter )</arglist>
    </member>
    <member kind="function">
      <name>setQueryItems</name>
      <anchor>setQueryItems</anchor>
      <arglist>( const QList&lt;QPair&lt;QString, QString&gt; &gt; &amp; query )</arglist>
    </member>
    <member kind="function">
      <name>setScheme</name>
      <anchor>setScheme</anchor>
      <arglist>( const QString &amp; scheme )</arglist>
    </member>
    <member kind="function">
      <name>setUrl</name>
      <anchor>setUrl</anchor>
      <arglist>( const QString &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>setUserInfo</name>
      <anchor>setUserInfo</anchor>
      <arglist>( const QString &amp; userInfo )</arglist>
    </member>
    <member kind="function">
      <name>setUserName</name>
      <anchor>setUserName</anchor>
      <arglist>( const QString &amp; userName )</arglist>
    </member>
    <member kind="function">
      <name>toEncoded</name>
      <anchor>toEncoded</anchor>
      <arglist>( FormattingOptions options = None )</arglist>
    </member>
    <member kind="function">
      <name>toLocalFile</name>
      <anchor>toLocalFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toPercentEncoding</name>
      <anchor>toPercentEncoding</anchor>
      <arglist>( const QString &amp; input, const QByteArray &amp; exclude = QByteArray()</arglist>
    </member>
    <member kind="function">
      <name>toPunycode</name>
      <anchor>toPunycode</anchor>
      <arglist>( const QString &amp; uc )</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>( FormattingOptions options = None )</arglist>
    </member>
    <member kind="function">
      <name>userInfo</name>
      <anchor>userInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>userName</name>
      <anchor>userName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QUrl &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QUrl &amp; url )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QUrl &amp; url )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUrlInfo</name>
    <filename>qurlinfo.html</filename>
    <member kind="enum">
      <name>PermissionSpec</name>
      <anchor>PermissionSpec-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QUrlInfo</name>
      <anchor>QUrlInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QUrlInfo</name>
      <anchor>QUrlInfo-2</anchor>
      <arglist>( const QUrlInfo &amp; ui )</arglist>
    </member>
    <member kind="function">
      <name>QUrlInfo</name>
      <anchor>QUrlInfo-3</anchor>
      <arglist>( const QString &amp; name, int permissions, const QString &amp; owner, const QString &amp; group, qint64 size, const QDateTime &amp; lastModified, const QDateTime &amp; lastRead, bool isDir, bool isFile, bool isSymLink, bool isWritable, bool isReadable, bool isExecutable )</arglist>
    </member>
    <member kind="function">
      <name>QUrlInfo</name>
      <anchor>QUrlInfo-4</anchor>
      <arglist>( const QUrl &amp; url, int permissions, const QString &amp; owner, const QString &amp; group, qint64 size, const QDateTime &amp; lastModified, const QDateTime &amp; lastRead, bool isDir, bool isFile, bool isSymLink, bool isWritable, bool isReadable, bool isExecutable )</arglist>
    </member>
    <member kind="function">
      <name>equal</name>
      <anchor>equal</anchor>
      <arglist>( const QUrlInfo &amp; i1, const QUrlInfo &amp; i2, int sortBy )</arglist>
    </member>
    <member kind="function">
      <name>greaterThan</name>
      <anchor>greaterThan</anchor>
      <arglist>( const QUrlInfo &amp; i1, const QUrlInfo &amp; i2, int sortBy )</arglist>
    </member>
    <member kind="function">
      <name>group</name>
      <anchor>group</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDir</name>
      <anchor>isDir</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isExecutable</name>
      <anchor>isExecutable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFile</name>
      <anchor>isFile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isReadable</name>
      <anchor>isReadable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isSymLink</name>
      <anchor>isSymLink</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isWritable</name>
      <anchor>isWritable</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastModified</name>
      <anchor>lastModified</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastRead</name>
      <anchor>lastRead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lessThan</name>
      <anchor>lessThan</anchor>
      <arglist>( const QUrlInfo &amp; i1, const QUrlInfo &amp; i2, int sortBy )</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>owner</name>
      <anchor>owner</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>permissions</name>
      <anchor>permissions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setDir</name>
      <anchor>setDir</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setFile</name>
      <anchor>setFile</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setGroup</name>
      <anchor>setGroup</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setLastModified</name>
      <anchor>setLastModified</anchor>
      <arglist>( const QDateTime &amp; dt )</arglist>
    </member>
    <member kind="function">
      <name>setName</name>
      <anchor>setName</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>setOwner</name>
      <anchor>setOwner</anchor>
      <arglist>( const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setPermissions</name>
      <anchor>setPermissions</anchor>
      <arglist>( int p )</arglist>
    </member>
    <member kind="function">
      <name>setReadable</name>
      <anchor>setReadable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setSize</name>
      <anchor>setSize</anchor>
      <arglist>( qint64 size )</arglist>
    </member>
    <member kind="function">
      <name>setSymLink</name>
      <anchor>setSymLink</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setWritable</name>
      <anchor>setWritable</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QUrlInfo &amp; ui )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QUrlInfo &amp; i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUuid</name>
    <filename>quuid.html</filename>
    <member kind="enum">
      <name>Variant</name>
      <anchor>Variant-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>Version</name>
      <anchor>Version-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QUuid</name>
      <anchor>QUuid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QUuid</name>
      <anchor>QUuid-2</anchor>
      <arglist>( uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8 )</arglist>
    </member>
    <member kind="function">
      <name>QUuid</name>
      <anchor>QUuid-3</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>QUuid</name>
      <anchor>QUuid-5</anchor>
      <arglist>( const GUID &amp; guid )</arglist>
    </member>
    <member kind="function">
      <name>createUuid</name>
      <anchor>createUuid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Variant</name>
      <anchor>variant</anchor>
      <arglist> QUuid::variant()</arglist>
    </member>
    <member kind="function">
      <name>Version</name>
      <anchor>version</anchor>
      <arglist> QUuid::version()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-GUID</anchor>
      <arglist> GUID()</arglist>
    </member>
    <member kind="function">
      <name>operator</name>
      <anchor>operator-QString</anchor>
      <arglist> QString()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QUuid &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq-2</anchor>
      <arglist>( const GUID &amp; guid )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>operator-lt</anchor>
      <arglist>( const QUuid &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const GUID &amp; guid )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QUuid &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq-2</anchor>
      <arglist>( const GUID &amp; guid )</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>operator-gt</anchor>
      <arglist>( const QUuid &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>QValidator</name>
      <anchor>QValidator-2</anchor>
      <arglist>( QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QValidator</name>
    <filename>qvalidator.html</filename>
    <member kind="enum">
      <name>State</name>
      <anchor>State-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QValidator</name>
      <anchor>QValidator</anchor>
      <arglist>( QObject * parent )</arglist>
    </member>
    <member kind="function">
      <name>fixup</name>
      <anchor>fixup</anchor>
      <arglist>( QString &amp; input )</arglist>
    </member>
    <member kind="function">
      <name>validate</name>
      <anchor>validate</anchor>
      <arglist>( QString &amp; input, int &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-34</anchor>
      <arglist>( bool b, int dummy )</arglist>
    </member>
    <member kind="function">
      <name>asBitArray</name>
      <anchor>asBitArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asBool</name>
      <anchor>asBool</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asByteArray</name>
      <anchor>asByteArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asCString</name>
      <anchor>asCString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asDate</name>
      <anchor>asDate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asDateTime</name>
      <anchor>asDateTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asDouble</name>
      <anchor>asDouble</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asInt</name>
      <anchor>asInt</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asList</name>
      <anchor>asList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asLongLong</name>
      <anchor>asLongLong</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asMap</name>
      <anchor>asMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asPoint</name>
      <anchor>asPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asRect</name>
      <anchor>asRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asSize</name>
      <anchor>asSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asString</name>
      <anchor>asString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asStringList</name>
      <anchor>asStringList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asTime</name>
      <anchor>asTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asUInt</name>
      <anchor>asUInt</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>asULongLong</name>
      <anchor>asULongLong</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canCast</name>
      <anchor>canCast</anchor>
      <arglist>( Type t )</arglist>
    </member>
    <member kind="function">
      <name>cast</name>
      <anchor>cast</anchor>
      <arglist>( Type t )</arglist>
    </member>
    <member kind="function">
      <name>toCString</name>
      <anchor>toCString</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QVariant</name>
    <filename>qvariant.html</filename>
    <member kind="enum">
      <name>Type</name>
      <anchor>Type-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-2</anchor>
      <arglist>( Type type )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-3</anchor>
      <arglist>( int typeOrUserType, const void * copy )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-4</anchor>
      <arglist>( const QVariant &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-5</anchor>
      <arglist>( QDataStream &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-6</anchor>
      <arglist>( int val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-7</anchor>
      <arglist>( uint val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-8</anchor>
      <arglist>( qlonglong val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-9</anchor>
      <arglist>( qulonglong val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-10</anchor>
      <arglist>( bool val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-11</anchor>
      <arglist>( double val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-12</anchor>
      <arglist>( const char * val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-13</anchor>
      <arglist>( const QByteArray &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-14</anchor>
      <arglist>( const QBitArray &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-15</anchor>
      <arglist>( const QString &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-16</anchor>
      <arglist>( const QLatin1String &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-17</anchor>
      <arglist>( const QStringList &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-18</anchor>
      <arglist>( const QChar &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-19</anchor>
      <arglist>( const QDate &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-20</anchor>
      <arglist>( const QTime &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-21</anchor>
      <arglist>( const QDateTime &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-22</anchor>
      <arglist>( const QList&lt;QVariant&gt; &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-23</anchor>
      <arglist>( const QMap&lt;QString, QVariant&gt; &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-24</anchor>
      <arglist>( const QSize &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-25</anchor>
      <arglist>( const QSizeF &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-26</anchor>
      <arglist>( const QPoint &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-27</anchor>
      <arglist>( const QPointF &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-28</anchor>
      <arglist>( const QLine &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-29</anchor>
      <arglist>( const QLineF &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-30</anchor>
      <arglist>( const QRect &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-31</anchor>
      <arglist>( const QRectF &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-32</anchor>
      <arglist>( const QUrl &amp; val )</arglist>
    </member>
    <member kind="function">
      <name>QVariant</name>
      <anchor>QVariant-33</anchor>
      <arglist>( const QLocale &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>canConvert</name>
      <anchor>canConvert</anchor>
      <arglist>( Type t )</arglist>
    </member>
    <member kind="function">
      <name>canConvert</name>
      <anchor>canConvert-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>convert</name>
      <anchor>convert</anchor>
      <arglist>( Type t )</arglist>
    </member>
    <member kind="function">
      <name>fromValue</name>
      <anchor>fromValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>isNull</name>
      <anchor>isNull</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isValid</name>
      <anchor>isValid</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>nameToType</name>
      <anchor>nameToType</anchor>
      <arglist>( const char * name )</arglist>
    </member>
    <member kind="function">
      <name>setValue</name>
      <anchor>setValue</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>toBitArray</name>
      <anchor>toBitArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBool</name>
      <anchor>toBool</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toByteArray</name>
      <anchor>toByteArray</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toChar</name>
      <anchor>toChar</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDate</name>
      <anchor>toDate</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDateTime</name>
      <anchor>toDateTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toDouble</name>
      <anchor>toDouble</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toInt</name>
      <anchor>toInt</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toLine</name>
      <anchor>toLine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLineF</name>
      <anchor>toLineF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toList</name>
      <anchor>toList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLocale</name>
      <anchor>toLocale</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toLongLong</name>
      <anchor>toLongLong</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toMap</name>
      <anchor>toMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toPoint</name>
      <anchor>toPoint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toPointF</name>
      <anchor>toPointF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toRect</name>
      <anchor>toRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toRectF</name>
      <anchor>toRectF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toSize</name>
      <anchor>toSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toSizeF</name>
      <anchor>toSizeF</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toString</name>
      <anchor>toString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toStringList</name>
      <anchor>toStringList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toTime</name>
      <anchor>toTime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toUInt</name>
      <anchor>toUInt</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toULongLong</name>
      <anchor>toULongLong</anchor>
      <arglist>( bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>toUrl</name>
      <anchor>toUrl</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>typeName</name>
      <anchor>typeName</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>typeToName</name>
      <anchor>typeToName</anchor>
      <arglist>( Type typ )</arglist>
    </member>
    <member kind="function">
      <name>userType</name>
      <anchor>userType</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QVariant &amp; v )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QVariant &amp; variant )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QVariant &amp; v )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QVarLengthArray</name>
    <filename>qvarlengtharray.html</filename>
    <member kind="function">
      <name>QVarLengthArray</name>
      <anchor>QVarLengthArray</anchor>
      <arglist>( int size = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QVarLengthArray</name>
      <anchor>QVarLengthArray-2</anchor>
      <arglist>( const QVarLengthArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const T &amp; t )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append-2</anchor>
      <arglist>( const T * buf, int size )</arglist>
    </member>
    <member kind="function">
      <name>capacity</name>
      <anchor>capacity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constData</name>
      <anchor>constData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reserve</name>
      <anchor>reserve</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QVarLengthArray &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>QVBoxLayout</name>
      <anchor>QVBoxLayout-3</anchor>
      <arglist>( QWidget * parent, int margin, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QVBoxLayout</name>
      <anchor>QVBoxLayout-4</anchor>
      <arglist>( QLayout * parentLayout, int spacing = -1, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QVBoxLayout</name>
      <anchor>QVBoxLayout-5</anchor>
      <arglist>( int spacing, const char * name = 0 )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QVBoxLayout</name>
    <filename>qvboxlayout.html</filename>
    <member kind="function">
      <name>QVBoxLayout</name>
      <anchor>QVBoxLayout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QVBoxLayout</name>
      <anchor>QVBoxLayout-2</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QVector</name>
    <filename>qvector.html</filename>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>ConstIterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>Iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>const_iterator</name>
      <anchor>const_iterator-typedef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iterator</name>
      <anchor>iterator-typedefx</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QVector</name>
      <anchor>QVector</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QVector</name>
      <anchor>QVector-2</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>QVector</name>
      <anchor>QVector-3</anchor>
      <arglist>( int size, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>QVector</name>
      <anchor>QVector-4</anchor>
      <arglist>( const QVector &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>at</name>
      <anchor>at</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>back</name>
      <anchor>back-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>begin</name>
      <anchor>begin-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>capacity</name>
      <anchor>capacity</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constBegin</name>
      <anchor>constBegin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constData</name>
      <anchor>constData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constEnd</name>
      <anchor>constEnd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contains</name>
      <anchor>contains</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>empty</name>
      <anchor>empty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>end-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase</anchor>
      <arglist>( iterator pos )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-2</anchor>
      <arglist>( iterator begin, iterator end )</arglist>
    </member>
    <member kind="function">
      <name>fill</name>
      <anchor>fill</anchor>
      <arglist>( const T &amp; value, int size = -1 )</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>first</name>
      <anchor>first-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromList</name>
      <anchor>fromList</anchor>
      <arglist>( const QList&lt;T&gt; &amp; list )</arglist>
    </member>
    <member kind="function">
      <name>fromStdVector</name>
      <anchor>fromStdVector</anchor>
      <arglist>( const std::vector&lt;T&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>front</name>
      <anchor>front</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>front</name>
      <anchor>front-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexOf</name>
      <anchor>indexOf</anchor>
      <arglist>( const T &amp; value, int from = 0 )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert</anchor>
      <arglist>( int i, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-2</anchor>
      <arglist>( iterator before, int count, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-3</anchor>
      <arglist>( int i, int count, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>insert</name>
      <anchor>insert-4</anchor>
      <arglist>( iterator before, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>last</name>
      <anchor>last-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lastIndexOf</name>
      <anchor>lastIndexOf</anchor>
      <arglist>( const T &amp; value, int from = -1 )</arglist>
    </member>
    <member kind="function">
      <name>mid</name>
      <anchor>mid</anchor>
      <arglist>( int pos, int length = -1 )</arglist>
    </member>
    <member kind="function">
      <name>pop_back</name>
      <anchor>pop_back</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>pop_front</name>
      <anchor>pop_front</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prepend</name>
      <anchor>prepend</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>push_back</name>
      <anchor>push_back</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>push_front</name>
      <anchor>push_front</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove-2</anchor>
      <arglist>( int i, int count )</arglist>
    </member>
    <member kind="function">
      <name>replace</name>
      <anchor>replace</anchor>
      <arglist>( int i, const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>reserve</name>
      <anchor>reserve</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>resize</name>
      <anchor>resize</anchor>
      <arglist>( int size )</arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>size</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>squeeze</name>
      <anchor>squeeze</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toList</name>
      <anchor>toList</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>vector</name>
      <anchor>toStdVector</anchor>
      <arglist>&lt;T&gt; QVector::toStdVector()</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( int i, const T &amp; defaultValue )</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>operator-not-eq</anchor>
      <arglist>( const QVector &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>operator-2b</anchor>
      <arglist>( const QVector &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq</anchor>
      <arglist>( const QVector &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>operator-2b-eq-2</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>operator-lt-lt-2</anchor>
      <arglist>( const QVector &amp; l )</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QVector &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>operator-eq-eq</anchor>
      <arglist>( const QVector &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d</anchor>
      <arglist>( int i )</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>operator-5b-5d-2</anchor>
      <arglist>( int i )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QVectorIterator</name>
    <filename>qvectoriterator.html</filename>
    <member kind="function">
      <name>QVectorIterator</name>
      <anchor>QVectorIterator</anchor>
      <arglist>( const QVector&lt;T&gt; &amp; vector )</arglist>
    </member>
    <member kind="function">
      <name>findNext</name>
      <anchor>findNext</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>findPrevious</name>
      <anchor>findPrevious</anchor>
      <arglist>( const T &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>hasNext</name>
      <anchor>hasNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hasPrevious</name>
      <anchor>hasPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekNext</name>
      <anchor>peekNext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>peekPrevious</name>
      <anchor>peekPrevious</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>previous</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toBack</name>
      <anchor>toBack</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toFront</name>
      <anchor>toFront</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QVector&lt;T&gt; &amp; vector )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWaitCondition</name>
    <filename>qwaitcondition.html</filename>
    <member kind="function">
      <name>QWaitCondition</name>
      <anchor>QWaitCondition</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wait</name>
      <anchor>wait</anchor>
      <arglist>( QMutex * mutex, unsigned long time = ULONG_MAX )</arglist>
    </member>
    <member kind="function">
      <name>wakeAll</name>
      <anchor>wakeAll</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wakeOne</name>
      <anchor>wakeOne</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>add</name>
      <anchor>add</anchor>
      <arglist>( QWidget * w, const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>remove</name>
      <anchor>remove</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>whatsThisButton</name>
      <anchor>whatsThisButton</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWhatsThis</name>
    <filename>qwhatsthis.html</filename>
    <member kind="function">
      <name>createAction</name>
      <anchor>createAction</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>enterWhatsThisMode</name>
      <anchor>enterWhatsThisMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideText</name>
      <anchor>hideText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inWhatsThisMode</name>
      <anchor>inWhatsThisMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leaveWhatsThisMode</name>
      <anchor>leaveWhatsThisMode</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showText</name>
      <anchor>showText</anchor>
      <arglist>( const QPoint &amp; pos, const QString &amp; text, QWidget * w = 0 )</arglist>
    </member>
    <member kind="function">
      <name>QWheelEvent</name>
      <anchor>QWheelEvent-3</anchor>
      <arglist>( const QPoint &amp; pos, int delta, int state, Qt::Orientation orient = Qt::Vertical )</arglist>
    </member>
    <member kind="function">
      <name>QWheelEvent</name>
      <anchor>QWheelEvent-4</anchor>
      <arglist>( const QPoint &amp; pos, const QPoint &amp; globalPos, int delta, int state, Qt::Orientation orient = Qt::Vertical )</arglist>
    </member>
    <member kind="function">
      <name>ButtonState</name>
      <anchor>state</anchor>
      <arglist> QWheelEvent::state()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWheelEvent</name>
    <filename>qwheelevent.html</filename>
    <member kind="function">
      <name>QWheelEvent</name>
      <anchor>QWheelEvent</anchor>
      <arglist>( const QPoint &amp; pos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient = Qt::Vertical )</arglist>
    </member>
    <member kind="function">
      <name>QWheelEvent</name>
      <anchor>QWheelEvent-2</anchor>
      <arglist>( const QPoint &amp; pos, const QPoint &amp; globalPos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient = Qt::Vertical )</arglist>
    </member>
    <member kind="function">
      <name>MouseButtons</name>
      <anchor>buttons</anchor>
      <arglist> QWheelEvent::buttons()</arglist>
    </member>
    <member kind="function">
      <name>delta</name>
      <anchor>delta</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalPos</name>
      <anchor>globalPos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalX</name>
      <anchor>globalX</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>globalY</name>
      <anchor>globalY</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Orientation</name>
      <anchor>orientation</anchor>
      <arglist> QWheelEvent::orientation()</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>x</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>y</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isEnabledToTLW</name>
      <anchor>isEnabledToTLW</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isTopLevel</name>
      <anchor>isTopLevel</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>topLevelWidget</name>
      <anchor>topLevelWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enum">
      <name>BackgroundOrigin</name>
      <anchor>BackgroundOrigin-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QWidget</name>
      <anchor>QWidget-3</anchor>
      <arglist>( QWidget * parent, const char * name, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>BackgroundMode</name>
      <anchor>backgroundMode</anchor>
      <arglist> QWidget::backgroundMode()</arglist>
    </member>
    <member kind="function">
      <name>backgroundOffset</name>
      <anchor>backgroundOffset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>backgroundOrigin</name>
      <anchor>backgroundOrigin</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>caption</name>
      <anchor>caption</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>childAt</name>
      <anchor>childAt-2</anchor>
      <arglist>( int x, int y, bool includeThis )</arglist>
    </member>
    <member kind="function">
      <name>childAt</name>
      <anchor>childAt-3</anchor>
      <arglist>( const QPoint &amp; p, bool includeThis )</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close-2</anchor>
      <arglist>( bool alsoDelete )</arglist>
    </member>
    <member kind="function">
      <name>colorGroup</name>
      <anchor>colorGroup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>constPolish</name>
      <anchor>constPolish</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText</anchor>
      <arglist>( const QPoint &amp; p, const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>drawText</name>
      <anchor>drawText-2</anchor>
      <arglist>( int x, int y, const QString &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-2</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-3</anchor>
      <arglist>( const QRect &amp; rect )</arglist>
    </member>
    <member kind="function">
      <name>erase</name>
      <anchor>erase-4</anchor>
      <arglist>( const QRegion &amp; rgn )</arglist>
    </member>
    <member kind="function">
      <name>hasMouse</name>
      <anchor>hasMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>icon</name>
      <anchor>icon</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconText</name>
      <anchor>iconText</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iconify</name>
      <anchor>iconify</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDesktop</name>
      <anchor>isDesktop</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDialog</name>
      <anchor>isDialog</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isInputMethodEnabled</name>
      <anchor>isInputMethodEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isPopup</name>
      <anchor>isPopup</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isShown</name>
      <anchor>isShown</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isUpdatesEnabled</name>
      <anchor>isUpdatesEnabled</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVisibleToTLW</name>
      <anchor>isVisibleToTLW</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ownCursor</name>
      <anchor>ownCursor</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ownFont</name>
      <anchor>ownFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ownPalette</name>
      <anchor>ownPalette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parentWidget</name>
      <anchor>parentWidget-2</anchor>
      <arglist>( bool sameWindow )</arglist>
    </member>
    <member kind="function">
      <name>polish</name>
      <anchor>polish</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>recreate</name>
      <anchor>recreate</anchor>
      <arglist>( QWidget * parent, Qt::WFlags f, const QPoint &amp; p, bool showIt = false )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-2</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-3</anchor>
      <arglist>( int x, int y, int w, int h, bool b )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-4</anchor>
      <arglist>( const QRect &amp; r, bool b )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-5</anchor>
      <arglist>( const QRegion &amp; rgn, bool b )</arglist>
    </member>
    <member kind="function">
      <name>reparent</name>
      <anchor>reparent</anchor>
      <arglist>( QWidget * parent, Qt::WFlags f, const QPoint &amp; p, bool showIt = false )</arglist>
    </member>
    <member kind="function">
      <name>reparent</name>
      <anchor>reparent-2</anchor>
      <arglist>( QWidget * parent, const QPoint &amp; p, bool showIt = false )</arglist>
    </member>
    <member kind="function">
      <name>setActiveWindow</name>
      <anchor>setActiveWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundColor</name>
      <anchor>setBackgroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundMode</name>
      <anchor>setBackgroundMode</anchor>
      <arglist>( Qt::BackgroundMode widgetBackground, Qt::BackgroundMode paletteBackground = Qt::PaletteBackground )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundOrigin</name>
      <anchor>setBackgroundOrigin</anchor>
      <arglist>( BackgroundOrigin background )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundPixmap</name>
      <anchor>setBackgroundPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>setCaption</name>
      <anchor>setCaption</anchor>
      <arglist>( const QString &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setEraseColor</name>
      <anchor>setEraseColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setErasePixmap</name>
      <anchor>setErasePixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>setFont</name>
      <anchor>setFont-2</anchor>
      <arglist>( const QFont &amp; f, bool b )</arglist>
    </member>
    <member kind="function">
      <name>setIcon</name>
      <anchor>setIcon</anchor>
      <arglist>( const QPixmap &amp; i )</arglist>
    </member>
    <member kind="function">
      <name>setIconText</name>
      <anchor>setIconText</anchor>
      <arglist>( const QString &amp; it )</arglist>
    </member>
    <member kind="function">
      <name>setInputMethodEnabled</name>
      <anchor>setInputMethodEnabled</anchor>
      <arglist>( bool enabled )</arglist>
    </member>
    <member kind="function">
      <name>setKeyCompression</name>
      <anchor>setKeyCompression</anchor>
      <arglist>( bool b )</arglist>
    </member>
    <member kind="function">
      <name>setPalette</name>
      <anchor>setPalette-2</anchor>
      <arglist>( const QPalette &amp; p, bool b )</arglist>
    </member>
    <member kind="function">
      <name>setPaletteBackgroundColor</name>
      <anchor>setPaletteBackgroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setPaletteBackgroundPixmap</name>
      <anchor>setPaletteBackgroundPixmap</anchor>
      <arglist>( const QPixmap &amp; pixmap )</arglist>
    </member>
    <member kind="function">
      <name>setPaletteForegroundColor</name>
      <anchor>setPaletteForegroundColor</anchor>
      <arglist>( const QColor &amp; color )</arglist>
    </member>
    <member kind="function">
      <name>setShown</name>
      <anchor>setShown</anchor>
      <arglist>( bool shown )</arglist>
    </member>
    <member kind="function">
      <name>setSizePolicy</name>
      <anchor>setSizePolicy-2</anchor>
      <arglist>( QSizePolicy::Policy hor, QSizePolicy::Policy ver, bool hfw )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle-2</anchor>
      <arglist>( const QString &amp; style )</arglist>
    </member>
    <member kind="function">
      <name>unsetFont</name>
      <anchor>unsetFont</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unsetPalette</name>
      <anchor>unsetPalette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibleRect</name>
      <anchor>visibleRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wmapper</name>
      <anchor>wmapper</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWidget</name>
    <filename>qwidget.html</filename>
    <member kind="function">
      <name>ContextMenuPolicy</name>
      <anchor>contextMenuPolicy</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FocusPolicy</name>
      <anchor>focusPolicy</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LayoutDirection</name>
      <anchor>layoutDirection</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WindowFlags</name>
      <anchor>windowFlags</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QWidget</name>
      <anchor>QWidget</anchor>
      <arglist>( QWidget * parent = 0, Qt::WFlags f = 0 )</arglist>
    </member>
    <member kind="function">
      <name>actionEvent</name>
      <anchor>actionEvent</anchor>
      <arglist>( QActionEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>actions</name>
      <anchor>actions</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activateWindow</name>
      <anchor>activateWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addAction</name>
      <anchor>addAction</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>addActions</name>
      <anchor>addActions</anchor>
      <arglist>( QList&lt;QAction *&gt; actions )</arglist>
    </member>
    <member kind="function">
      <name>adjustSize</name>
      <anchor>adjustSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ColorRole</name>
      <anchor>backgroundRole</anchor>
      <arglist> QWidget::backgroundRole()</arglist>
    </member>
    <member kind="function">
      <name>changeEvent</name>
      <anchor>changeEvent</anchor>
      <arglist>( QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>childAt</name>
      <anchor>childAt</anchor>
      <arglist>( int x, int y )</arglist>
    </member>
    <member kind="function">
      <name>childAt</name>
      <anchor>childAt-4</anchor>
      <arglist>( const QPoint &amp; p )</arglist>
    </member>
    <member kind="function">
      <name>clearFocus</name>
      <anchor>clearFocus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>clearMask</name>
      <anchor>clearMask</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>close</name>
      <anchor>close</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeEvent</name>
      <anchor>closeEvent</anchor>
      <arglist>( QCloseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>contentsRect</name>
      <anchor>contentsRect</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contextMenuEvent</name>
      <anchor>contextMenuEvent</anchor>
      <arglist>( QContextMenuEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( WId window = 0, bool initializeWindow = true, bool destroyOldWindow = true )</arglist>
    </member>
    <member kind="function">
      <name>customContextMenuRequested</name>
      <anchor>customContextMenuRequested</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>destroy</name>
      <anchor>destroy</anchor>
      <arglist>( bool destroyWindow = true, bool destroySubWindows = true )</arglist>
    </member>
    <member kind="function">
      <name>dragEnterEvent</name>
      <anchor>dragEnterEvent</anchor>
      <arglist>( QDragEnterEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dragLeaveEvent</name>
      <anchor>dragLeaveEvent</anchor>
      <arglist>( QDragLeaveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dragMoveEvent</name>
      <anchor>dragMoveEvent</anchor>
      <arglist>( QDragMoveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>dropEvent</name>
      <anchor>dropEvent</anchor>
      <arglist>( QDropEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>ensurePolished</name>
      <anchor>ensurePolished</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enterEvent</name>
      <anchor>enterEvent</anchor>
      <arglist>( QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>event</name>
      <anchor>event</anchor>
      <arglist>( QEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>find</name>
      <anchor>find</anchor>
      <arglist>( WId id )</arglist>
    </member>
    <member kind="function">
      <name>focusInEvent</name>
      <anchor>focusInEvent</anchor>
      <arglist>( QFocusEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>focusNextChild</name>
      <anchor>focusNextChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusNextPrevChild</name>
      <anchor>focusNextPrevChild</anchor>
      <arglist>( bool next )</arglist>
    </member>
    <member kind="function">
      <name>focusOutEvent</name>
      <anchor>focusOutEvent</anchor>
      <arglist>( QFocusEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>focusPreviousChild</name>
      <anchor>focusPreviousChild</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusProxy</name>
      <anchor>focusProxy</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>focusWidget</name>
      <anchor>focusWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontInfo</name>
      <anchor>fontInfo</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fontMetrics</name>
      <anchor>fontMetrics</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ColorRole</name>
      <anchor>foregroundRole</anchor>
      <arglist> QWidget::foregroundRole()</arglist>
    </member>
    <member kind="function">
      <name>getContentsMargins</name>
      <anchor>getContentsMargins</anchor>
      <arglist>( int * left, int * top, int * right, int * bottom )</arglist>
    </member>
    <member kind="function">
      <name>getDC</name>
      <anchor>getDC</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>grabKeyboard</name>
      <anchor>grabKeyboard</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>grabMouse</name>
      <anchor>grabMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>grabMouse</name>
      <anchor>grabMouse-2</anchor>
      <arglist>( const QCursor &amp; cursor )</arglist>
    </member>
    <member kind="function">
      <name>grabShortcut</name>
      <anchor>grabShortcut</anchor>
      <arglist>( const QKeySequence &amp; key, Qt::ShortcutContext context = Qt::WindowShortcut )</arglist>
    </member>
    <member kind="function">
      <name>heightForWidth</name>
      <anchor>heightForWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>hide</name>
      <anchor>hide</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hideEvent</name>
      <anchor>hideEvent</anchor>
      <arglist>( QHideEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>inputContext</name>
      <anchor>inputContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>inputMethodEvent</name>
      <anchor>inputMethodEvent</anchor>
      <arglist>( QInputMethodEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>inputMethodQuery</name>
      <anchor>inputMethodQuery</anchor>
      <arglist>( Qt::InputMethodQuery query )</arglist>
    </member>
    <member kind="function">
      <name>insertAction</name>
      <anchor>insertAction</anchor>
      <arglist>( QAction * before, QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>insertActions</name>
      <anchor>insertActions</anchor>
      <arglist>( QAction * before, QList&lt;QAction *&gt; actions )</arglist>
    </member>
    <member kind="function">
      <name>isAncestorOf</name>
      <anchor>isAncestorOf</anchor>
      <arglist>( const QWidget * child )</arglist>
    </member>
    <member kind="function">
      <name>isEnabledTo</name>
      <anchor>isEnabledTo</anchor>
      <arglist>( QWidget * ancestor )</arglist>
    </member>
    <member kind="function">
      <name>isHidden</name>
      <anchor>isHidden</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVisibleTo</name>
      <anchor>isVisibleTo</anchor>
      <arglist>( QWidget * ancestor )</arglist>
    </member>
    <member kind="function">
      <name>isWindow</name>
      <anchor>isWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyPressEvent</name>
      <anchor>keyPressEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>keyReleaseEvent</name>
      <anchor>keyReleaseEvent</anchor>
      <arglist>( QKeyEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>keyboardGrabber</name>
      <anchor>keyboardGrabber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>layout</name>
      <anchor>layout</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>leaveEvent</name>
      <anchor>leaveEvent</anchor>
      <arglist>( QEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>lower</name>
      <anchor>lower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>macEvent</name>
      <anchor>macEvent</anchor>
      <arglist>( EventHandlerCallRef caller, EventRef event )</arglist>
    </member>
    <member kind="function">
      <name>mapFrom</name>
      <anchor>mapFrom</anchor>
      <arglist>( QWidget * parent, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mapFromGlobal</name>
      <anchor>mapFromGlobal</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mapFromParent</name>
      <anchor>mapFromParent</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mapTo</name>
      <anchor>mapTo</anchor>
      <arglist>( QWidget * parent, const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mapToGlobal</name>
      <anchor>mapToGlobal</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mapToParent</name>
      <anchor>mapToParent</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>mask</name>
      <anchor>mask</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>metric</name>
      <anchor>metric</anchor>
      <arglist>( PaintDeviceMetric m )</arglist>
    </member>
    <member kind="function">
      <name>mouseDoubleClickEvent</name>
      <anchor>mouseDoubleClickEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mouseGrabber</name>
      <anchor>mouseGrabber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mouseMoveEvent</name>
      <anchor>mouseMoveEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mousePressEvent</name>
      <anchor>mousePressEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>mouseReleaseEvent</name>
      <anchor>mouseReleaseEvent</anchor>
      <arglist>( QMouseEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>moveEvent</name>
      <anchor>moveEvent</anchor>
      <arglist>( QMoveEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>nextInFocusChain</name>
      <anchor>nextInFocusChain</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>overrideWindowFlags</name>
      <anchor>overrideWindowFlags</anchor>
      <arglist>( Qt::WindowFlags flags )</arglist>
    </member>
    <member kind="function">
      <name>paintEngine</name>
      <anchor>paintEngine</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>paintEvent</name>
      <anchor>paintEvent</anchor>
      <arglist>( QPaintEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>parentWidget</name>
      <anchor>parentWidget</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>qwsEvent</name>
      <anchor>qwsEvent</anchor>
      <arglist>( QWSEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>raise</name>
      <anchor>raise</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>releaseDC</name>
      <anchor>releaseDC</anchor>
      <arglist>( HDC hdc )</arglist>
    </member>
    <member kind="function">
      <name>releaseKeyboard</name>
      <anchor>releaseKeyboard</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>releaseMouse</name>
      <anchor>releaseMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>releaseShortcut</name>
      <anchor>releaseShortcut</anchor>
      <arglist>( int id )</arglist>
    </member>
    <member kind="function">
      <name>removeAction</name>
      <anchor>removeAction</anchor>
      <arglist>( QAction * action )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-6</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-7</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>repaint</name>
      <anchor>repaint-8</anchor>
      <arglist>( const QRegion &amp; rgn )</arglist>
    </member>
    <member kind="function">
      <name>resetInputContext</name>
      <anchor>resetInputContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resizeEvent</name>
      <anchor>resizeEvent</anchor>
      <arglist>( QResizeEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>scroll</name>
      <anchor>scroll</anchor>
      <arglist>( int dx, int dy )</arglist>
    </member>
    <member kind="function">
      <name>scroll</name>
      <anchor>scroll-2</anchor>
      <arglist>( int dx, int dy, const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setAttribute</name>
      <anchor>setAttribute</anchor>
      <arglist>( Qt::WidgetAttribute attribute, bool on = true )</arglist>
    </member>
    <member kind="function">
      <name>setBackgroundRole</name>
      <anchor>setBackgroundRole</anchor>
      <arglist>( QPalette::ColorRole role )</arglist>
    </member>
    <member kind="function">
      <name>setContentsMargins</name>
      <anchor>setContentsMargins</anchor>
      <arglist>( int left, int top, int right, int bottom )</arglist>
    </member>
    <member kind="function">
      <name>setDisabled</name>
      <anchor>setDisabled</anchor>
      <arglist>( bool disable )</arglist>
    </member>
    <member kind="function">
      <name>setFixedHeight</name>
      <anchor>setFixedHeight</anchor>
      <arglist>( int h )</arglist>
    </member>
    <member kind="function">
      <name>setFixedSize</name>
      <anchor>setFixedSize</anchor>
      <arglist>( const QSize &amp; s )</arglist>
    </member>
    <member kind="function">
      <name>setFixedSize</name>
      <anchor>setFixedSize-2</anchor>
      <arglist>( int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>setFixedWidth</name>
      <anchor>setFixedWidth</anchor>
      <arglist>( int w )</arglist>
    </member>
    <member kind="function">
      <name>setFocus</name>
      <anchor>setFocus</anchor>
      <arglist>( Qt::FocusReason reason )</arglist>
    </member>
    <member kind="function">
      <name>setFocus</name>
      <anchor>setFocus-2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFocusProxy</name>
      <anchor>setFocusProxy</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>setForegroundRole</name>
      <anchor>setForegroundRole</anchor>
      <arglist>( QPalette::ColorRole role )</arglist>
    </member>
    <member kind="function">
      <name>setHidden</name>
      <anchor>setHidden</anchor>
      <arglist>( bool hidden )</arglist>
    </member>
    <member kind="function">
      <name>setInputContext</name>
      <anchor>setInputContext</anchor>
      <arglist>( QInputContext * context )</arglist>
    </member>
    <member kind="function">
      <name>setLayout</name>
      <anchor>setLayout</anchor>
      <arglist>( QLayout * l )</arglist>
    </member>
    <member kind="function">
      <name>setMask</name>
      <anchor>setMask</anchor>
      <arglist>( const QBitmap &amp; bitmap )</arglist>
    </member>
    <member kind="function">
      <name>setMask</name>
      <anchor>setMask-2</anchor>
      <arglist>( const QRegion &amp; region )</arglist>
    </member>
    <member kind="function">
      <name>setParent</name>
      <anchor>setParent</anchor>
      <arglist>( QWidget * parent )</arglist>
    </member>
    <member kind="function">
      <name>setParent</name>
      <anchor>setParent-2</anchor>
      <arglist>( QWidget * parent, Qt::WFlags f )</arglist>
    </member>
    <member kind="function">
      <name>setShortcutEnabled</name>
      <anchor>setShortcutEnabled</anchor>
      <arglist>( int id, bool enable = true )</arglist>
    </member>
    <member kind="function">
      <name>setStyle</name>
      <anchor>setStyle</anchor>
      <arglist>( QStyle * style )</arglist>
    </member>
    <member kind="function">
      <name>setTabOrder</name>
      <anchor>setTabOrder</anchor>
      <arglist>( QWidget * first, QWidget * second )</arglist>
    </member>
    <member kind="function">
      <name>setWindowRole</name>
      <anchor>setWindowRole</anchor>
      <arglist>( const QString &amp; role )</arglist>
    </member>
    <member kind="function">
      <name>setWindowState</name>
      <anchor>setWindowState</anchor>
      <arglist>( Qt::WindowStates windowState )</arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>show</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showEvent</name>
      <anchor>showEvent</anchor>
      <arglist>( QShowEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>showFullScreen</name>
      <anchor>showFullScreen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showMaximized</name>
      <anchor>showMaximized</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showMinimized</name>
      <anchor>showMinimized</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>showNormal</name>
      <anchor>showNormal</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>stackUnder</name>
      <anchor>stackUnder</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>style</name>
      <anchor>style</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>tabletEvent</name>
      <anchor>tabletEvent</anchor>
      <arglist>( QTabletEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>testAttribute</name>
      <anchor>testAttribute</anchor>
      <arglist>( Qt::WidgetAttribute attribute )</arglist>
    </member>
    <member kind="function">
      <name>underMouse</name>
      <anchor>underMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update-2</anchor>
      <arglist>( int x, int y, int w, int h )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update-3</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>update</name>
      <anchor>update-4</anchor>
      <arglist>( const QRegion &amp; rgn )</arglist>
    </member>
    <member kind="function">
      <name>updateGeometry</name>
      <anchor>updateGeometry</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>updateMicroFocus</name>
      <anchor>updateMicroFocus</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>visibleRegion</name>
      <anchor>visibleRegion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>wheelEvent</name>
      <anchor>wheelEvent</anchor>
      <arglist>( QWheelEvent * e )</arglist>
    </member>
    <member kind="function">
      <name>winEvent</name>
      <anchor>winEvent</anchor>
      <arglist>( MSG * message, long * result )</arglist>
    </member>
    <member kind="function">
      <name>winId</name>
      <anchor>winId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>window</name>
      <anchor>window</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>windowRole</name>
      <anchor>windowRole</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WindowStates</name>
      <anchor>windowState</anchor>
      <arglist> QWidget::windowState()</arglist>
    </member>
    <member kind="function">
      <name>WindowType</name>
      <anchor>windowType</anchor>
      <arglist> QWidget::windowType()</arglist>
    </member>
    <member kind="function">
      <name>x11Event</name>
      <anchor>x11Event</anchor>
      <arglist>( XEvent * event )</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>x11PictureHandle</anchor>
      <arglist> QWidget::x11PictureHandle()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWidgetContainerPlugin</name>
    <filename>qwidgetcontainerplugin.html</filename>
    <member kind="function">
      <name>QWidgetContainerPlugin</name>
      <anchor>QWidgetContainerPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addPage</name>
      <anchor>addPage</anchor>
      <arglist>( const QString &amp; key, QWidget * container, const QString &amp; name, int index )</arglist>
    </member>
    <member kind="function">
      <name>containerOfWidget</name>
      <anchor>containerOfWidget</anchor>
      <arglist>( const QString &amp; key, QWidget * container )</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>( const QString &amp; key, QWidget * container )</arglist>
    </member>
    <member kind="function">
      <name>createCode</name>
      <anchor>createCode</anchor>
      <arglist>( const QString &amp; key, const QString &amp; container, const QString &amp; page, const QString &amp; pageName )</arglist>
    </member>
    <member kind="function">
      <name>currentIndex</name>
      <anchor>currentIndex</anchor>
      <arglist>( const QString &amp; key, QWidget * container )</arglist>
    </member>
    <member kind="function">
      <name>insertPage</name>
      <anchor>insertPage</anchor>
      <arglist>( const QString &amp; key, QWidget * container, const QString &amp; name, int index, QWidget * page )</arglist>
    </member>
    <member kind="function">
      <name>isPassiveInteractor</name>
      <anchor>isPassiveInteractor</anchor>
      <arglist>( const QString &amp; key, QWidget * container )</arglist>
    </member>
    <member kind="function">
      <name>movePage</name>
      <anchor>movePage</anchor>
      <arglist>( const QString &amp; key, QWidget * container, int fromIndex, int toIndex )</arglist>
    </member>
    <member kind="function">
      <name>page</name>
      <anchor>page</anchor>
      <arglist>( const QString &amp; key, QWidget * container, int index )</arglist>
    </member>
    <member kind="function">
      <name>pageLabel</name>
      <anchor>pageLabel</anchor>
      <arglist>( const QString &amp; key, QWidget * container, int index )</arglist>
    </member>
    <member kind="function">
      <name>pages</name>
      <anchor>pages</anchor>
      <arglist>( const QString &amp; key, QWidget * container )</arglist>
    </member>
    <member kind="function">
      <name>removePage</name>
      <anchor>removePage</anchor>
      <arglist>( const QString &amp; key, QWidget * container, int index )</arglist>
    </member>
    <member kind="function">
      <name>renamePage</name>
      <anchor>renamePage</anchor>
      <arglist>( const QString &amp; key, QWidget * container, int index, const QString &amp; newName )</arglist>
    </member>
    <member kind="function">
      <name>supportsPages</name>
      <anchor>supportsPages</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWidgetItem</name>
    <filename>qwidgetitem.html</filename>
    <member kind="function">
      <name>QWidgetItem</name>
      <anchor>QWidgetItem</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>isEmpty</name>
      <anchor>isEmpty</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>maximumSize</name>
      <anchor>maximumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minimumSize</name>
      <anchor>minimumSize</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setGeometry</name>
      <anchor>setGeometry</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>sizeHint</name>
      <anchor>sizeHint</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>widget</name>
      <anchor>widget</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWidgetPlugin</name>
    <filename>qwidgetplugin.html</filename>
    <member kind="function">
      <name>QWidgetPlugin</name>
      <anchor>QWidgetPlugin</anchor>
      <arglist>( QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>create</name>
      <anchor>create</anchor>
      <arglist>( const QString &amp; key, QWidget * parent = 0, const char * name = 0 )</arglist>
    </member>
    <member kind="function">
      <name>group</name>
      <anchor>group</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>iconSet</name>
      <anchor>iconSet</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>includeFile</name>
      <anchor>includeFile</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>isContainer</name>
      <anchor>isContainer</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>keys</name>
      <anchor>keys</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>toolTip</name>
      <anchor>toolTip</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
    <member kind="function">
      <name>whatsThis</name>
      <anchor>whatsThis</anchor>
      <arglist>( const QString &amp; key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWindowsMime</name>
    <filename>qwindowsmime.html</filename>
    <member kind="function">
      <name>QWindowsMime</name>
      <anchor>QWindowsMime</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>canConvertFromMime</name>
      <anchor>canConvertFromMime</anchor>
      <arglist>( const FORMATETC &amp; formatetc, const QMimeData * mimeData )</arglist>
    </member>
    <member kind="function">
      <name>canConvertToMime</name>
      <anchor>canConvertToMime</anchor>
      <arglist>( const QString &amp; mimeType, IDataObject * pDataObj )</arglist>
    </member>
    <member kind="function">
      <name>convertFromMime</name>
      <anchor>convertFromMime</anchor>
      <arglist>( const FORMATETC &amp; formatetc, const QMimeData * mimeData, STGMEDIUM * pmedium )</arglist>
    </member>
    <member kind="function">
      <name>convertToMime</name>
      <anchor>convertToMime</anchor>
      <arglist>( const QString &amp; mimeType, IDataObject * pDataObj, QVariant::Type preferredType )</arglist>
    </member>
    <member kind="function">
      <name>formatsForMime</name>
      <anchor>formatsForMime</anchor>
      <arglist>( const QString &amp; mimeType, const QMimeData * mimeData )</arglist>
    </member>
    <member kind="function">
      <name>mimeForFormat</name>
      <anchor>mimeForFormat</anchor>
      <arglist>( const FORMATETC &amp; formatetc )</arglist>
    </member>
    <member kind="function">
      <name>registerMimeType</name>
      <anchor>registerMimeType</anchor>
      <arglist>( const QString &amp; mime )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWindowsStyle</name>
    <filename>qwindowsstyle.html</filename>
    <member kind="function">
      <name>QWindowsStyle</name>
      <anchor>QWindowsStyle</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWindowStateChangeEvent</name>
    <filename>qwindowstatechangeevent.html</filename>
    <member kind="function">
      <name>WindowStates</name>
      <anchor>oldState</anchor>
      <arglist> QWindowStateChangeEvent::oldState()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWindowsXPStyle</name>
    <filename>qwindowsxpstyle.html</filename>
    <member kind="function">
      <name>QWindowsXPStyle</name>
      <anchor>QWindowsXPStyle</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>standardPalette</name>
      <anchor>standardPalette</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QWorkspace</name>
      <anchor>QWorkspace-2</anchor>
      <arglist>( QWidget * parent, const char * name )</arglist>
    </member>
    <member kind="function">
      <name>setPaletteBackgroundColor</name>
      <anchor>setPaletteBackgroundColor</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setPaletteBackgroundPixmap</name>
      <anchor>setPaletteBackgroundPixmap</anchor>
      <arglist>( const QPixmap &amp; pm )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWorkspace</name>
    <filename>qworkspace.html</filename>
    <member kind="enum">
      <name>WindowOrder</name>
      <anchor>WindowOrder-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QWorkspace</name>
      <anchor>QWorkspace</anchor>
      <arglist>( QWidget * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>activateNextWindow</name>
      <anchor>activateNextWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activatePreviousWindow</name>
      <anchor>activatePreviousWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>activeWindow</name>
      <anchor>activeWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>addWindow</name>
      <anchor>addWindow</anchor>
      <arglist>( QWidget * w, Qt::WFlags flags = 0 )</arglist>
    </member>
    <member kind="function">
      <name>cascade</name>
      <anchor>cascade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeActiveWindow</name>
      <anchor>closeActiveWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeAllWindows</name>
      <anchor>closeAllWindows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActiveWindow</name>
      <anchor>setActiveWindow</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>tile</name>
      <anchor>tile</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>windowActivated</name>
      <anchor>windowActivated</anchor>
      <arglist>( QWidget * w )</arglist>
    </member>
    <member kind="function">
      <name>windowList</name>
      <anchor>windowList</anchor>
      <arglist>( WindowOrder order = CreationOrder )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWriteLocker</name>
    <filename>qwritelocker.html</filename>
    <member kind="function">
      <name>QWriteLocker</name>
      <anchor>QWriteLocker</anchor>
      <arglist>( QReadWriteLock * lock )</arglist>
    </member>
    <member kind="function">
      <name>readWriteLock</name>
      <anchor>readWriteLock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>relock</name>
      <anchor>relock</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>unlock</name>
      <anchor>unlock</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSInputMethod</name>
    <filename>qwsinputmethod.html</filename>
    <member kind="function">
      <name>QWSInputMethod</name>
      <anchor>QWSInputMethod</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>filter</name>
      <anchor>filter</anchor>
      <arglist>( int unicode, int keycode, int modifiers, bool isPress, bool autoRepeat )</arglist>
    </member>
    <member kind="function">
      <name>mouseHandler</name>
      <anchor>mouseHandler</anchor>
      <arglist>( int x, int state )</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>responseHandler</name>
      <anchor>responseHandler</anchor>
      <arglist>( int property, const QVariant &amp; result )</arglist>
    </member>
    <member kind="function">
      <name>sendIMEvent</name>
      <anchor>sendIMEvent</anchor>
      <arglist>( QWSServer::IMState state, const QString &amp; txt, int cpos, int selLen = 0 )</arglist>
    </member>
    <member kind="function">
      <name>sendIMQuery</name>
      <anchor>sendIMQuery</anchor>
      <arglist>( int property )</arglist>
    </member>
    <member kind="function">
      <name>updateHandler</name>
      <anchor>updateHandler</anchor>
      <arglist>( int type )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSKeyboardHandler</name>
    <filename>qwskeyboardhandler.html</filename>
    <member kind="function">
      <name>QWSKeyboardHandler</name>
      <anchor>QWSKeyboardHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>beginAutoRepeat</name>
      <anchor>beginAutoRepeat</anchor>
      <arglist>( int uni, int code, Qt::KeyboardModifiers mod )</arglist>
    </member>
    <member kind="function">
      <name>endAutoRepeat</name>
      <anchor>endAutoRepeat</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>processKeyEvent</name>
      <anchor>processKeyEvent</anchor>
      <arglist>( int unicode, int keycode, Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat )</arglist>
    </member>
    <member kind="function">
      <name>transformDirKey</name>
      <anchor>transformDirKey</anchor>
      <arglist>( int key )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSMouseHandler</name>
    <filename>qwsmousehandler.html</filename>
    <member kind="function">
      <name>QWSMouseHandler</name>
      <anchor>QWSMouseHandler</anchor>
      <arglist>( const QString &amp; driver = QString()</arglist>
    </member>
    <member kind="function">
      <name>calibrate</name>
      <anchor>calibrate</anchor>
      <arglist>( const QWSPointerCalibrationData * data )</arglist>
    </member>
    <member kind="function">
      <name>clearCalibration</name>
      <anchor>clearCalibration</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>limitToScreen</name>
      <anchor>limitToScreen</anchor>
      <arglist>( QPoint &amp; pt )</arglist>
    </member>
    <member kind="function">
      <name>mouseChanged</name>
      <anchor>mouseChanged</anchor>
      <arglist>( const QPoint &amp; pos, int bstate, int wheel = 0 )</arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>pos</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resume</name>
      <anchor>resume</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>suspend</name>
      <anchor>suspend</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSServer::KeyboardFilter</name>
    <filename>qwsserver-keyboardfilter.html</filename>
    <member kind="function">
      <name>filter</name>
      <anchor>filter</anchor>
      <arglist>( int unicode, int keycode, int modifiers, bool isPress, bool autoRepeat )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSServer::KeyMap</name>
    <filename>qwsserver-keymap.html</filename>
  </compound>
  <compound kind="class">
    <name>QWSServer::KeyOverride</name>
    <filename>qwsserver-keyoverride.html</filename>
    <member kind="function">
      <name>QWSServer</name>
      <anchor>QWSServer-2</anchor>
      <arglist>( int flags, QObject * parent, const char * name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSServer</name>
    <filename>qwsserver.html</filename>
    <member kind="enum">
      <name>GUIMode</name>
      <anchor>GUIMode-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>ServerFlags</name>
      <anchor>ServerFlags-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="enum">
      <name>WindowEvent</name>
      <anchor>WindowEvent-enum</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>QWSServer</name>
      <anchor>QWSServer</anchor>
      <arglist>( int flags = 0, QObject * parent = 0 )</arglist>
    </member>
    <member kind="function">
      <name>addKeyboardFilter</name>
      <anchor>addKeyboardFilter</anchor>
      <arglist>( KeyboardFilter * f )</arglist>
    </member>
    <member kind="function">
      <name>clientWindows</name>
      <anchor>clientWindows</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeKeyboard</name>
      <anchor>closeKeyboard</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>closeMouse</name>
      <anchor>closeMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>enablePainting</name>
      <anchor>enablePainting</anchor>
      <arglist>( bool e )</arglist>
    </member>
    <member kind="function">
      <name>isCursorVisible</name>
      <anchor>isCursorVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyMap</name>
      <anchor>keyMap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>keyboardHandler</name>
      <anchor>keyboardHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>manager</name>
      <anchor>manager</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>markedText</name>
      <anchor>markedText</anchor>
      <arglist>( const QString &amp; text )</arglist>
    </member>
    <member kind="function">
      <name>mouseHandler</name>
      <anchor>mouseHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>newChannel</name>
      <anchor>newChannel</anchor>
      <arglist>( const QString &amp; channel )</arglist>
    </member>
    <member kind="function">
      <name>openKeyboard</name>
      <anchor>openKeyboard</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>openMouse</name>
      <anchor>openMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>refresh</name>
      <anchor>refresh-2</anchor>
      <arglist>( QRegion &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>removeKeyboardFilter</name>
      <anchor>removeKeyboardFilter</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>removedChannel</name>
      <anchor>removedChannel</anchor>
      <arglist>( const QString &amp; channel )</arglist>
    </member>
    <member kind="function">
      <name>resumeMouse</name>
      <anchor>resumeMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>screenSaverActivate</name>
      <anchor>screenSaverActivate</anchor>
      <arglist>( bool activate )</arglist>
    </member>
    <member kind="function">
      <name>screenSaverActive</name>
      <anchor>screenSaverActive</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>sendIMEvent</name>
      <anchor>sendIMEvent</anchor>
      <arglist>( IMState state, const QString &amp; txt, int cpos, int selLen )</arglist>
    </member>
    <member kind="function">
      <name>sendIMQuery</name>
      <anchor>sendIMQuery</anchor>
      <arglist>( int property )</arglist>
    </member>
    <member kind="function">
      <name>sendKeyEvent</name>
      <anchor>sendKeyEvent</anchor>
      <arglist>( int unicode, int keycode, Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat )</arglist>
    </member>
    <member kind="function">
      <name>setCursorVisible</name>
      <anchor>setCursorVisible</anchor>
      <arglist>( bool vis )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultKeyboard</name>
      <anchor>setDefaultKeyboard</anchor>
      <arglist>( const char * k )</arglist>
    </member>
    <member kind="function">
      <name>setDefaultMouse</name>
      <anchor>setDefaultMouse</anchor>
      <arglist>( const char * m )</arglist>
    </member>
    <member kind="function">
      <name>setDesktopBackground</name>
      <anchor>setDesktopBackground</anchor>
      <arglist>( const QImage &amp; img )</arglist>
    </member>
    <member kind="function">
      <name>setDesktopBackground</name>
      <anchor>setDesktopBackground-2</anchor>
      <arglist>( const QColor &amp; c )</arglist>
    </member>
    <member kind="function">
      <name>setKeyboardHandler</name>
      <anchor>setKeyboardHandler</anchor>
      <arglist>( QWSKeyboardHandler * kh )</arglist>
    </member>
    <member kind="function">
      <name>setMaxWindowRect</name>
      <anchor>setMaxWindowRect</anchor>
      <arglist>( const QRect &amp; r )</arglist>
    </member>
    <member kind="function">
      <name>setScreenSaverInterval</name>
      <anchor>setScreenSaverInterval</anchor>
      <arglist>( int ms )</arglist>
    </member>
    <member kind="function">
      <name>setScreenSaverIntervals</name>
      <anchor>setScreenSaverIntervals</anchor>
      <arglist>( int * ms )</arglist>
    </member>
    <member kind="function">
      <name>suspendMouse</name>
      <anchor>suspendMouse</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>windowAt</name>
      <anchor>windowAt</anchor>
      <arglist>( const QPoint &amp; pos )</arglist>
    </member>
    <member kind="function">
      <name>windowEvent</name>
      <anchor>windowEvent</anchor>
      <arglist>( QWSWindow * w, QWSServer::WindowEvent e )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QWSWindow</name>
    <filename>qwswindow.html</filename>
    <member kind="function">
      <name>QWSWindow</name>
      <anchor>QWSWindow</anchor>
      <arglist>( int i, QWSClient * client )</arglist>
    </member>
    <member kind="function">
      <name>caption</name>
      <anchor>caption</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>client</name>
      <anchor>client</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>hide</name>
      <anchor>hide</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFullyObscured</name>
      <anchor>isFullyObscured</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isVisible</name>
      <anchor>isVisible</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lower</name>
      <anchor>lower</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>name</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>raise</name>
      <anchor>raise</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>requestedRegion</name>
      <anchor>requestedRegion</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setActiveWindow</name>
      <anchor>setActiveWindow</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>show</name>
      <anchor>show</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>winId</name>
      <anchor>winId</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QX11Info</name>
    <filename>qx11info.html</filename>
    <member kind="function">
      <name>QX11Info</name>
      <anchor>QX11Info</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QX11Info</name>
      <anchor>QX11Info-2</anchor>
      <arglist>( const QX11Info &amp; other )</arglist>
    </member>
    <member kind="function">
      <name>appCells</name>
      <anchor>appCells</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appClass</name>
      <anchor>appClass</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>appColormap</anchor>
      <arglist> QX11Info::appColormap( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appDefaultColormap</name>
      <anchor>appDefaultColormap</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appDefaultVisual</name>
      <anchor>appDefaultVisual</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appDepth</name>
      <anchor>appDepth</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appDpiX</name>
      <anchor>appDpiX</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appDpiY</name>
      <anchor>appDpiY</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>appRootWindow</anchor>
      <arglist> QX11Info::appRootWindow( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>appScreen</name>
      <anchor>appScreen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>appVisual</name>
      <anchor>appVisual</anchor>
      <arglist>( int screen = -1 )</arglist>
    </member>
    <member kind="function">
      <name>cells</name>
      <anchor>cells</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HANDLE</name>
      <anchor>colormap</anchor>
      <arglist> QX11Info::colormap()</arglist>
    </member>
    <member kind="function">
      <name>defaultColormap</name>
      <anchor>defaultColormap</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>defaultVisual</name>
      <anchor>defaultVisual</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>depth</name>
      <anchor>depth</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>display</name>
      <anchor>display</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>screen</name>
      <anchor>screen</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setAppDpiX</name>
      <anchor>setAppDpiX</anchor>
      <arglist>( int screen, int xdpi )</arglist>
    </member>
    <member kind="function">
      <name>setAppDpiY</name>
      <anchor>setAppDpiY</anchor>
      <arglist>( int screen, int ydpi )</arglist>
    </member>
    <member kind="function">
      <name>visual</name>
      <anchor>visual</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>operator-eq</anchor>
      <arglist>( const QX11Info &amp; other )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlAttributes</name>
    <filename>qxmlattributes.html</filename>
    <member kind="function">
      <name>QXmlAttributes</name>
      <anchor>QXmlAttributes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>append</name>
      <anchor>append</anchor>
      <arglist>( const QString &amp; qName, const QString &amp; uri, const QString &amp; localPart, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>clear</name>
      <anchor>clear</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>count</name>
      <anchor>count</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index</anchor>
      <arglist>( const QString &amp; qName )</arglist>
    </member>
    <member kind="function">
      <name>index</name>
      <anchor>index-2</anchor>
      <arglist>( const QString &amp; uri, const QString &amp; localPart )</arglist>
    </member>
    <member kind="function">
      <name>length</name>
      <anchor>length</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>localName</name>
      <anchor>localName</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>qName</name>
      <anchor>qName</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type-2</anchor>
      <arglist>( const QString &amp; qName )</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>type-3</anchor>
      <arglist>( const QString &amp; uri, const QString &amp; localName )</arglist>
    </member>
    <member kind="function">
      <name>uri</name>
      <anchor>uri</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value</anchor>
      <arglist>( int index )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-2</anchor>
      <arglist>( const QString &amp; qName )</arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>value-3</anchor>
      <arglist>( const QString &amp; uri, const QString &amp; localName )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlContentHandler</name>
    <filename>qxmlcontenthandler.html</filename>
    <member kind="function">
      <name>characters</name>
      <anchor>characters</anchor>
      <arglist>( const QString &amp; ch )</arglist>
    </member>
    <member kind="function">
      <name>endDocument</name>
      <anchor>endDocument</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endElement</name>
      <anchor>endElement</anchor>
      <arglist>( const QString &amp; namespaceURI, const QString &amp; localName, const QString &amp; qName )</arglist>
    </member>
    <member kind="function">
      <name>endPrefixMapping</name>
      <anchor>endPrefixMapping</anchor>
      <arglist>( const QString &amp; prefix )</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ignorableWhitespace</name>
      <anchor>ignorableWhitespace</anchor>
      <arglist>( const QString &amp; ch )</arglist>
    </member>
    <member kind="function">
      <name>processingInstruction</name>
      <anchor>processingInstruction</anchor>
      <arglist>( const QString &amp; target, const QString &amp; data )</arglist>
    </member>
    <member kind="function">
      <name>setDocumentLocator</name>
      <anchor>setDocumentLocator</anchor>
      <arglist>( QXmlLocator * locator )</arglist>
    </member>
    <member kind="function">
      <name>skippedEntity</name>
      <anchor>skippedEntity</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>startDocument</name>
      <anchor>startDocument</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startElement</name>
      <anchor>startElement</anchor>
      <arglist>( const QString &amp; namespaceURI, const QString &amp; localName, const QString &amp; qName, const QXmlAttributes &amp; atts )</arglist>
    </member>
    <member kind="function">
      <name>startPrefixMapping</name>
      <anchor>startPrefixMapping</anchor>
      <arglist>( const QString &amp; prefix, const QString &amp; uri )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlDeclHandler</name>
    <filename>qxmldeclhandler.html</filename>
    <member kind="function">
      <name>attributeDecl</name>
      <anchor>attributeDecl</anchor>
      <arglist>( const QString &amp; eName, const QString &amp; aName, const QString &amp; type, const QString &amp; valueDefault, const QString &amp; value )</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>externalEntityDecl</name>
      <anchor>externalEntityDecl</anchor>
      <arglist>( const QString &amp; name, const QString &amp; publicId, const QString &amp; systemId )</arglist>
    </member>
    <member kind="function">
      <name>internalEntityDecl</name>
      <anchor>internalEntityDecl</anchor>
      <arglist>( const QString &amp; name, const QString &amp; value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlDefaultHandler</name>
    <filename>qxmldefaulthandler.html</filename>
    <member kind="function">
      <name>QXmlDefaultHandler</name>
      <anchor>QXmlDefaultHandler</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlDTDHandler</name>
    <filename>qxmldtdhandler.html</filename>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>notationDecl</name>
      <anchor>notationDecl</anchor>
      <arglist>( const QString &amp; name, const QString &amp; publicId, const QString &amp; systemId )</arglist>
    </member>
    <member kind="function">
      <name>unparsedEntityDecl</name>
      <anchor>unparsedEntityDecl</anchor>
      <arglist>( const QString &amp; name, const QString &amp; publicId, const QString &amp; systemId, const QString &amp; notationName )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlEntityResolver</name>
    <filename>qxmlentityresolver.html</filename>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>resolveEntity</name>
      <anchor>resolveEntity</anchor>
      <arglist>( const QString &amp; publicId, const QString &amp; systemId, QXmlInputSource *&amp; ret )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlErrorHandler</name>
    <filename>qxmlerrorhandler.html</filename>
    <member kind="function">
      <name>error</name>
      <anchor>error</anchor>
      <arglist>( const QXmlParseException &amp; exception )</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fatalError</name>
      <anchor>fatalError</anchor>
      <arglist>( const QXmlParseException &amp; exception )</arglist>
    </member>
    <member kind="function">
      <name>warning</name>
      <anchor>warning</anchor>
      <arglist>( const QXmlParseException &amp; exception )</arglist>
    </member>
    <member kind="function">
      <name>QXmlInputSource</name>
      <anchor>QXmlInputSource-3</anchor>
      <arglist>( QFile &amp; file )</arglist>
    </member>
    <member kind="function">
      <name>QXmlInputSource</name>
      <anchor>QXmlInputSource-4</anchor>
      <arglist>( QTextStream &amp; stream )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlInputSource</name>
    <filename>qxmlinputsource.html</filename>
    <member kind="function">
      <name>QXmlInputSource</name>
      <anchor>QXmlInputSource</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QXmlInputSource</name>
      <anchor>QXmlInputSource-2</anchor>
      <arglist>( QIODevice * dev )</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>data</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fetchData</name>
      <anchor>fetchData</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>fromRawData</name>
      <anchor>fromRawData</anchor>
      <arglist>( const QByteArray &amp; data, bool beginning = false )</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>next</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData</anchor>
      <arglist>( const QString &amp; dat )</arglist>
    </member>
    <member kind="function">
      <name>setData</name>
      <anchor>setData-2</anchor>
      <arglist>( const QByteArray &amp; dat )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlLexicalHandler</name>
    <filename>qxmllexicalhandler.html</filename>
    <member kind="function">
      <name>comment</name>
      <anchor>comment</anchor>
      <arglist>( const QString &amp; ch )</arglist>
    </member>
    <member kind="function">
      <name>endCDATA</name>
      <anchor>endCDATA</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endDTD</name>
      <anchor>endDTD</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>endEntity</name>
      <anchor>endEntity</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>errorString</name>
      <anchor>errorString</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startCDATA</name>
      <anchor>startCDATA</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>startDTD</name>
      <anchor>startDTD</anchor>
      <arglist>( const QString &amp; name, const QString &amp; publicId, const QString &amp; systemId )</arglist>
    </member>
    <member kind="function">
      <name>startEntity</name>
      <anchor>startEntity</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlLocator</name>
    <filename>qxmllocator.html</filename>
    <member kind="function">
      <name>QXmlLocator</name>
      <anchor>QXmlLocator</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>columnNumber</name>
      <anchor>columnNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineNumber</name>
      <anchor>lineNumber</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlNamespaceSupport</name>
    <filename>qxmlnamespacesupport.html</filename>
    <member kind="function">
      <name>QXmlNamespaceSupport</name>
      <anchor>QXmlNamespaceSupport</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>popContext</name>
      <anchor>popContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prefix</name>
      <anchor>prefix</anchor>
      <arglist>( const QString &amp; uri )</arglist>
    </member>
    <member kind="function">
      <name>prefixes</name>
      <anchor>prefixes</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>prefixes</name>
      <anchor>prefixes-2</anchor>
      <arglist>( const QString &amp; uri )</arglist>
    </member>
    <member kind="function">
      <name>processName</name>
      <anchor>processName</anchor>
      <arglist>( const QString &amp; qname, bool isAttribute, QString &amp; nsuri, QString &amp; localname )</arglist>
    </member>
    <member kind="function">
      <name>pushContext</name>
      <anchor>pushContext</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>reset</name>
      <anchor>reset</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setPrefix</name>
      <anchor>setPrefix</anchor>
      <arglist>( const QString &amp; pre, const QString &amp; uri )</arglist>
    </member>
    <member kind="function">
      <name>splitName</name>
      <anchor>splitName</anchor>
      <arglist>( const QString &amp; qname, QString &amp; prefix, QString &amp; localname )</arglist>
    </member>
    <member kind="function">
      <name>uri</name>
      <anchor>uri</anchor>
      <arglist>( const QString &amp; prefix )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlParseException</name>
    <filename>qxmlparseexception.html</filename>
    <member kind="function">
      <name>QXmlParseException</name>
      <anchor>QXmlParseException</anchor>
      <arglist>( const QString &amp; name = QString()</arglist>
    </member>
    <member kind="function">
      <name>columnNumber</name>
      <anchor>columnNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lineNumber</name>
      <anchor>lineNumber</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>message</name>
      <anchor>message</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>publicId</name>
      <anchor>publicId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>systemId</name>
      <anchor>systemId</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parse</name>
      <anchor>parse</anchor>
      <arglist>( const QXmlInputSource &amp; input )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlReader</name>
    <filename>qxmlreader.html</filename>
    <member kind="function">
      <name>DTDHandler</name>
      <anchor>DTDHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>contentHandler</name>
      <anchor>contentHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>declHandler</name>
      <anchor>declHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>entityResolver</name>
      <anchor>entityResolver</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>errorHandler</name>
      <anchor>errorHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>feature</name>
      <anchor>feature</anchor>
      <arglist>( const QString &amp; name, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>hasFeature</name>
      <anchor>hasFeature</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>hasProperty</name>
      <anchor>hasProperty</anchor>
      <arglist>( const QString &amp; name )</arglist>
    </member>
    <member kind="function">
      <name>lexicalHandler</name>
      <anchor>lexicalHandler</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parse</name>
      <anchor>parse-2</anchor>
      <arglist>( const QXmlInputSource * input )</arglist>
    </member>
    <member kind="function">
      <name>property</name>
      <anchor>property</anchor>
      <arglist>( const QString &amp; name, bool * ok = 0 )</arglist>
    </member>
    <member kind="function">
      <name>setContentHandler</name>
      <anchor>setContentHandler</anchor>
      <arglist>( QXmlContentHandler * handler )</arglist>
    </member>
    <member kind="function">
      <name>setDTDHandler</name>
      <anchor>setDTDHandler</anchor>
      <arglist>( QXmlDTDHandler * handler )</arglist>
    </member>
    <member kind="function">
      <name>setDeclHandler</name>
      <anchor>setDeclHandler</anchor>
      <arglist>( QXmlDeclHandler * handler )</arglist>
    </member>
    <member kind="function">
      <name>setEntityResolver</name>
      <anchor>setEntityResolver</anchor>
      <arglist>( QXmlEntityResolver * handler )</arglist>
    </member>
    <member kind="function">
      <name>setErrorHandler</name>
      <anchor>setErrorHandler</anchor>
      <arglist>( QXmlErrorHandler * handler )</arglist>
    </member>
    <member kind="function">
      <name>setFeature</name>
      <anchor>setFeature</anchor>
      <arglist>( const QString &amp; name, bool value )</arglist>
    </member>
    <member kind="function">
      <name>setLexicalHandler</name>
      <anchor>setLexicalHandler</anchor>
      <arglist>( QXmlLexicalHandler * handler )</arglist>
    </member>
    <member kind="function">
      <name>setProperty</name>
      <anchor>setProperty</anchor>
      <arglist>( const QString &amp; name, void * value )</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QXmlSimpleReader</name>
    <filename>qxmlsimplereader.html</filename>
    <member kind="function">
      <name>QXmlSimpleReader</name>
      <anchor>QXmlSimpleReader</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>parse</name>
      <anchor>parse-3</anchor>
      <arglist>( const QXmlInputSource * input, bool incremental )</arglist>
    </member>
    <member kind="function">
      <name>parseContinue</name>
      <anchor>parseContinue</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>setFeature</name>
      <anchor>setFeature</anchor>
      <arglist>( const QString &amp; name, bool enable )</arglist>
    </member>
  </compound>
</tagfile>
