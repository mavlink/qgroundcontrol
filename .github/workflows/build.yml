name: QGC Multi‑Platform Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  # ─────────── Linux Build ───────────
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-base-dev qt6-tools-dev cmake ninja-build build-essential

      - name: Build (Release)
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -G Ninja
          cmake --build . --config Release

      - name: Upload Linux executable
        uses: actions/upload-artifact@v3
        with:
          name: QGroundControl-linux
          path: build/qgroundcontrol

  # ─────────── macOS Build ───────────
  build-macos:
    runs-on: macos-12
    strategy:
      matrix:
        BuildType: [Release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Install deps
        run: |
          brew update
          brew install cmake ninja SDL2 ccache gstreamer

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.8.3'
          host: macos
          target: desktop
          dir: ${{ runner.temp }}

      - name: Build (Release)
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -G Ninja
          cmake --build . --config Release

      - name: Upload macOS dmg
        uses: actions/upload-artifact@v3
        with:
          name: QGroundControl-macos
          path: build/Release/QGroundControl.app

  # ─────────── Windows Build ───────────
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        BuildType: [Release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Install Qt + Vulkan + GStreamer
        run: |
          powershell -Command "irm https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe -OutFile vulkan-sdk.exe; Start-Process .\\vulkan-sdk.exe -ArgumentList '/S' -Wait"

      - uses: blinemedical/setup-gstreamer@v1
        with:
          version: '1.22.12'

      - uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.3'
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}

      - name: Build (Release)
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Upload Windows exe
        uses: actions/upload-artifact@v3
        with:
          name: QGroundControl-windows
          path: build/Release/QGroundControl.exe

  # ─────────── Android Build ───────────
  build-android:
    runs-on: ubuntu-latest
    env:
      QT_VERSION: 6.8.3
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ARTIFACT: QGroundControl.apk
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - uses: nttld/setup-ndk@v1
        with:
          ndk-version: r21e

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: android

      - name: Build Android Release
        run: |
          mkdir build && cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DANDROID=true
          cmake --build . --config Release

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/android-build/*.apk
