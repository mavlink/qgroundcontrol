name: Windows-Arm64

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Debug, Release]

    defaults:
      run:
        shell: cmd

    env:
      QT_VERSION: 6.6.3
      ARTIFACT: QGroundControl-installer.exe

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Install SCCache
        run: |
          choco install --no-progress sccache ninja -y
          choco install --no-progress cmake --installargs 'ADD_CMAKE_TO_PATH=System' --apply-install-arguments-to-dependencies

      - name: Set Up Cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-Arm64-${{ matrix.BuildType }}
          restore-keys: ${{ runner.os }}-Arm64-${{ matrix.BuildType }}
          max-size: 2G
          append-timestamp: false
          variant: sccache
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - uses: actions/checkout@v4
        with:
          repository: jurplel/install-qt-action
          ref: master
          path: install-qt-action

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: install-qt-action/action/

      - name: Build jurplel/install-qt-action
        run: |
          cd .\install-qt-action\action
          npm ci || npm install
          npm run build

      - name: Install Qt6 for Windows (MSVC)
        uses: ./install-qt-action/action/
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d
          cache: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' }}

      - name: Install Qt6 for Windows (ARM64)
        uses: ./install-qt-action/action/
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2019_arm64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d
          cache: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' }}

      - name: Install Dependencies
        run: |
          choco install --no-progress ninja -y
          choco install --no-progress cmake --installargs 'ADD_CMAKE_TO_PATH=System' --apply-install-arguments-to-dependencies

      - name: Install Gstreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: 1.22.11
        # run: choco install --no-progress gstreamer gstreamer-devel --version=1.18.6

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Create build directory
        run: mkdir ${{ runner.temp }}\shadow_build_dir

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}\bin\qt-cmake -S ${{ github.workspace }} -B . -G Ninja ^
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }} ^
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }} ^
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}\..\msvc2019_64"

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Save Installer
        uses: actions/upload-artifact@v4
        if: matrix.BuildType == 'Release'
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}/shadow_build_dir/${{ env.ARTIFACT }}
