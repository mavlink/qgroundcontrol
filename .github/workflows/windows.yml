name: Windows

on:
  push:
    branches:
      - master
      - 'Stable*'
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/windows.yml'
      - 'deploy/windows/**'
      - 'src/**'
      - 'CMakeLists.txt'

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Release]
        Arch: [x64] # Arm64

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: QGroundControl-installer.exe
      PACKAGE: QGroundControl-installer
      QT_VERSION: 6.8.1
      GST_VERSION: 1.22.12
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true
          fetch-depth: 0

      - uses: seanmiddleditch/gha-setup-ninja@v5
      - uses: lukka/get-cmake@latest

      - name: Install Vulkan
        working-directory: ${{ runner.temp }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe" -OutFile vulkan-sdk.exe
          .\vulkan-sdk.exe --root C:\VulkanSDK\latest --accept-licenses --default-answer --confirm-command install com.lunarg.vulkan.glm com.lunarg.vulkan.volk com.lunarg.vulkan.vma com.lunarg.vulkan.debug
          echo "VULKAN_SDK=C:\VulkanSDK\latest" >> $env:GITHUB_ENV

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}

      - name: Set Up sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Set Up Cache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ runner.os }}-${{ matrix.Arch }}-${{ matrix.BuildType }}
          max-size: 1G
          variant: sccache
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Install Qt for Windows (x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.19
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors
          cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      # Note: Must Use QtMultimedia VideoReceiver or build GStreamer manually
      - name: Install Qt for Windows (Arm64)
        if: matrix.Arch == 'Arm64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.19
          host: windows
          target: desktop
          arch: win64_msvc2022_arm64_cross_compiled
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors
          cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.Arch == 'Arm64' && 'amd64_arm64' || 'x64' }}

      - run: mkdir ${{ runner.temp }}\shadow_build_dir

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}/../msvc2022_64"
              -DQT_DEBUG_FIND_PACKAGE=ON
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Upload Build File
        if: matrix.BuildType == 'Release'
        uses: ./.github/actions/upload
        with:
          artifact_name: ${{ env.ARTIFACT }}
          package_name: ${{ env.PACKAGE }}
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
