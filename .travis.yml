# if you update this file, please consider updating Vagrantfile too

language: cpp

env:
  global:
    - SHADOW_BUILD_DIR=/tmp/shadow_build_dir
    - JOBS=2
    # ANDROID_STOREPASS
    - secure: RGovyUnMw3fp/bHZi058JvANT1rYmNqrsuSYew0cIgirO6YbMHr/rsjwCm1FTYpBl8s1zgr+u2b8ftYnfnCz2YT+Aip4NWrVYpVU0FEmfytGILrnUS0pjlt8m7fU9AKR1ElOSll7yw7e1kftynN39Q321etvwbLZcXon6zz0suE=

matrix:
    fast_finish: true
    include:
        #- os: linux
        #  env: SPEC=linux-g++-64 CONFIG=debug QT_FATAL_WARNINGS=1
        #  sudo: required
        #  dist: trusty
        - os: linux
          env: SPEC=linux-g++-64 CONFIG=installer
          sudo: required 
          dist: trusty
        - os: osx
          osx_image: xcode7.3
          env: SPEC=macx-clang CONFIG=debug QT_FATAL_WARNINGS=1
          sudo: required
        - os: osx
          osx_image: xcode7.3
          env: SPEC=macx-clang CONFIG=installer
          sudo: required
        - os: osx
          osx_image: xcode7.3
          env: SPEC=ios
          sudo: false
        - os: android
          language: android
          env: SPEC=android-g++ CONFIG=installer
          sudo: false

android:
  components:
    - platform-tools
    - build-tools-21.1.1
    - android-21

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - ccache
    - debhelper
    - devscripts
    - dput
    - espeak
    - g++-4.8
    - gcc-4.8
    - libc6-i386
    - libespeak-dev
    - libgstreamer-plugins-base1.0-dev
    - libgstreamer1.0-0:amd64
    - libgstreamer1.0-dev
    - libopenscenegraph-dev
    - libsdl1.2-dev
    - libudev-dev
    - wget

before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -f $HOME/.cache/pip/log/debug.log

cache:
  bundler: true
  ccache: true
  pip: true
  directories:
    - $HOME/.cache/pip
    - $HOME/.ccache
    - $HOME/.gradle/caches
    - $HOME/.gradle/wrapper

before_install:
  - if [ "${CONFIG}" = "installer" ]; then
        cd ${TRAVIS_BUILD_DIR} &&
        git fetch --unshallow &&
        git fetch --all --tags
        ;
    fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        mkdir -p ~/.config/QtProject/ &&
        cp ${TRAVIS_BUILD_DIR}/test/qtlogging.ini ~/.config/QtProject/
        ;
    fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
        mkdir -p ~/Library/Preferences/QtProject/ &&
        cp ${TRAVIS_BUILD_DIR}/test/qtlogging.ini ~/Library/Preferences/QtProject/
        ;
    fi
  - if [ "${SPEC}" = "android-g++" ]; then
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/gstreamer-1.0-android-armv7-1.5.2.tar.bz2 &&
        mkdir -p ${TRAVIS_BUILD_DIR}/gstreamer-1.0-android-armv7-1.5.2 &&
        tar jxf gstreamer-1.0-android-armv7-1.5.2.tar.bz2 -C ${TRAVIS_BUILD_DIR}/gstreamer-1.0-android-armv7-1.5.2
        ;
    fi

install:
  - if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.5.1-linux-min.tar.bz2 &&
        tar jxf Qt5.5.1-linux-min.tar.bz2 -C /tmp &&
        export PATH=/tmp/Qt/5.5/gcc_64/bin:$PATH &&
        export CXX="g++-4.8" &&
        export CC="gcc-4.8" &&
        export DISPLAY=:99.0 &&
        sh -e /etc/init.d/xvfb start
        ;
    fi
  - if [[ "${TRAVIS_OS_NAME}" = "osx" && "${SPEC}" != "ios" ]]; then
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/gstreamer-1.0-devel-1.5.2-x86_64.pkg &&
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/gstreamer-1.0-1.5.2-x86_64.pkg &&
        sudo installer -verboseR -pkg gstreamer-1.0-devel-1.5.2-x86_64.pkg -target / &&
        sudo installer -verboseR -pkg gstreamer-1.0-1.5.2-x86_64.pkg -target / &&
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.5.1-mac-clang-min.tar.bz2 &&
        tar jxf Qt5.5.1-mac-clang-min.tar.bz2 -C /tmp &&
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/osx-gstreamer.tar.bz2 &&
        sudo tar jxf osx-gstreamer.tar.bz2 -C /Library/Frameworks &&
        export QT_DIR=Qt5.5-mac-clang/5.5/clang_64 &&
        export PATH=/tmp/$QT_DIR/bin:$PATH &&
        export QT_QPA_PLATFORM_PLUGIN_PATH=/tmp/$QT_DIR/plugins &&
        export QML2_IMPORT_PATH=/tmp/$QT_DIR/qml
        ;
    fi
  - if [[ "${TRAVIS_OS_NAME}" = "osx" ]]; then
        wget https://s3.amazonaws.com/px4-travis/toolchain/macos/ccache &&
        sudo mv ccache /usr/local/bin &&
        chmod +x /usr/local/bin/ccache &&
        export CCACHE_CPP2=1
        ;
    fi
  - if [[ "${TRAVIS_OS_NAME}" = "osx" && "${SPEC}" = "ios" ]]; then
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.5.1-ios-min.tar.bz2 &&
        tar jxf Qt5.5.1-ios-min.tar.bz2 -C /tmp &&
        export PATH=/tmp/ios/bin:$PATH &&
        export IOS_CCACHE_CC=`/usr/bin/xcrun -sdk iphoneos -find clang` &&
        export IOS_CCACHE_CXX=`/usr/bin/xcrun -sdk iphoneos -find clang++`
        ;
    fi
  - if [ "${SPEC}" = "android-g++" ]; then
        wget http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin &&
        chmod +x android-ndk-r10e-linux-x86_64.bin &&
        ./android-ndk-r10e-linux-x86_64.bin > /dev/null &&
        export PATH=`pwd`/android-ndk-r10e:$PATH &&
        export ANDROID_NDK_ROOT=`pwd`/android-ndk-r10e &&
        export ANDROID_SDK_ROOT=/usr/local/android-sdk &&
        wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.5.1-linux-min.tar.bz2 &&
        tar jxf Qt5.5.1-linux-min.tar.bz2 -C /tmp &&
        export PATH=/tmp/Qt/5.5/android_armv7/bin:$PATH
        export USE_CCACHE=1 &&
        export NDK_CCACHE=`which ccache`
        ;
    fi


before_script:
# setup ccache
  - ccache -M 1GB && ccache -z
  - wget http://px4-travis.s3.amazonaws.com/Firmware/master/parameters.xml -O src/FirmwarePlugin/PX4/PX4ParameterFactMetaData.xml
  - wget http://px4-travis.s3.amazonaws.com/Firmware/master/airframes.xml -O src/AutoPilotPlugins/PX4/AirframeFactMetaData.xml
  - if [[ "${SPEC}" = "android-g++" && "${CONFIG}" = "installer" && -z ${ANDROID_STOREPASS} ]]; then
        export CONFIG=release
        ;
    fi
  - if [ "${TRAVIS_OS_NAME}" != "osx" ]; then
        export JOBS=$((`cat /proc/cpuinfo | grep -c ^processor`+1))
        ;
    fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
        export JOBS=$((`sysctl -n hw.ncpu`+1))
        ;
    fi
  - if [ "${SPEC}" != "ios" ]; then
        mkdir ${SHADOW_BUILD_DIR} &&
        cd ${SHADOW_BUILD_DIR} &&
        qmake -r ${TRAVIS_BUILD_DIR}/qgroundcontrol.pro CONFIG+=${CONFIG} CONFIG+=WarningsAsErrorsOn -spec ${SPEC}
        ;
    fi
  - if [ "${SPEC}" = "ios" ]; then
        mkdir ${SHADOW_BUILD_DIR} &&
        cd ${SHADOW_BUILD_DIR} &&
        qmake -r ${TRAVIS_BUILD_DIR}/qgroundcontrol.pro CONFIG+=WarningsAsErrorsOn CONFIG-=debug_and_release CONFIG+=release
        ;
    fi

script:
  - if [ "${SPEC}" = "android-g++" ]; then
        cd ${TRAVIS_BUILD_DIR} &&
        ./tools/update_android_version.sh &&
        export JOBS=4
        ;
    fi
  - if [ "${SPEC}" != "ios" ]; then
        cd ${SHADOW_BUILD_DIR} && echo Building with $JOBS workers &&
        make -j$JOBS | sed 's/${TRAVIS_BUILD_DIR}/-/' && $(exit ${PIPESTATUS[0]})
        ;
    fi
  - if [ "${SPEC}" = "ios" ]; then
        cd ${SHADOW_BUILD_DIR} && echo Building with $JOBS workers &&
        xcodebuild -IDEBuildOperationMaxNumberOfConcurrentCompileTasks=$JOBS -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty -c && $(exit ${PIPESTATUS[0]})
        ;
    fi
  - ccache -s
  # linux unit tests
  - if [[ "${TRAVIS_OS_NAME}" = "linux" && "${CONFIG}" = "debug" ]]; then
        ${SHADOW_BUILD_DIR}/debug/qgroundcontrol --unittest
        ;
    fi
  # osx unit tests
  - if [[ "${TRAVIS_OS_NAME}" = "osx" && "${CONFIG}" = "debug" ]]; then
        ${SHADOW_BUILD_DIR}/debug/qgroundcontrol.app/Contents/MacOS/qgroundcontrol --unittest
        ;
    fi

after_success:
  - if [[ "${TRAVIS_OS_NAME}" = "linux" && "${CONFIG}" = "installer" ]]; then
        ${TRAVIS_BUILD_DIR}/deploy/create_linux_appimage.sh ${TRAVIS_BUILD_DIR} ${SHADOW_BUILD_DIR}/release ${SHADOW_BUILD_DIR}/release/package;
    fi
  - if [ "${TRAVIS_TAG}" ]; then
        export GOOGLE_PLAY_TRACK=production;
    elif [ "${TRAVIS_BRANCH}" = "master" ]; then
        export GOOGLE_PLAY_TRACK=beta;
    else
        export GOOGLE_PLAY_TRACK=none;
    fi
  - if [[ "${SPEC}" = "android-g++" && "${TRAVIS_PULL_REQUEST}" = "false" && "${GOOGLE_PLAY_TRACK}" != "none" ]]; then
        pip install --user google-api-python-client PyOpenSSL &&
        cd ${TRAVIS_BUILD_DIR} &&
        openssl aes-256-cbc -K $encrypted_25db6eb7c3fd_key -iv $encrypted_25db6eb7c3fd_iv -in ${TRAVIS_BUILD_DIR}/android/Google_Play_Android_Developer-4432a3c4f5d1.json.enc -out android/Google_Play_Android_Developer-4432a3c4f5d1.json -d &&
        ${TRAVIS_BUILD_DIR}/tools/google_play_upload.py ${GOOGLE_PLAY_TRACK} org.mavlink.qgroundcontrol ${SHADOW_BUILD_DIR}/release/package/qgroundcontrol.apk
        ;
    fi

deploy:
  - provider: s3
    access_key_id: AKIAIVORNALE7NHD3T6Q
    secret_access_key:
      secure: BsLXeXUPsCJdX4tawrDnO8OFK5Hk4kzlDTiyH93En6TbjUargVAWDMcHVj7TUhr7+3Tao1W1zb0G4SJe9kHv+jrky0yE72KvoG3YAON0VXWKizxBAKkgHE2RxSTNAwDeKbi2G6YJfNDescBBfX7zEohShdXglQu7CGaUQKRaiI4=
    bucket: qgroundcontrol
    local_dir: ${SHADOW_BUILD_DIR}/release/package
    upload-dir: builds/${TRAVIS_BRANCH}
    acl: public_read
    region: us-west-2
    skip_cleanup: true
    on:
      all_branches: true
      condition: $CONFIG = installer
  - provider: releases
    api-key:
      secure: K/Zqr/FCC7QvzFxYvBtCinPkacQq2ubJ2qm982+38Zf/KjibVOF1dEbVdrGZmII6Tg5DaQzNXGYkg5PvYmJgT9xRsqeQjeYIUYqYZpAt+HYWA38AVfMU8jip/1P1wmwqD469nzJOBBa8yfsMs6Ca7tBaNl/zTxCRGnAgEzqtkdQ=
    file_glob: true
    file:
      - ${SHADOW_BUILD_DIR}/release/package/qgroundcontrol.*
      - ${SHADOW_BUILD_DIR}/release/package/QGroundControl.*
    skip_cleanup: true
    on:
      tags: true
      condition: $CONFIG = installer

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/60b033428ae9dc715662
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always
